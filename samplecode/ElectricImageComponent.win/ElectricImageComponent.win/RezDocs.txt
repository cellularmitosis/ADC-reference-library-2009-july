RezThe Rez tool allows creation of resource files from .r files. Rez is a DOS Console Application.The following options are available from the command line.Rez [option...] [file...]  < file    -a[ppend]			# merge resource into output resource file    -align word | longword	# align resource to word or longword boundaries    -d[efine] name[=value]	# equivalent to: #define macro [value]    -i[nclude] pathname		# path to search when looking for  #include files    -m[odification]		# don't change the output file's modification date    -o file			# write output to file (default Rez.Out)    -ov				# ok to overwrite protected resources when appending    -p				# write progress information to diagnostics    -rd				# suppress warnings for redeclared types    -s[earch] pathname		# path to search when looking for INCLUDE resources    -u[ndef] name		# equivalent to: #undef name --------------------------------------------------------------------------------RezWackThe RezWack embeds a resource fork in a dll or executable. RezWack is a DOS Console Application.The following options are available from the command line.RezWack	-d dataForkName [-do dataForkOffset] 	-r resourceForkName [-ro resourceForkOffset]  	-o outputFileName [-f] -d dataForkName is required. It is the name of the "data" fork or core of your file.If you are going to wack a dll, it would be the name of your dll (ie. myCoolComponent.dll)-do dataForkOffset is optional. If you have header information in the front of your data filethat you do not want to include, use this offset to skip the appropriate number of bytes.An obscure feature to stay away from.-r resourceForkName is required. It is the name of the "Rez"d resource file. It is NOT the nameof a raw .r resource source file. The data in this file will be appended to the dataFork in thenew file.-ro resourceForkOffset is optional. If there is header information in the front of your resourcefile that you do not want to include, use this offset. Another obscure feature to stay away from.-o outputFileName is required. It is the name of the resulting output file. Do not use the samename as either of the input files.-f is optional. It allows you to overwrite the filename specified in the -o option.