<HTML><head><script language="JavaScript" src="../../RM/frametest.js"></script><TITLE> QTLists </TITLE><script language=javascript> window.parent.focus(); </script></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><!-- QTnavbar start --><P><I>What's New in QuickTime 5</I><P>| <A HREF="Max.8f.htm">Previous</A> | <A HREF="Max.1.htm">Chapter Contents</A> | <A HREF="Max.htm">Chapter Top</A> | <A HREF="Max.91.htm">Next</A> |</P></DIV><!-- QTnavbar end --><H1 CLASS="H3.Heading3"><A NAME="pgfId=83857"> </A>QTLists </H1><P CLASS="T1.Text1"><A NAME="pgfId=92783"> </A>QTLists are hierarchical data structures stored in movies or tracks. Any movie or track can have a qtlist. QTLists resemble XML, with elements than can have child elements or values, as well as attributes. A set of wired actions and operands provide access to manipulate these lists and exchange them with servers via XML.</P><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=98392"> </A>kActionListSetFromURL = 13317&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* (C string url, C string targetParentPath ) */</code><br><P CLASS="T1.Text1"><A NAME="pgfId=92738"> </A>This allows the scripter to use an XML file to initialize a list. Note that this is a synchronous action while kActionListServerQuery is an asynchronous method of loading lists. </P><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=98396"> </A>kActionListAddElement = 13312,/* (C string parentPath, short atIndex, C string <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newElementName) */</code><br><P CLASS="T1.Text1"><A NAME="pgfId=68225"> </A>Adds the element to the target list. </P><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=98400"> </A>kActionListRemoveElements = 13313,/* (C string parentPath, short startIndex, short <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;endIndex) */</code><br><P CLASS="T1.Text1"><A NAME="pgfId=68229"> </A>Removes the element from the target list. </P><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=98404"> </A>kActionListSetElementValue = 13314,/* (C string elementPath, C string valueString) */</code><br><P CLASS="T1.Text1"><A NAME="pgfId=68233"> </A>Sets the list element value. </P><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=98408"> </A>kActionListPasteFromXML = 13315,/* (C string xml, C string targetParentPath, short <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startIndex) */</code><br><P CLASS="T1.Text1"><A NAME="pgfId=68237"> </A>Pastes an XML-formatted list into the target list at <TT CLASS="cv">startIndex</TT>. </P><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=98412"> </A>kActionListSetMatchingFromXML = 13316/* (C string xml, C string targetParentPath) */</code><br><P CLASS="T1.Text1"><A NAME="pgfId=68240"> </A>Replaces the matching element values in the target list.</P><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=98416"> </A>kActionListServerQuery = 13319 /* (C string url, C string keyValuePairs, long flags, C <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string parentPath) */</code><br><P CLASS="T1.Text1"><A NAME="pgfId=92756"> </A>This provides a versatile method for sending and receiving data from a server. Note that this is an asynchronous method of loading data, and that the returned data will be available in the local &quot;event.list&quot; of the <TT CLASS="cv">ListReceived</TT> event. </P><P CLASS="T1.Text1"><A NAME="pgfId=92780"> </A>If the <TT CLASS="cv">keyValuePairs</TT> string is non nil, it is appended first after the URL. The following flags are then in play:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=98420"> </A>enum&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;kListQuerySendListAsXML&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= 1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;kListQuerySendListAsKeyValuePairs&nbsp;&nbsp;&nbsp;= 2,<BR>&nbsp;&nbsp;&nbsp;&nbsp;kListQueryWantCallback&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= 4,<BR>&nbsp;&nbsp;&nbsp;&nbsp;kListQueryDebugTrace&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= 8<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>};&nbsp;&nbsp;</code><br><P CLASS="T1.Text1"><A NAME="pgfId=83906"> </A>If <TT CLASS="cv">kListQuerySendListAsXML</TT> or <TT CLASS="cv">kListQuerySendListAsKeyValuePairs</TT> are on, then the list target is used in the manner selected, and appended to the URL. The key value pairs are appended in the following way:  </P><CODE CLASS="Cv.Code"><A NAME="pgfId=98424"> </A>url?key1=one&amp;key2=two&amp;key3=three.</code><br><P CLASS="T1.Text1"><A NAME="pgfId=83908"> </A>XML is appended as follows:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=98428"> </A>url?qtlist=&lt;qtlist&gt;&lt;key1&gt;one&lt;/key1&gt;&lt;key2&gt;two&lt;/key2&gt;&lt;key3&gt;three&lt;/key3&gt;&lt;/qtlist&gt;</code><br><P CLASS="T1.Text1"><A NAME="pgfId=83910"> </A>or</P><CODE CLASS="Cv.Code"><A NAME="pgfId=98432"> </A>url?user=joe&amp;qtlist=&lt;qtlist&gt;&lt;key1&gt;one&lt;/key1&gt;&lt;key2&gt;two&lt;/key2&gt;&lt;key3&gt;three&lt;/key3&gt;&lt;/qtlist&gt;</code><br><P CLASS="T1.Text1"><A NAME="pgfId=83912"> </A><TT CLASS="cv">kListQueryWantCallback</TT> indicates whether a list received event is wanted to receive data from the server.</P><P CLASS="T1.Text1"><A NAME="pgfId=83913"> </A><TT CLASS="cv">kListQueryDebugTrace</TT> is added for authoring. This triggers a <TT CLASS="cv">kActionDebugStr</TT>, so that the application can see what URL was actually sent.</P><P CLASS="T1.Text1"><A NAME="pgfId=83914"> </A>As with <TT CLASS="cv">kActionListExchangeLists</TT>, the URL is encoded before delivery.</P><hr>&#169; 2001 Apple Computer, Inc.<!-- QTnavbar start --><P><I>What's New in QuickTime 5</I><P>| <A HREF="Max.8f.htm">Previous</A> | <A HREF="Max.1.htm">Chapter Contents</A> | <A HREF="Max.htm">Chapter Top</A> | <A HREF="Max.91.htm">Next</A> |</P></DIV><!-- QTnavbar end --></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>