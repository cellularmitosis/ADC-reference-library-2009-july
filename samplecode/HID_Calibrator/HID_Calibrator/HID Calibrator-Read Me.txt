HID Calibrator
Human Interface Device Calibration sample

Version 1.0 18 Oct 2007 Initial release.  
----

This application is a Carbon NIB sample which demonstrates the HID Manager APIs introduced in Leopard (10.5). When run, the application it builds will create a window for each attached HID device. The contents of each of these windows consist will be a list of views; one for each HID elements for that HID device. Each of these element views display a grey or green circle (indicating that this element's value has changed since the HID element's view was created), the name of that element, the usage page & usage (In parentheses) and then a slider that displays the elements current, minimal & maximum (logical) values. A blue bar on this slider indicates the range of values that have actually been received from the device. These element views update as their corresponding HID element values change.

----

Requirements: Mac OS X 10.5, Xcode 3.0

Packing List
------------
The sample contains the following items:

    HID Calibrator-Read Me.rtf      - this file
    HID Calibrator.xcodeproj        - Xcode project file
    configs                         - Xcode configuration files
    HID Calibrator_Prefix.pch       - prefix header file
    main.c                          - main source file
    HID Calibrator-Info.plist       - source for info.plist
    English.lproj                   - English localization files
           main.nib                 - the main nib
           InfoPlist.strings        - strings file
    HID Utilities                   - folder of sources for HID utility files
           IOHIDLib_.h              - single include header for HID utility files
           HID_Utilities.c          - HID utility source
           HID_Utilities.h          - HID utility header
           IOHIDDevice_.c           - HID Device utilities source
           IOHIDDevice_.h           - HID Device utilities header
           IOHIDElement_.c          - HID Element utilities source
           IOHIDElement_.h          - HID Element utilities source
           English.lproj            - HID utilities localization files
               HID_usage_strings.plist - HID usage strings (XML) file
    build                           - contains a prebuilt binary.

Building the Sample
-------------------
The sample was built using Xcode 3.0 on Mac OS X 10.5.  You should be able to just open the project and choose Build from the Build menu.  This will build "HID Calibrator.app" in the "build/debug" or "build/release" directory.

Using the Sample
----------------
Launch "HID Calibrator" and it will create a window for each HID device on the system. 
Select a window for a HID device that you can interact with (keyboard, mouse, joystick, etc.).
Interact with the selected device; you should see corresponding element change in its element view.
Note: you may need to scoll to see the effected element view.

How the code works
------------
In the "main" routine if all the initialization code executes successfully then the Initialize_HID routine is called. This routine creates a IOHID Manager reference which is then used to install device matching (Handle_DeviceMatchingCallback) and removal (Handle_DeviceRemovalCallback) callbacks and schedule the manager with the runloop. It then calls HIDBuildMultiDeviceList (a routine in the HID Utilities sources) that opens the IOHID Manager reference. 

When the IOHID Manager reference is opened the Handle_DeviceMatchingCallback routine is called once for each HID device currently connected to the system. This routine then calls Handle_New with the new HID device reference and then registers a device input value callback (Handle_IOHIDValueCallback). 

The Handle_New routine creates a new window for the new device and set a custom window property (kHIDDevicePropertyTag) for the HID device reference and a custom HID device property (kHIDWindowRefPropertyKey) for the window reference (this makes it easy to determine the association between windows and HID devices). It then iterates over all the input HID elements for this device and creates HIViews for each element and adds them to the window. A custom control property (kHIDHIViewRefPropertyKey) is set to the HID element reference and a custom HID element property is set to the HIView reference (this makes it easy to determine the association between HIViews and HID elements).

When a HID element value changes the Handle_IOHIDValueCallback routine is called. This routine first checks the new value to see if it is outside the calibration range of the HID element (in which case it adjust those values). Then it uses the custom property HID element  (kHIDHIViewRefPropertyKey) to retrieve the HIViewRef for this HID element and uses that to check the controls min/max values against the new value (and adjust them if necessary). Finally the new control value is set and HIViewSetNeedsDisplay is called to force the HIView to redraw.

When a HID device is removed the Handle_DeviceRemovalCallback routine is called. The custom HID device property (kHIDWindowRefPropertyKey) is used to retrieve the window reference associated with this device and dispose of (close) it.

The drawing code for the element HIView is in the Handle_UserPaneEvents routine.

Caveats
-------

This demonstration application and the set of utilities is constantly evolving to both address any bugs and provide better support for developer requested features. Any suggestions and/or bugs can be directed to the Apple bug reporter at: <http://developer.apple.com/bugreporter/index.html>

We hope this helps people get up and running with the HID Manager APIs introduced in 10.5 in a quick and painless manner.

Credits and Version History
---------------------------

Version 1.0 18 Oct 2007 Initial release.  

Share and Enjoy.
Apple Developer Technical Support
