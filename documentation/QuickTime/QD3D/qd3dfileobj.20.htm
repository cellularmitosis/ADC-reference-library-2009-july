<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Writing to Custom File Objects</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=7596"> </A><A NAME="33509"> </A>Writing to Custom File Objects</H1><P CLASS="T1.Text1"><A NAME="pgfId=7601"> </A>Writing to custom file objects is done in two stages: the traversal stage, where the data to be written is set up, and the actual writing stage.</P><P CLASS="T1.Text1"><A NAME="pgfId=7610"> </A>Traversal is done by the custom object's <TT CLASS="cv">TQ3XObjectTraverseMethod</TT> or <TT CLASS="cv">TQ3XObjectTraverseDataMethod</TT>:</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=14051"> </A>typedef TQ3Status ( QD3D_CALLBACK <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*TQ3XObjectTraverseMethod)(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Object object,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void *data,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ViewObject view);<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=7603"> </A>Writing is done by the custom object's <TT CLASS="cv">TQ3XObjectWriteMethod</TT>:</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=14057"> </A>typedefTQ3Status(QD3D_CALLBACK *TQ3XObjectWriteMethod)(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const void *object,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=7597"> </A>The first part of the custom object's <TT CLASS="cv">TQ3XObjectTraverseMethod</TT> traverses the root object. A metafile object always has a root object, which may or may not have one or more subobjects. The root object consists of all data that is not itself a QD3D object. All data in the form of QD3D objects must appear in the metafile as subobjects. For example, in a box the geometrical data (origin, orientation, and axes) makes up the root object. But the attribute sets (both face attribute sets and box attribute sets) are themselves QD3D objects, so they must be subobjects. If an object has subobjects, then the root and the subobjects are all contained in a container.  If there are no subobjects, then no container is necessary.</P><P CLASS="T1.Text1"><A NAME="pgfId=7756"> </A>The custom object's <TT CLASS="cv">TQ3XObjectTraverseMethod</TT> computes the size of the root object and then calls <TT CLASS="cv">Q3XView_SubmitWriteData</TT> once to traverse the root. After that, it can submit the subobjects, if any. It does this by making the public API call <TT CLASS="cv">Q3Object_Submit</TT> on each subobject. As a shortcut, it can call the Q3XView_SubmitSubObjectData function.</P><P CLASS="T1.Text1"><A NAME="pgfId=7780"> </A>If you need data from the view that's passed to the <TT CLASS="cv">Q3View_StartWriting</TT> call that initiates the write loop, you must obtain it during your traverse routine (which is passed this view as argument). You cannot obtain data from the view during your write routine, since it does not take a view as argument and there is no other way to access the view from within it.</P><P CLASS="T1.Text1"><A NAME="pgfId=7781"> </A>Note that your <TT CLASS="cv">TQ3XObjectTraverseMethod</TT> can check some condition and, based on the result, decide not to write a particular part of the memory accessible from the <TT CLASS="cv">data</TT> parameter in Q3XView_SubmitWriteData as part of the root object.  It does this by not adding bytes to the <TT CLASS="cv">size</TT> parameter. This decision must be mirrored in your <TT CLASS="cv">TQ3XObjectWriteMethod</TT> method, where the corresponding <TT CLASS="cv">Q3..._Write</TT> calls must be bypassed. The <TT CLASS="cv">TQ3XObjectTraverseMethod</TT> can decide not to make any particular <TT CLASS="cv">Q3Object_Submit</TT> call on a subobject, but this doesn't require any mirroring in the <TT CLASS="cv">TQ3XObjectWriteMethod</TT> because <TT CLASS="cv">Q3Object_Submit</TT> in the traverse method is all that's needed for writing a subobject.  There is one special case: your traverse method can decide to write nothing at all by simply returning <TT CLASS="cv">kQ3Success</TT> immediately.  In that case the write method will never get called, so it doesn't need to do any checking of conditions.  </P><P CLASS="T1.Text1"><A NAME="pgfId=7782"> </A>Your <TT CLASS="cv">TQ3XObjectWriteMethod</TT> consists of making any of the following calls (and no others) to write out the data of its root object. These calls are described in <A HREF="qd3dfileobj.1a.htm#28623" CLASS="XRef">&quot;Reading and Writing File Data&quot;</A>.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=14063"> </A>Q3Uns8_Write<BR>Q3Uns16_Write<BR>Q3Uns32_Write<BR>Q3Int32_Write<BR>Q3Uns64_Write<BR>Q3Float32_Write<BR>Q3Float64_Write<BR>Q3Point2D_Write<BR>Q3Point3D_Write<BR>Q3RationalPoint3D_Write<BR>Q3RationalPoint4D_Write<BR>Q3Vector2D_Write<BR>Q3Vector3D_Write<BR>Q3Matrix4x4_Write<BR>Q3Tangent2D_Write<BR>Q3Tangent3D_Write<BR>Q3NewLine_Write<BR>Q3String_Write<BR>Q3Size_Pad<BR>Q3RawData_Write<BR>Q3Comment_Write<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=7831"> </A>The <TT CLASS="cv">TQ3XObjectWriteMethod</TT> does nothing with subobjects; their roots are written by their own <TT CLASS="cv">TQ3XObjectWriteMethod</TT>.</P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=7509"> </A>Q3XView_SubmitWriteData</H2><P CLASS="T1.Text1"><A NAME="pgfId=7510"> </A>You can use the Q3XView_SubmitWriteData function to write data to a custom file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=14067"> </A>TQ3Status Q3XView_SubmitWriteData(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      TQ3ViewObject view,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      TQ3Size size,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      void *data,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      TQ3XDataDeleteMethod deleteData);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=14069"> </A>view</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=7512"> </A>A view.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=14078"> </A>size</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=7513"> </A>The size of the data actually written.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=14087"> </A>data</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=7567"> </A>A pointer to memory containing the data to be written.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=14096"> </A>deleteData</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=7569"> </A>A <TT CLASS="cv">TQ3XDataDeleteMethod</TT> method.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=7515"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=7516"> </A>The Q3XView_SubmitWriteData function writes the data pointed to by data, of size size, to the view view object. The deleteData parameter designates a method that disposes of memory allocations upon completion.</P><P CLASS="T1.Text1"><A NAME="pgfId=7743"> </A>It is important that the size parameter matches the size of the data actually written. If this is not so, Q3XView_SubmitWriteData will fail.</P><P CLASS="T1.Text1"><A NAME="pgfId=7730"> </A>The data pointer is later passed to your <TT CLASS="cv">TQ3XObjectWriteMethod</TT>. Typically, it will point to a data structure, and your write routine will contain various calls from the family <TT CLASS="cv">Q3Uns8_Write</TT>, <TT CLASS="cv">Q3Uns32_Write</TT>, etc (see <A HREF="qd3dfileobj.1a.htm#28623" CLASS="XRef">&quot;Reading and Writing File Data&quot;</A>), which will write to various fields in that data structure. </P><P CLASS="T1.Text1"><A NAME="pgfId=7739"> </A>The deleteData parameter designates a <TT CLASS="cv">TQ3XDataDeleteMethod</TT>. It is passed a pointer to your data structure, and it will delete whatever needs to be deleted (dispose of QD3D objects, deallocate memory, and so on). The delete method will be called upon exit of your write method whether or not your write method succeeded.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=7914"> </A>Q3XView_SubmitSubObjectData</H2><P CLASS="T1.Text1"><A NAME="pgfId=7915"> </A>You can use the Q3XView_SubmitSubObjectData function to write data to a custom file object more efficiently than you can with Q3XView_SubmitWriteData.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=14107"> </A>TQ3Status Q3XView_SubmitSubObjectData(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ViewObject view,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3XObjectClass objectClass,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Size size,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void *data,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3XDataDeleteMethod deleteData);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=14109"> </A>view</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=7917"> </A>A view.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=14118"> </A>size</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=7965"> </A>The size of the data actually written.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=14127"> </A>objectClass</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=7967"> </A>An object class.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=14136"> </A>data</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=7919"> </A>A pointer to memory containing the data to be written.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=14145"> </A>deleteData</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=7920"> </A>A <TT CLASS="cv">TQ3XDataDeleteMethod</TT> method.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=7921"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=7922"> </A>The Q3XView_SubmitSubObjectData function is a shortcut alternative to the Q3XView_SubmitWriteData function. It writes the data pointed to by data, of size size, to the view view object. The deleteData parameter designates a method that disposes of memory allocations upon completion.</P><P CLASS="T1.Text1"><A NAME="pgfId=7972"> </A>You can use the Q3XView_SubmitSubObjectData function in the following situation. Suppose that your custom object C1 has another object of class S1 as a subobject in its metafile, and the only purpose for the existence of class S1 is to enable the writing and reading of these metafile subobjects. On the writing side, you don't need to create the object. You can just to do what's needed in a traverse method (pass its size and a pointer to the data), using <TT CLASS="cv">Q3XView_SubmitSubObjectData</TT>. (<TT CLASS="cv">Q3XView_SubmitSubObjectData</TT> also takes a <TT CLASS="cv">TQ3XObjectClass</TT> as a parameter; this parameter is implicit in <TT CLASS="cv">Q3XView_SubmitWriteData</TT>, where it is assumed to be the class of the root.) The traversal routine for C1 can call <TT CLASS="cv">Q3XView_SubmitSubObjectData</TT>, where the data is C1's data structure, instead of having to first create an object of class S1 and then call <TT CLASS="cv">Q3Object_Submit</TT> on that object. The write method for class S1 remains as it is with Q3XView_SubmitWriteData.</P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>