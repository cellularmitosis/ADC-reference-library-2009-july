<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Public Draw Context Methods</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=41401"> </A><A NAME="41790"> </A>Public Draw Context Methods</H1><P CLASS="T1.Text1"><A NAME="pgfId=41424"> </A><A NAME="marker=51711"> </A>To write a drawing engine, you need to implement a number of drawing methods, pointers to which are contained in a draw context structure (of type <TT CLASS="cv">TQADrawContext</TT>). These functions are called whenever an application uses one of the drawing macros described earlier (in <A HREF="qd3dravedriver.44.htm#21284" CLASS="XRef">&quot;Manipulating Draw Contexts&quot;</A>). For example, when an application uses the <TT CLASS="cv">QADrawPoint</TT> macro to draw a point in a draw context linked to your drawing engine, your engine's <TT CLASS="cv">TQADrawPoint</TT> method is called.</P><P CLASS="T1.Text1"><A NAME="pgfId=41441"> </A>A draw context structure is passed as the first parameter to all these draw context methods. This allows you to retrieve your draw context's private data, which is pointed to by the first field of that structure.</P><P CLASS="I.Important"><A NAME="pgfId=41464"> </A>Most of the draw context methods declare the draw context structure passed to them as <TT CLASS="cv">const</TT>, in which case you should not alter any fields of that structure. Only three methods are allowed to change fields of the draw context structure: <TT CLASS="cv">TQASetFloat</TT>, <TT CLASS="cv">TQASetInt</TT>, and <TT CLASS="cv">TQASetPtr</TT>. Failure to heed the <TT CLASS="cv">const</TT> declaration may cause any code calling your engine (including QuickDraw&nbsp;3D) to fail. </P><P CLASS="T1.Text1"><A NAME="pgfId=48350"> </A>Pointers to your drawing engine's public draw context methods are assigned to the fields of a draw context structure by your <TT CLASS="cv">TQADrawPrivateNew</TT> method. See page&nbsp;<A HREF="qd3dravedriver.48.htm#22246" CLASS="XRef">[link]</A> for details.</P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=45658"> </A>TQAGetFloat</H2><P CLASS="T1.Text1"><A NAME="pgfId=45659"> </A><A NAME="marker=51662"> </A>A drawing engine must define a method to get a floating-point value of a draw context state variable.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=68611"> </A>typedef float (*TQAGetFloat) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *drawContext, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQATagFloat tag); <BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68613"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45661"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68622"> </A><TT CLASS="cv">tag</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45662"> </A>A state variable tag.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=45663"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=45664"> </A>Your <TT CLASS="cv">TQAGetFloat</TT> function should return, as its function result, the floating-point value of the draw context state variable specified by the <TT CLASS="cv">drawContext</TT> and <TT CLASS="cv">tag</TT> parameters. If you do not recognize or support the specified tag, your <TT CLASS="cv">TQAGetFloat</TT> function should return the value 0.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=41474"> </A>TQASetFloat</H2><P CLASS="T1.Text1"><A NAME="pgfId=41481"> </A><A NAME="marker=51657"> </A>A drawing engine must define a method to set a floating-point value for a draw context state variable.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=68633"> </A>typedef void (*TQASetFloat) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQADrawContext *drawContext, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQATagFloat tag, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float newValue);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68635"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41871"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68644"> </A><TT CLASS="cv">tag</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41875"> </A>A state variable tag.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68653"> </A><TT CLASS="cv">newValue</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41879"> </A>The new value of the specified state variable.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=41501"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=41502"> </A>Your <TT CLASS="cv">TQASetFloat</TT> function should set the value of the draw context state variable specified by the <TT CLASS="cv">drawContext</TT> and <TT CLASS="cv">tag</TT> parameters to the floating-point value specified by the <TT CLASS="cv">newValue</TT> parameter.</P><P CLASS="T1.Text1"><A NAME="pgfId=42290"> </A>Your drawing engine must accept all possible values for the <TT CLASS="cv">tag</TT> parameter. If you encounter a value in the <TT CLASS="cv">tag</TT> parameter that you cannot recognize, you should do nothing. Similarly, you should do nothing if the <TT CLASS="cv">tag</TT> parameter specifies a state variable for optional features your drawing engine does not support.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=51298"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=51299"> </A>If your <TT CLASS="cv">TQASetFloat</TT> function needs to change one or more of the function pointers in the specified draw context, it must call the <TT CLASS="cv">QARegisterDrawMethod</TT> function to do so. It should not directly change the fields of a draw context.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=45670"> </A>TQAGetInt</H2><P CLASS="T1.Text1"><A NAME="pgfId=45671"> </A><A NAME="marker=51652"> </A>A drawing engine must define a method to get a long integer value of a draw context state variable.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=68664"> </A>typedef unsigned long (*TQAGetInt) ( <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *drawContext, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQATagInt tag); <BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68666"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45673"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68675"> </A><TT CLASS="cv">tag</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45674"> </A>A state variable tag.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=45675"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=45676"> </A>Your <TT CLASS="cv">TQAGetInt</TT> function should return, as its function result, the long integer value of the draw context state variable specified by the <TT CLASS="cv">drawContext</TT> and <TT CLASS="cv">tag</TT> parameters. If you do not recognize or support the specified tag, your <TT CLASS="cv">TQAGetInt</TT> function should return the value 0.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=41504"> </A>TQASetInt</H2><P CLASS="T1.Text1"><A NAME="pgfId=42208"> </A><A NAME="marker=51647"> </A>A drawing engine must define a method to set a long integer value for a draw context state variable.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=68686"> </A>typedef void (*TQASetInt) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQADrawContext *drawContext, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQATagInt tag, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long newValue);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68688"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41859"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68697"> </A><TT CLASS="cv">tag</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41895"> </A>A state variable tag.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68706"> </A><TT CLASS="cv">newValue</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=42264"> </A>The new value of the specified state variable.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=41511"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=42605"> </A>Your <TT CLASS="cv">TQASetInt</TT> function should set the value of the draw context state variable specified by the <TT CLASS="cv">drawContext</TT> and <TT CLASS="cv">tag</TT> parameters to the long integer value specified by the <TT CLASS="cv">newValue</TT> parameter.</P><P CLASS="T1.Text1"><A NAME="pgfId=42301"> </A>Your drawing engine must accept all possible values for the <TT CLASS="cv">tag</TT> parameter. If you encounter a value in the <TT CLASS="cv">tag</TT> parameter that you cannot recognize, you should do nothing. Similarly, you should do nothing if the <TT CLASS="cv">tag</TT> parameter specifies a state variable for optional features your drawing engine does not support.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=51312"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=51313"> </A>If your <TT CLASS="cv">TQASetInt</TT> function needs to change one or more of the function pointers in the specified draw context, it must call the <TT CLASS="cv">QARegisterDrawMethod</TT> function to do so. It should not directly change the fields of a draw context.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=41537"> </A>TQAGetPtr</H2><P CLASS="T1.Text1"><A NAME="pgfId=42255"> </A><A NAME="marker=51642"> </A>A drawing engine must define a method to get a pointer value of a draw context state variable.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=68717"> </A>typedef void *(*TQAGetPtr) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *drawContext, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQATagPtr tag);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68719"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41823"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68728"> </A><TT CLASS="cv">tag</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41916"> </A>A state variable tag.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=41542"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=42346"> </A>Your <TT CLASS="cv">TQAGetPtr</TT> function should return, as its function result, the pointer value of the draw context state variable specified by the <TT CLASS="cv">drawContext</TT> and <TT CLASS="cv">tag</TT> parameters. If you do not recognize or support the specified tag, your <TT CLASS="cv">TQAGetPtr</TT> function should return the value 0.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=45682"> </A>TQASetPtr</H2><P CLASS="T1.Text1"><A NAME="pgfId=45683"> </A><A NAME="marker=51637"> </A>A drawing engine must define a method to set a pointer value for a draw context state variable.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=68739"> </A>typedef void (*TQASetPtr) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQADrawContext *drawContext, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQATagPtr tag, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const void *newValue);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68741"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45685"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68750"> </A><TT CLASS="cv">tag</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45686"> </A>A state variable tag.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68759"> </A><TT CLASS="cv">newValue</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45687"> </A>The new value of the specified state variable.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=45688"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=45689"> </A>Your <TT CLASS="cv">TQASetPtr</TT> function should set the value of the draw context state variable specified by the <TT CLASS="cv">drawContext</TT> and <TT CLASS="cv">tag</TT> parameters to the pointer value specified by the <TT CLASS="cv">newValue</TT> parameter.</P><P CLASS="T1.Text1"><A NAME="pgfId=45690"> </A>Your drawing engine must accept all possible values for the <TT CLASS="cv">tag</TT> parameter. If you encounter a value in the <TT CLASS="cv">tag</TT> parameter that you cannot recognize, you should do nothing. Similarly, you should do nothing if the <TT CLASS="cv">tag</TT> parameter specifies a state variable for optional features your drawing engine does not support.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=51321"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=51322"> </A>If your <TT CLASS="cv">TQASetPtr</TT> function needs to change one or more of the function pointers in the specified draw context, it must call the <TT CLASS="cv">QARegisterDrawMethod</TT> function to do so. It should not directly change the fields of a draw context.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=41544"> </A>TQADrawPoint</H2><P CLASS="T1.Text1"><A NAME="pgfId=41545"> </A><A NAME="marker=51632"> </A>A drawing engine must define a method to draw a point.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=68770"> </A>typedef void (*TQADrawPoint) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *drawContext, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQAVGouraud *v);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68772"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41815"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68781"> </A><TT CLASS="cv">v</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41819"> </A>A Gouraud vertex.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=41549"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=41550"> </A>Your <TT CLASS="cv">TQADrawPoint</TT> function should draw the single point specified by the <TT CLASS="cv">v</TT> parameter to the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter. The size of the point is determined by the <TT CLASS="cv">kQATag_Width</TT> state variable of the draw context.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=41551"> </A>TQADrawLine</H2><P CLASS="T1.Text1"><A NAME="pgfId=41552"> </A><A NAME="marker=51627"> </A>A drawing engine must define a method to draw a line between two points.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=68792"> </A>typedef void (*TQADrawLine) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *drawContext, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQAVGouraud *v0, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQAVGouraud *v1);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68794"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41803"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68803"> </A><TT CLASS="cv">v0</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41807"> </A>A Gouraud vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68812"> </A><TT CLASS="cv">v1</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41811"> </A>A Gouraud vertex.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=42365"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=42366"> </A>Your <TT CLASS="cv">TQADrawLine</TT> function should draw the line specified by the <TT CLASS="cv">v0</TT> and <TT CLASS="cv">v1</TT> parameters to the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter. The size of the line is determined by the <TT CLASS="cv">kQATag_Width</TT> state variable of the draw context. If the specified vertices have different colors, the line color is interpolated smoothly between the two vertex colors.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=41561"> </A>TQADrawTriGouraud</H2><P CLASS="T1.Text1"><A NAME="pgfId=41562"> </A><A NAME="marker=51622"> </A>A drawing engine must define a method to draw Gouraud-shaded triangles.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=68823"> </A>typedef void (*TQADrawTriGouraud) ( <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *drawContext, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQAVGouraud *v0, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQAVGouraud *v1, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQAVGouraud *v2, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long flags);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68825"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41783"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68834"> </A><TT CLASS="cv">v0</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41787"> </A>A Gouraud vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68843"> </A><TT CLASS="cv">v1</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41791"> </A>A Gouraud vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68852"> </A><TT CLASS="cv">v2</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41795"> </A>A Gouraud vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68861"> </A><TT CLASS="cv">flags</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41799"> </A>A set of triangle flags. See <A HREF="qd3dravedriver.2c.htm#40215" CLASS="XRef">&quot;Triangle Flags Masks&quot;</A> for a complete description of the available flags.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=41566"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=41567"> </A>Your <TT CLASS="cv">TQADrawTriGouraud</TT> function should draw the Gouraud-shaded triangle determined by the three points specified by the <TT CLASS="cv">v0</TT>, <TT CLASS="cv">v1</TT>, and <TT CLASS="cv">v2</TT> parameters into the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter. Features of the triangle are determined by the <TT CLASS="cv">flags</TT> parameter. Currently, this parameter is used to specify an orientation for the triangle.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=41568"> </A>TQADrawTriTexture</H2><P CLASS="T1.Text1"><A NAME="pgfId=41569"> </A><A NAME="marker=51617"> </A>A drawing engine may define a method to draw texture-mapped triangles. This method is optional and must be supported only by drawing engines that support texture mapping.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=68872"> </A>typedef void (*TQADrawTriTexture) ( <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *drawContext, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQAVTexture *v0, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQAVTexture *v1, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQAVTexture *v2, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long flags);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68874"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41936"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68883"> </A><TT CLASS="cv">v0</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41937"> </A>A texture vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68892"> </A><TT CLASS="cv">v1</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41938"> </A>A texture vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68901"> </A><TT CLASS="cv">v2</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41939"> </A>A texture vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68910"> </A><TT CLASS="cv">flags</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=42397"> </A>A set of triangle flags. See <A HREF="qd3dravedriver.2c.htm#40215" CLASS="XRef">&quot;Triangle Flags Masks&quot;</A> for a complete description of the available flags.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=41573"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=42437"> </A>Your <TT CLASS="cv">TQADrawTriTexture</TT> function should draw the texture-mapped triangle determined by the three points specified by the <TT CLASS="cv">v0</TT>, <TT CLASS="cv">v1</TT>, and <TT CLASS="cv">v2</TT> parameters into the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter. The texture used for the mapping is determined by the value of the <TT CLASS="cv">kQATag_Texture</TT> state variable. Features of the triangle are determined by the <TT CLASS="cv">flags</TT> parameter. Currently, this parameter is used to specify an orientation for the triangle.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=57233"> </A>TQASubmitVerticesGouraud</H2><P CLASS="T1.Text1"><A NAME="pgfId=57329"> </A><A NAME="marker=58011"> </A><A NAME="marker=57347"> </A>A drawing engine may define a method to submit Gouraud vertices.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=68921"> </A>typedef void (*TQASubmitVerticesGouraud) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *drawContext,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long nVertices,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQAVGouraud *vertices);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68923"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57237"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68932"> </A><TT CLASS="cv">nVertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57238"> </A>The number of Gouraud vertices pointed to by the <TT CLASS="cv">vertices</TT> parameter.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68941"> </A><TT CLASS="cv">vertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57239"> </A>A pointer to an array of Gouraud vertices.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=57240"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=57241"> </A>Your <TT CLASS="cv">TQASubmitVerticesGouraud</TT> function should prepare to render a Gouraud-shaded triangular mesh in the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter using the vertices pointed to by the <TT CLASS="cv">vertices</TT> parameter. The actual triangulation and drawing of the mesh does not occur until an application calls the QADrawTriMeshGouraud function.</P><P CLASS="T1.Text1"><A NAME="pgfId=57242"> </A>The calling application is responsible for managing the memory occupied by the Gouraud vertices. Your <TT CLASS="cv">TQASubmitVerticesGouraud</TT> function should not copy the vertex data pointed to by the <TT CLASS="cv">vertices</TT> parameter.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=57243"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=57247"> </A>The <TT CLASS="cv">TQASubmitVerticesGouraud</TT> method is optional. If your drawing engine does not support triangle meshes, QuickDraw&nbsp;3D RAVE decomposes a triangle mesh into individual triangles when the user calls the <TT CLASS="cv">QASubmitVerticesGouraud</TT> function to submit a triangle mesh.</P><P CLASS="T1.Text1"><A NAME="pgfId=57806"> </A>There is no QuickDraw&nbsp;3D RAVE function that an application can use to unsubmit a triangle mesh. Your drawing engine must manage memory in some appropriate manner.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=57248"> </A>TQASubmitVerticesTexture</H2><P CLASS="T1.Text1"><A NAME="pgfId=57399"> </A><A NAME="marker=57398"> </A>A drawing engine may define a method to submit texture vertices. This method is optional and must be supported only by drawing engines that support texture mapping.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=68952"> </A>typedef void (*TQASubmitVerticesTexture) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *drawContext,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long nVertices,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQAVTexture *vertices);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68954"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57401"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68963"> </A><TT CLASS="cv">nVertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57402"> </A>The number of texture vertices pointed to by the <TT CLASS="cv">vertices</TT> parameter.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68972"> </A><TT CLASS="cv">vertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57403"> </A>A pointer to an array of texture vertices.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=57404"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=57405"> </A>Your <TT CLASS="cv">TQASubmitVerticesTexture</TT> function should prepare to render a texture-mapped triangular mesh in the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter using the vertices pointed to by the <TT CLASS="cv">vertices</TT> parameter. The actual triangulation and drawing of the mesh does not occur until an application calls the <TT CLASS="cv">QADrawTriMeshTexture</TT> function.</P><P CLASS="T1.Text1"><A NAME="pgfId=57406"> </A>The calling application is responsible for managing the memory occupied by the texture vertices. Your <TT CLASS="cv">TQASubmitVerticesTexture</TT> function should not copy the vertex data pointed to by the <TT CLASS="cv">vertices</TT> parameter.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=57407"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=57408"> </A>The <TT CLASS="cv">TQASubmitVerticesTexture</TT> method is optional. If your drawing engine does not support triangle meshes, QuickDraw&nbsp;3D RAVE decomposes a triangle mesh into individual triangles when the user calls the <TT CLASS="cv">QASubmitVerticesTexture</TT> function to submit a triangle mesh.</P><P CLASS="T1.Text1"><A NAME="pgfId=57814"> </A>There is no QuickDraw&nbsp;3D RAVE function that an application can use to unsubmit a triangle mesh. Your drawing engine must manage memory in some appropriate manner.<A NAME="marker=58012"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=57264"> </A>TQADrawTriMeshGouraud</H2><P CLASS="T1.Text1"><A NAME="pgfId=57458"> </A><A NAME="marker=58013"> </A><A NAME="marker=57457"> </A>A drawing engine may define a method to draw a triangle mesh with Gouraud shading.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=68983"> </A>typedef void (*TQADrawTriMeshGouraud) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *drawContext,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long nTriangles,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQAIndexedTriangle *triangles);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68985"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57268"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68994"> </A><TT CLASS="cv">nTriangle</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57269"> </A>The number of indexed triangles pointed to by the <TT CLASS="cv">triangles</TT> parameter.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69003"> </A><TT CLASS="cv">triangles</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57272"> </A>A pointer to an array of indexed triangles. See <A HREF="qd3dravedriver.3e.htm#38704" CLASS="XRef">&quot;Indexed Triangle Structure&quot;</A> for a description of indexed triangles.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=57274"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=57275"> </A>Your <TT CLASS="cv">TQADrawTriMeshGouraud</TT> function should draw, with Gouraud shading, the triangle mesh specified by the <TT CLASS="cv">triangles</TT> parameter into the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter. Each triangle in the mesh is defined by a <TT CLASS="cv">TQAIndexedTriangle</TT> data structure, which contains three indices into the array of Gouraud vertices previously submitted to the draw context by a call to the <TT CLASS="cv">QASubmitVerticesGouraud</TT> function.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=57276"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=57465"> </A>The <TT CLASS="cv">TQADrawTriMeshGouraud</TT> method is optional. If your drawing engine does not support triangle meshes, QuickDraw&nbsp;3D RAVE decomposes a triangle mesh into individual triangles when the user calls the <TT CLASS="cv">QASubmitVerticesGouraud</TT> function to submit a triangle mesh.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=57278"> </A>TQADrawTriMeshTexture</H2><P CLASS="T1.Text1"><A NAME="pgfId=57475"> </A><A NAME="marker=57474"> </A>A drawing engine may define a method to draw a texture-mapped triangle mesh. This method is optional and must be supported only by drawing engines that support texture mapping.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69014"> </A>typedef void (*TQADrawTriMeshTexture) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *drawContext,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long nTriangles,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQAIndexedTriangle *triangles);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69016"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57282"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69025"> </A><TT CLASS="cv">nTriangle</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57283"> </A>The number of indexed triangles pointed to by the <TT CLASS="cv">triangles</TT> parameter.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69034"> </A><TT CLASS="cv">triangles</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57286"> </A>A pointer to an array of indexed triangles. See <A HREF="qd3dravedriver.3e.htm#38704" CLASS="XRef">&quot;Indexed Triangle Structure&quot;</A> for a description of indexed triangles.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=57288"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=57483"> </A>Your <TT CLASS="cv">TQADrawTriMeshTexture</TT> function should draw the texture-mapped triangle mesh specified by the <TT CLASS="cv">triangles</TT> parameter into the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter. Each triangle in the mesh is defined by a <TT CLASS="cv">TQAIndexedTriangle</TT> data structure, which contains three indices into the array of texture vertices previously submitted to the draw context by a call to the <TT CLASS="cv">QASubmitVerticesTexture</TT> function.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=57484"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=57485"> </A>The <TT CLASS="cv">TQADrawTriMeshTexture</TT> method is optional. If your drawing engine does not support triangle meshes, QuickDraw&nbsp;3D RAVE decomposes a triangle mesh into individual triangles when the user calls the <TT CLASS="cv">QASubmitVerticesTexture</TT> function to submit a triangle mesh.<A NAME="marker=58014"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=41575"> </A>TQADrawVGouraud</H2><P CLASS="T1.Text1"><A NAME="pgfId=42115"> </A><A NAME="marker=51612"> </A>A drawing engine may define a method to draw Gouraud-shaded objects defined by vertices. This method is optional and must be supported only by drawing engines that do not want calls to <TT CLASS="cv">QADrawVGouraud</TT> to be replaced by calls to the <TT CLASS="cv">QADrawPoint</TT>, <TT CLASS="cv">QADrawLine</TT>, or <TT CLASS="cv">QADrawTriGouraud</TT> methods.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69045"> </A>typedef void (*TQADrawVGouraud) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *drawContext, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long nVertices, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQAVertexMode vertexMode, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQAVGouraud vertices[], <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const unsigned long flags[]);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69047"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41740"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69056"> </A><TT CLASS="cv">nVertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41744"> </A>The number of vertices contained in the <TT CLASS="cv">vertices</TT> array.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69065"> </A><TT CLASS="cv">vertexMode</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41748"> </A>A vertex mode. See <A HREF="qd3dravedriver.27.htm#27703" CLASS="XRef">&quot;Vertex Modes&quot;</A> for a description of the available vertex modes.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69074"> </A><TT CLASS="cv">vertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41752"> </A>An array of Gouraud vertices.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69083"> </A><TT CLASS="cv">flags</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41756"> </A>An array of triangle flags, or the value <TT CLASS="cv">NULL</TT>. See <A HREF="qd3dravedriver.2c.htm#40215" CLASS="XRef">&quot;Triangle Flags Masks&quot;</A> for a description of the available triangle flags. This parameter is valid only if the <TT CLASS="cv">vertexMode</TT> parameter contains the value <TT CLASS="cv">kQAVertexMode_Tri</TT>, <TT CLASS="cv">kQAVertexMode_Strip</TT>, or <TT CLASS="cv">kQAVertexMode_Fan</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=41580"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=41581"> </A>Your <TT CLASS="cv">TQADrawVGouraud</TT> function should draw the vertices in the array specified by the <TT CLASS="cv">vertices</TT> parameter into the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter, according to the vertex modes flag specified by the <TT CLASS="cv">vertexMode</TT> parameter. For instance, if the value of the <TT CLASS="cv">vertexMode</TT> parameter is <TT CLASS="cv">kQAVertexMode_Polyline</TT>, then the vertices in that array are interpreted as defining a polyline (a set of connected line segments). Gouraud shading should be applied to whatever objects are drawn.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=42086"> </A>TQADrawVTexture</H2><P CLASS="T1.Text1"><A NAME="pgfId=42087"> </A><A NAME="marker=51607"> </A>A drawing engine may define a method to draw texture-mapped objects defined by vertices. This method is optional and must be supported only by drawing engines that support texture mapping and do not want calls to <TT CLASS="cv">QADrawVTexture</TT> to be replaced by calls to the <TT CLASS="cv">QADrawPoint</TT>, <TT CLASS="cv">QADrawLine</TT>, or <TT CLASS="cv">QADrawTriTexture</TT> methods.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69094"> </A>typedef void (*TQADrawVTexture) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *drawContext, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long nVertices, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQAVertexMode vertexMode, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQAVTexture vertices[], <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const unsigned long flags[]);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69096"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41960"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69105"> </A><TT CLASS="cv">nVertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=42540"> </A>The number of vertices contained in the <TT CLASS="cv">vertices</TT> array.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69114"> </A><TT CLASS="cv">vertexMode</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=42544"> </A>A vertex mode. See <A HREF="qd3dravedriver.27.htm#27703" CLASS="XRef">&quot;Vertex Modes&quot;</A> for a description of the available vertex modes.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69123"> </A><TT CLASS="cv">vertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=42545"> </A>An array of texture vertices.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69132"> </A><TT CLASS="cv">flags</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=42548"> </A>An array of triangle flags, or the value <TT CLASS="cv">NULL</TT>. See <A HREF="qd3dravedriver.2c.htm#40215" CLASS="XRef">&quot;Triangle Flags Masks&quot;</A> for a description of the available triangle flags. This parameter is valid only if the <TT CLASS="cv">vertexMode</TT> parameter contains the value <TT CLASS="cv">kQAVertexMode_Tri</TT>, <TT CLASS="cv">kQAVertexMode_Strip</TT>, or <TT CLASS="cv">kQAVertexMode_Fan</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=41587"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=42558"> </A>Your <TT CLASS="cv">TQADrawVTexture</TT> function should draw the vertices in the array specified by the <TT CLASS="cv">vertices</TT> parameter into the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter, according to the vertex modes flag specified by the <TT CLASS="cv">vertexMode</TT> parameter. For instance, if the value of the <TT CLASS="cv">vertexMode</TT> parameter is <TT CLASS="cv">kQAVertexMode_Polyline</TT>, then the vertices in that array are interpreted as defining a polyline (a set of connected line segments). Texture mapping (using the texture determined by the value of the <TT CLASS="cv">kQATag_Texture</TT> state variable) should be applied to whatever objects are drawn.</P><P CLASS="I.Important"><A NAME="pgfId=42570"> </A>The vertex modes <TT CLASS="cv">kQAVertexMode_Point</TT> and <TT CLASS="cv">kQAVertexMode_Line</TT> are supported only by drawing engines that support the <TT CLASS="cv">kQAOptional_OpenGL</TT> feature. All other drawing engines should ignore requests to texture map points or lines. </P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=41589"> </A>TQADrawBitmap</H2><P CLASS="T1.Text1"><A NAME="pgfId=41590"> </A><A NAME="marker=51602"> </A>A drawing engine must define a method to draw bitmaps into a draw context.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69143"> </A>typedef void (*TQADrawBitmap) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *drawContext, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQAVGouraud *v, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQABitmap *bitmap);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69145"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41708"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69154"> </A><TT CLASS="cv">v</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41712"> </A>A Gouraud vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69163"> </A><TT CLASS="cv">bitmap</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41716"> </A>A pointer to a bitmap (returned by a previous call to <TT CLASS="cv">QABitmapNew</TT>).</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=41597"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=42686"> </A>Your <TT CLASS="cv">TQADrawBitmap</TT> function should draw the bitmap specified by the <TT CLASS="cv">bitmap</TT> parameter into the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter, with the upper-left corner of the bitmap located at the point specified by the <TT CLASS="cv">v</TT> parameter. The <TT CLASS="cv">v</TT> parameter can contain negative values in its <TT CLASS="cv">x</TT> or <TT CLASS="cv">y</TT> fields, so you can position upper-left corner of the bitmap outside the draw context rectangle. This allows you to move the bitmap smoothly off any edge of the draw context.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=41599"> </A>TQARenderStart</H2><P CLASS="T1.Text1"><A NAME="pgfId=41600"> </A><A NAME="marker=51597"> </A>A drawing engine must define a method to initialize a draw context before the engine performs any rendering into that context.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69174"> </A>typedef void (*TQARenderStart) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *drawContext, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQARect *dirtyRect, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *initialContext);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69176"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41696"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69185"> </A><TT CLASS="cv">dirtyRect</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41700"> </A>The minimum area of the specified draw context to clear, or the value <TT CLASS="cv">NULL</TT>.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69194"> </A><TT CLASS="cv">initialContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41704"> </A> A previously cached draw context, or the value <TT CLASS="cv">NULL</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=41604"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=42789"> </A>Your <TT CLASS="cv">TQARenderStart</TT> function should perform any operations necessary to initialize the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter. This includes clearing the z buffer and the color buffers of the draw context. If the value of the <TT CLASS="cv">initialContext</TT> parameter is <TT CLASS="cv">NULL</TT>, then your <TT CLASS="cv">TQARenderStart</TT> function should clear the z buffer to 1.0 and set the color buffers to the values of the <TT CLASS="cv">kQATag_ColorBG_a</TT>, <TT CLASS="cv">kQATag_ColorBG_r</TT>, <TT CLASS="cv">kQATag_ColorBG_g</TT>, and <TT CLASS="cv">kQATag_ColorBG_b</TT> draw context state variables. If, however, the value of the <TT CLASS="cv">initialContext</TT> parameter is not <TT CLASS="cv">NULL</TT>, then your <TT CLASS="cv">TQARenderStart</TT> function should use the previously cached draw context specified by that parameter to initialize the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter.</P><P CLASS="T1.Text1"><A NAME="pgfId=42790"> </A>The <TT CLASS="cv">dirtyRect</TT> parameter indicates the minimum area of the specified draw context that should be cleared on initialization. If the value of the <TT CLASS="cv">dirtyRect</TT> parameter is <TT CLASS="cv">NULL</TT>, the entire draw context is cleared. If the value of the <TT CLASS="cv">dirtyRect</TT> parameter is not <TT CLASS="cv">NULL</TT>, it indicates the rectangle in the draw context to clear. Some drawing engines may exhibit improved performance when an area that is smaller than the entire draw context rectangle is passed. However, the interpretation of the <TT CLASS="cv">dirtyRect</TT> parameter is dependent on the drawing engine, which may choose to initialize the entire draw context. As a result, code calling your <TT CLASS="cv">QARenderStart</TT> function should not use this parameter as a means to avoid clearing all of a draw context or to perform incremental rendering. Instead, that code should use the <TT CLASS="cv">initialContext</TT> parameter to achieve such effects.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=42870"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=42856"> </A>Applications should call <TT CLASS="cv">QARenderStart</TT> before performing any rendering operations in the specified draw context, and they should call either <TT CLASS="cv">QARenderEnd</TT> to signal the end of rendering operations or <TT CLASS="cv">QARenderAbort</TT> to cancel rendering operations. However, when a drawing engine is performing OpenGL rendering, the <TT CLASS="cv">QARenderStart</TT> function operates just like the OpenGL function <TT CLASS="cv">glClear</TT>. In OpenGL mode, it is not necessary that a call to <TT CLASS="cv">QARenderStart</TT> always be balanced by a matching call to <TT CLASS="cv">QARenderEnd</TT>, and drawing commands may occur at any time.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=42745"> </A>TQARenderEnd</H2><P CLASS="T1.Text1"><A NAME="pgfId=41607"> </A><A NAME="marker=51592"> </A>A drawing engine must define a method to signal the end of any rendering into a draw context.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69206"> </A>typedef TQAError (*TQARenderEnd) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *drawContext, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQARect *modifiedRect);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69208"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41679"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69217"> </A><TT CLASS="cv">modifiedRect</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41683"> </A>The minimum area of the back buffer of the specified draw context to display, or the value <TT CLASS="cv">NULL</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=42931"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=42932"> </A>Your <TT CLASS="cv">TQARenderEnd</TT> function should perform any operations necessary to display an image rendered into the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter. If the draw context is double buffered, your function should display the back buffer. If the draw context is single buffered, your function should call <TT CLASS="cv">QAFlush</TT>. In either case, your drawing engine should unlock any frame buffers or other memory that is locked, remove any cursor shields, and so forth.</P><P CLASS="T1.Text1"><A NAME="pgfId=42974"> </A>The <TT CLASS="cv">modifiedRect</TT> parameter indicates the minimum area of the back buffer of the specified draw context that should be displayed. If the value of the <TT CLASS="cv">modifiedRect</TT> parameter is <TT CLASS="cv">NULL</TT>, the entire back buffer is displayed. If the value of the <TT CLASS="cv">modifiedRect</TT> parameter is not <TT CLASS="cv">NULL</TT>, it indicates the rectangle in the back buffer to display. Some drawing engines may exhibit improved performance when an area that is smaller than the entire draw context rectangle is passed (to avoid unnecessary pixel copying). However, the interpretation of the <TT CLASS="cv">modifiedRect</TT> parameter is dependent on the drawing engine, which may choose to draw the entire back buffer.</P><P CLASS="T1.Text1"><A NAME="pgfId=43026"> </A>Your <TT CLASS="cv">TQARenderEnd</TT> function should return a result code (of type <TT CLASS="cv">TQAError</TT>) indicating whether any errors have occurred since the previous call to your <TT CLASS="cv">TQARenderStart</TT> function. If all rendering commands completed successfully, you should return the value <TT CLASS="cv">kQANoErr</TT>. If you return any other value, the code that called <TT CLASS="cv">QARenderEnd</TT> should assume that the rendered image is incorrect.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=43042"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=43043"> </A>Applications should call <TT CLASS="cv">QARenderStart</TT> before performing any rendering operations in the specified draw context, and they should call either <TT CLASS="cv">QARenderEnd</TT> to signal the end of rendering operations or <TT CLASS="cv">QARenderAbort</TT> to cancel rendering operations. Once an application has called <TT CLASS="cv">QARenderEnd</TT>, it should not submit any drawing requests until it has called <TT CLASS="cv">QARenderStart</TT> again.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=42933"> </A>TQARenderAbort</H2><P CLASS="T1.Text1"><A NAME="pgfId=43068"> </A><A NAME="marker=51587"> </A>A drawing engine must define a method to cancel any asynchronous drawing requests for a draw context.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69228"> </A>typedef TQAError (*TQARenderAbort) ( <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *drawContext);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69230"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41671"> </A>A draw context.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=41621"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=41622"> </A>Your <TT CLASS="cv">TQARenderAbort</TT> function should immediately stop processing any asynchronous drawing command it is currently processing and it should discard any queued commands associated with the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter.</P><P CLASS="T1.Text1"><A NAME="pgfId=43090"> </A>Your <TT CLASS="cv">TQARenderAbort</TT> function should return a result code (of type <TT CLASS="cv">TQAError</TT>) indicating whether any errors have occurred since the previous call to your <TT CLASS="cv">TQARenderStart</TT> function. If all rendering commands completed successfully, you should return the value <TT CLASS="cv">kQANoErr</TT>. If you return any other value, the code that called <TT CLASS="cv">QARenderEnd</TT> should assume that the rendered image is incorrect.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=41623"> </A><A NAME="20404"> </A>TQAFlush</H2><P CLASS="T1.Text1"><A NAME="pgfId=41624"> </A><A NAME="marker=51582"> </A>A drawing engine must define a method to flush a draw context.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69241"> </A>typedef TQAError (*TQAFlush) (const TQADrawContext *drawContext);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69243"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41663"> </A>A draw context.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=41628"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=43183"> </A>Your <TT CLASS="cv">TQAFlush</TT> function should cause your drawing engine to begin rendering all drawing commands that are queued in a buffer awaiting processing for the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter. QuickDraw&nbsp;3D RAVE allows a drawing engine to buffer as many drawing commands as desired. Accordingly, the successful completion of a drawing command (such as <TT CLASS="cv">QADrawPoint</TT>) does not guarantee that the specified object is visible on the screen. An application can call <TT CLASS="cv">QAFlush</TT> to have your drawing engine start processing queued commands. Note, however, that <TT CLASS="cv">QAFlush</TT> is not a blocking call--that is, the successful completion of <TT CLASS="cv">QAFlush</TT> does not guarantee that all buffered commands have been processed. Calling <TT CLASS="cv">QAFlush</TT> guarantees only that all queued commands will eventually be processed.</P><P CLASS="T1.Text1"><A NAME="pgfId=43187"> </A>Typically, applications should occasionally call <TT CLASS="cv">QAFlush</TT> to update the screen image during a lengthy set of rendering operations in a single-buffered draw context. <TT CLASS="cv">QAFlush</TT> has no visible effect when called on a double-buffered draw context, but it does initiate rendering to the back buffer.</P><P CLASS="T1.Text1"><A NAME="pgfId=43220"> </A>Your <TT CLASS="cv">TQAFlush</TT> function should return a result code (of type <TT CLASS="cv">TQAError</TT>) indicating whether any errors have occurred since the previous call to your <TT CLASS="cv">TQARenderStart</TT> function. If all rendering commands completed successfully, you should return the value <TT CLASS="cv">kQANoErr</TT>. If you return any other value, the code that called <TT CLASS="cv">QAFlush</TT> should assume that the rendered image is incorrect.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=41649"> </A>TQASync</H2><P CLASS="T1.Text1"><A NAME="pgfId=43259"> </A><A NAME="marker=51577"> </A>A drawing engine must define a method to synchronize a draw context.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69254"> </A>typedef TQAError (*TQASync) (const TQADrawContext *drawContext);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69256"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=41644"> </A>A draw context.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=41636"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=43266"> </A>Your <TT CLASS="cv">TQASync</TT> function should operate just like your <TT CLASS="cv">TQAFlush</TT> function, except that it should wait until all queued drawing commands have been processed before returning. See the description of <TT CLASS="cv">TQAFlush</TT> <A HREF="qd3dravedriver.47.htm#20404" CLASS="XRef">[link]</A> for complete details.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=57628"> </A>TQAGetNoticeMethod</H2><P CLASS="T1.Text1"><A NAME="pgfId=57630"> </A><A NAME="marker=57772"> </A><A NAME="marker=57629"> </A>A drawing engine must define a method to return the notice method of a draw context.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69267"> </A>typedef TQAError (*TQAGetNoticeMethod) ( <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *drawContext, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQAMethodSelector method, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQANoticeMethod *completionCallBack, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void **refCon);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69269"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57632"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69278"> </A><TT CLASS="cv">method</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57636"> </A>A method selector. See <A HREF="qd3dravedriver.32.htm#30293" CLASS="XRef">&quot;Notice Method Selectors&quot;</A> for a description of the available method selectors.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69287"> </A><TT CLASS="cv">completionCallBack</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57637"> </A> On exit, a pointer to the current draw context notice method of the specified type.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69297"> </A><TT CLASS="cv">refCon</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57638"> </A>On exit, the reference constant of the specified notice method.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=57639"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=57690"> </A>Your <TT CLASS="cv">TQAGetNoticeMethod</TT> function should return, in the <TT CLASS="cv">completionCallBack</TT> parameter, a pointer to the current notice method of the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter that has the type specified by the <TT CLASS="cv">method</TT> parameter. <TT CLASS="cv">TQAGetNoticeMethod</TT> should also return, in the <TT CLASS="cv">refCon</TT> parameter, the reference constant associated with that notice method.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=57693"> </A>TQASetNoticeMethod</H2><P CLASS="T1.Text1"><A NAME="pgfId=57700"> </A><A NAME="marker=57699"> </A>A drawing engine must define a method to set the notice method of a draw context.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69308"> </A>typedef TQAError (*TQASetNoticeMethod) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADrawContext *drawContext, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQAMethodSelector method, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQANoticeMethod completionCallBack, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void *refCon);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69310"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57647"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69319"> </A><TT CLASS="cv">method</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57651"> </A>A method selector. See <A HREF="qd3dravedriver.32.htm#30293" CLASS="XRef">&quot;Notice Method Selectors&quot;</A> for a description of the available method selectors.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69328"> </A><TT CLASS="cv">completionCallBack</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57652"> </A> A pointer to the desired draw context notice method of the specified type. See <A HREF="qd3dravedriver.4c.htm#19385" CLASS="XRef">&quot;Notice Methods&quot;</A> for information about notice methods.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69338"> </A><TT CLASS="cv">refCon</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=57656"> </A>A reference constant for the specified notice method. This value is passed unchanged to the notice method when it is called.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=60386"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=60387"> </A>Your <TT CLASS="cv">TQASetNoticeMethod</TT> function should set the notice method of type <TT CLASS="cv">method</TT> of the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter to the function pointed to by the <TT CLASS="cv">completionCallBack</TT> parameter. <TT CLASS="cv">TQASetNoticeMethod</TT> should also set the reference constant of that method to the value specified by the <TT CLASS="cv">refCon</TT> parameter.<A NAME="marker=60388"> </A><A NAME="marker=60389"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>