/**	@name  PSOutputFilters.h*/	/**		@name Introduction		This file contains types, defines, and prototypes used for creating output filters for LaserWriter 8.	*//*	File:		PSOutputFilters.h	Contains:	This file contains types, defines, and prototypes used for creating output filters 				for LaserWriter 8.  	Version:	Technology:	PrintingLib 8.7 				Release:	1.0 	Copyright:	© 1999 by Apple Computer Inc. All Rights Reserved. 	Bugs?:		For bug reports, consult the following page on 				the World Wide Web:  					http://developer.apple.com/bugreporter/*/#ifndef __PSOUTPUTFILTERS__#define __PSOUTPUTFILTERS__#if !defined(rez) && !defined(derez)#if PRAGMA_ONCE#pragma once#endif#ifndef __PSSECTIONINFO__#include "PSSectionInfo.h"#endif#endif#ifdef __cplusplusextern "C" {#endif#if !defined(rez) && !defined(derez)#if PRAGMA_IMPORT#pragma import on#endif#if PRAGMA_STRUCT_ALIGN	#pragma options align=mac68k#elif PRAGMA_STRUCT_PACKPUSH	#pragma pack(push, 2)#elif PRAGMA_STRUCT_PACK	#pragma pack(2)#endif#endif/*	PostScript Output Filter plug-ins have the following subtype.*/#define kPSOutputFilterSubtype	'POut'#define kPluginInfoType 'CCIª'#define kPluginInfoID 	128/// the type of the PostScript output filter's UI description resource#define	kPanelDescriptionType	'desC'#define kHintPanelDriverVersTag	'drvV'#define kHintPanelDriverVersId	1#define kHintPanelDriverVersVar	unsigned long#define kHintPanelPCFileNameTag	'ppdN'#define kHintPanelPCFileNameId	1#define kHintPanelPCFileNameVar	Str255#if !defined(rez) && !defined(derez)#ifndef __DIALOGS__#include <Dialogs.h>#endif#ifndef __EVENTS__#include <Events.h>#endif#ifndef __MACTYPES__#include <Types.h>#endif/****** Typedefs ******//*	A PSOutputFilterRef is an opaque pointer to the representation of	A PostScript output filter. 		*/typedef struct PSOutputFilter *PSOutputFilterRef;/*	A LWRef is an opaque reference to the currently executing LaserWriter driver,	passed to a PostScript output filter's UI routines executing in the Print Dialog.*/typedef long LWRef;	typedef short PanelRef;/****** ProtoTypes ******//**	The plug-in may implement the pre-flight entry point. This entry point allows *	the plug-in to check the current printer's preferences collection as well as *	the current job's collection in order to decide if it wants to become part *	of the filter chain. A plug-in that has a pre-flight must return noErr in order *	to be added to the chain. */OSStatus psOutputFilterPreFlight(PSOutputFilterRef filter, Collection jobInfo, Handle papaH, void **refconP);				/**	The plug-in may implement a post-flight entry point in order to dispose of *	any memory it may have allocated during its life. */OSStatus psOutputFilterPostFlight(PSOutputFilterRef filter, void *refcon);													/**	The plug-in must implement a write entry point. */OSStatus psOutputFilterWrite(PSOutputFilterRef filter, void *refcon, const void *data, long nBytes, const struct PSPosition *pos);/// routines implemented by a filter to allow it to show up in the LaserWriter 8 Print Dialog UIOSStatus psPanelPlugInLibInitData(LWRef lwRef, void **libDataH, short resFRef, unsigned long *libSignatureP);	/*		This routine is called once after your library has been loaded for use in the print dialog. The library can store 	library private data by returning that data in *libDataH. The data returned in *libDataH will be passed to the psPanelRegister,	psPanelPlugInLibKeepRunning, and psPanelPlugInLibCloseData procedures.	lwRef is a reference to the LW driver that is currently executing your plug-in. This reference can be passed to several	routines exported by LW8UILib to obtain data that might be relevant to your plug-in such as the current print record,	the current PPD context, the job collection representing the current print job, and the prefs collection for the current	printer.	resFRef is the library's open resFork.										This routine should store a unique signature in *libSignatureP. This signature must be unique to the plug-in	to distinguish it from other plug-ins. It is used to store the plugInHints collection into the job collection. 		*/void psPanelPlugInLibCloseData(LWRef lwRef, void *libDataP, Collection jobInfo, Boolean *doItP);	/*		psPanelPlugInLibCloseData is called immediately before the plug-ins is unloaded by the print dialog. 		lwRef is a reference to the LW driver that is currently executing your plug-in.		The data passed in libDataP is the same data returned by the plug-in in the *libDataH parameter returned	by psPanelPlugInLibInitData. Any private plug-in allocated data should be disposed of as appropriate.		jobInfo is the fully formed job collection representing the settings made in the Job Dialog.		*doItP is false if the user has clicked "Cancel" or the filter is going away because the user has	changed printers. *doItP is true if the user has clicked "Print" in the dialog. A plug-in can	change the value in *doItP to false in order to cause the dialog to be cancelled instead.*/OSStatus psPanelSetCriteria(LWRef lwRef, Collection col, short resFRef);	/*		A Panel Plug In Library can fill the 'col' Collection with items specifying necessary criteria 	for running, e.g., the current PPD file must be "ADISTILL.PPD". This routine is called	before any other routine except for any CFM shared library Init routine your plug-in has in order	to store criteria for determining whether your plug-in will get a chance to generate a UI when the print	dialog comes up.			lwRef is a reference to the LW driver that is currently executing your plug-in.	The library's resFork is also passed.	*/OSStatus psPanelPlugInLibKeepRunning(LWRef lwRef, Collection col, Boolean *keepRunningP, void *libDataP);	/*		If the user changes printers while your plug-in is loaded and running and the defaults	for the new printer indicate your plug-in is enabled, then your plug-in's 	psPanelPlugInLibKeepRunning procedure is called to determine whether your plug-in wishes to 	keep running with the new printer. This allows a plug-in to look at the operating environment and decide 	whether to run in that environment.	lwRef is a reference to the LW driver that is currently executing your plug-in.		The Collection 'col' passed in contains items specifying the current operating environment, 	e.g., the current PPD is "AGAccSt1.PPD", the panel plug in library can decide whether or not to continue 	running. 		If *keepRunningP is set to false, the close procs will be called for all registered panels and the plug-in will	be closed.		libDataP points to the library private data returned by the plug-in's psPanelPlugInLibInitData routine.*/OSStatus psPanelRegister(LWRef lwRef, PanelRef panelRef, Collection col, Boolean *addPanelP, const Rect *panelRectP,							short *ditlIDP, Handle *ditlHP, void **dataH, void *libDataP);	/*		In order for a single library to specify multiple panels, this function gets called repeatedly,	as long as *addPanelP returns 'true'. This routine allows a plug-in to specify the data	needed for each panel.	lwRef is a reference to the LW driver that is currently executing your plug-in.		For each call, this routine is passed a unique panelRef each time. This allows a plug-in with multiple	panels to distinguish which panel is being referenced by a given routine call, such as psPanelAddMenu. 		The Collection 'col' contains items specifying the current operating environment, e.g., the	current PPD is "AGAccSt1.PPD".		This routine should return true in *addPanelP to indicate that it wants to add a panel and 	returns false to indicate that it is done adding panels.		*panelRectP is a rectangle that contains the bounds of the area that your panel has available	for any dialog items that you may be adding dynamically.		For each time adds a panel, it must return a 'DITL' id into '*ditlIDP' OR a 'DITL' 	returned in a handle in '*ditlHP'.		The routine can allocate and return private data for each panel by returning that private data	in '*dataH'.		libDataP corresponds to the plug-in private data returned in '*libDataH' by psPanelPlugInLibInitData.	*/OSStatus psPanelAddMenu(LWRef lwRef, PanelRef panelRef, void *dataP, StringPtr panelName, unsigned long bufSize, Boolean *addItP);	/*		This routine is called for each panel that a plug-in adds. It is called when the panel menu gets built	the first time and each time printer is changed and the plug-in continues to run.	lwRef is a reference to the LW driver that is currently executing your plug-in.		panelRef is the panel reference value for the panel which this call corresponds.		dataP is the panel's private data, as returned by psPanelRegister for this panelRef.		'panelName' is the text for the panel menu item.		'bufSize' is the length of the panelName buffer		*addItP indicates whether to add a menu for this panel. Returning true causes a menu item to be	added. Returning 'false' in *addItP will remove a previously added menu associated with this panelRef.	Returning false may make sense if the user chooses a new printer, your plug-in continues to run but	a particular panel should not appear for the new printer.*/OSStatus psPanelInitData(LWRef lwRef, PanelRef panelRef, void *dataP, Collection plugInHints);	/*	This the first client proc that gets called for each panel that is registered by psPanelRegister.	It gets called only once for each panel each time your plug-in is loaded by the Print Dialog.		lwRef is a reference to the LW driver that is currently executing your plug-in.	'panelRef' is the PanelRef for the panel.		'dataP' is the panel specific data returned by psPanelRegister in its '*dataH' variable.		plugInHints is a plug-in's private Collection representing the current job. This collection	potentially contains any job specific hints that the plug-in has saved for the last time	this print job was generated or may be empty indicating that the current job has no 	saved initial job configuration.*/OSStatus psPanelCloseData(LWRef lwRef, PanelRef panelRef, void *dataP, Boolean doIt); /*	psPanelCloseData gets called only once for each panel as the plug-in is unloaded.		lwRef is a reference to the LW driver that is currently executing your plug-in.	'panelRef' is the PanelRef for the panel.		'dataP' is the panel specific data returned by psPanelRegister in its '*dataH' variable		doIt is true if the user is dismissing the dialog with 'OK' and false if the user cancels		the print dialog.*/OSStatus psPanelPrSpecificInitData(LWRef lwRef, PanelRef panelRef, void *dataP, Collection plugInPrInfo);	/*		This gets called for each panel. It gets called once initially for	each panel and then	again for each panel each time a new printer is selected.	lwRef is a reference to the LW driver that is currently executing your plug-in.	'panelRef' is the PanelRef for the panel.	'dataP' is the panel specific data returned by psPanelRegister in its '*dataH' variable	plugInPrInfo is a Collection containing hints that have been previously saved for this printer 	by this plugIn. This collection represents the settings previously saved by a plug-in when the user chose	"Save Settings". It should be used to initialize the panel settings for the current printer if there	are no saved job defaults in the plugInHints collection passed to psPanelInitData.		*/OSStatus psPanelPrSpecificCloseData(LWRef lwRef, PanelRef panelRef, void *dataP, Boolean doIt); /*		This gets called for each panel each time a printer is deselected (i.e. a new printer is selected), 	or the dialog is dismissed.		lwRef is a reference to the LW driver that is currently executing your plug-in.	'panelRef' is the PanelRef for the panel.		'dataP' is the panel specific data returned by psPanelRegister in its '*dataH' variable		doIt is true if the user is dismissing the dialog with 'OK' and false if the user cancels		the print dialog or switches to another printer.	*/OSStatus psPanelInit(LWRef lwRef, PanelRef panelRef, void *dataP, DialogPtr dp, short offset);	/*		This gets called each time this panel's 'DITL' has been appended and the panel becomes visible.	lwRef is a reference to the LW driver that is currently executing your plug-in.	'panelRef' is the PanelRef for the panel.		'dataP' is the panel specific data returned by psPanelRegister in its '*dataH' variable	'dp' is the dialog pointer for the print dialog.		'offset' is the value which must be added to your dialog item numbers as stored in your DITL		in order to access those items in the print dialog. For example, if you have a textedit 		field as item number 1 in your DITL, when your panel appears visible, it will have the 		dialog item number (offset + 1).*/OSStatus psPanelClose(LWRef lwRef, PanelRef panelRef, void *dataP, DialogPtr dp, short offset);	/*		This gets called each time this panel's 'DITL' is about to be removed and the panel is no longer visible.	lwRef is a reference to the LW driver that is currently executing your plug-in.	'panelRef' is the PanelRef for the panel.		'dataP' is the panel specific data returned by psPanelRegister in its '*dataH' variable	'dp' is the dialog pointer for the print dialog		'offset' is the value which must be added to your dialog item numbers as stored in your DITL		in order to access those items in the print dialog. */OSStatus psPanelPrSpecificInit(LWRef lwRef, PanelRef panelRef, void *dataP, DialogPtr dp, short offset);	/*		This gets called each time this panel's 'DITL' has been appended, after psPanelInit, 	and each time a new printer is selected while the panel is visible.	lwRef is a reference to the LW driver that is currently executing your plug-in.	'panelRef' is the PanelRef for the panel.		'dataP' is the panel specific data returned by psPanelRegister in its '*dataH' variable	'dp' is the dialog pointer for the print dialog		'offset' is the value which must be added to your dialog item numbers as stored in your DITL		in order to access those items in the print dialog. */OSStatus psPanelPrSpecificClose(LWRef lwRef, PanelRef panelRef, void *dataP, DialogPtr dp, short offset);	/*		This gets called each time this panel's 'DITL' has been removed, before psPanelClose, and each 	time a printer is deselected while the panel is visible.	lwRef is a reference to the LW driver that is currently executing your plug-in.	'panelRef' is the PanelRef for the panel.		'dataP' is the panel specific data returned by psPanelRegister in its '*dataH' variable	'dp' is the dialog pointer for the print dialog		'offset' is the value which must be added to your dialog item numbers as stored in your DITL		in order to access those items in the print dialog. */OSStatus psPanelItem(LWRef lwRef, PanelRef panelRef, void *dataP, DialogPtr dp, short item, short offset, short ctlVal);	/*		This gets called each time ModalDialog reports an item hit in this panel.	lwRef is a reference to the LW driver that is currently executing your plug-in.	'panelRef' is the PanelRef for the panel.		'dataP' is the panel specific data returned by psPanelRegister in its '*dataH' variable	'dp' is the dialog pointer for the print dialog		'item' is the dialog item number of the item hit		'offset' is the value which must be added to your dialog item numbers as stored in your DITL		in order to access those items in the print dialog. 		'ctlVal' is current value of the control, if the item is a control.	*/OSStatus psPanelFilter(LWRef lwRef, PanelRef panelRef, void *dataP, DialogPtr dp, short offset, EventRecord *ep, 								short *itemHitP, Boolean *weHandledItP);	/*		psPanelFilter gets called from the ModalFilterUPP when this panel is visible.	lwRef is a reference to the LW driver that is currently executing your plug-in.	'panelRef' is the PanelRef for the panel.		'dataP' is the panel specific data returned by psPanelRegister in its '*dataH' variable	'dp' is the dialog pointer for the print dialog		'offset' is the value which must be added to your dialog item numbers as stored in your DITL		in order to access those items in the print dialog. 	'*ep' is the EventRecord		'itemHitP' is a pointer to the dialog item hit. Its meaning is the normal meaning for a filter function		passed to ModalDialog		If the event is filtered by this call to psPanelFilter, *weHandledItP should be set to true, otherwise it	should set to false.*/OSStatus psPanelCheckRange(LWRef lwRef, PanelRef panelRef, void *dataP, DialogPtr dp, short offset, Boolean *doitP);	/*		This gets called when this panel is visible, but is being changed to another panel or	if the panel is visible and the Print or Save button is pressed. It is also called when	the panel is visible and the user selects the "Save Settings" button to save defaults	for the current printer. Returning 'false' in *doitP will halt any of the above.	lwRef is a reference to the LW driver that is currently executing your plug-in.	'panelRef' is the PanelRef for the panel.		'dataP' is the panel specific data returned by psPanelRegister in its '*dataH' variable	'dp' is the dialog pointer for the print dialog		'offset' is the value which must be added to your dialog item numbers as stored in your DITL		in order to access those items in the print dialog. 		returning true in *doitP indicates that the range is OK, returning false indicates that	the range needs to be corrected before the panel is changed or the dialog is dismissed. */OSStatus psPanelSaveButton(LWRef lwRef, PanelRef panelRef, void *dataP, Collection plugInPrInfo);	/*		This gets called when the user hits the Save Settings button in the print dialog to save settings.	lwRef is a reference to the LW driver that is currently executing your plug-in.	'panelRef' is the PanelRef for the panel.		'dataP' is the panel specific data returned by psPanelRegister in its '*dataH' variable	plugInPrInfo is a collection in which the plug-in should store its current settings	*//* PSUtilsLib routines for use by filters */OSStatus psWriteNextFilter(PSOutputFilterRef filter, const void *data, long nBytes, const struct PSPosition *pos);/*	This function is used by an output filter in order to forward data down the chain. 	'filter' is the current filter's reference and is used to find the next filter in the chain. 	'data' points to 'nBytes' of PostScript to be forwarded down the chain. 'pos' describes the PostScript 	being sent. */OSStatus psFilterSetPSPosition(PSOutputFilterRef filter, PSPosition *posP,									PSSection section, PSSubsection subsection, void *info);		/*	psFilterSetPSPosition is used by an output filter to set a PSPosition structure in preparation	for writing a new piece of data corresponding to a new section, subsection, and info data. 		psFilterSetPSPosition sets the PSPosition pointed to by posP to the section, subsection, and	info data passed in, and sets the 'id' field to a unique value in	preparation for a write (or sequence of writes) corresponding to a new subsection/info	value. This routine is used by filters so that they can properly identify data that	they write as new and unique.*//*	 LW8UILib routines for use by filters */typedef struct TPrint **(*LWGetPrintRecProc)(LWRef lwRef);		struct TPrint **LWGetPrintRec(LWRef lwRef);/// Returns handle to the current print recordtypedef Boolean(*LWGetBackgroundProc)(LWRef lwRef);				Boolean LWGetBackground(LWRef lwRef);/// Returns whether or not the current user setting is to do background printingtypedef struct PPDContextViel *(*LWGetPPDContextProc)(LWRef lwRef);	struct PPDContextViel *LWGetPPDContext(LWRef lwRef);/// Returns the current ppd contexttypedef Collection(*LWGetJobCollectionProc)(LWRef lwRef);		Collection LWGetJobCollection(LWRef lwRef);/// Returns the job collectiontypedef Collection(*LWGetPrInfoCollectionProc)(LWRef lwRef);	Collection LWGetPrInfoCollection(LWRef lwRef);/// Returns the current printer's saved defaults collection	/*	psOpenFilterOutputStream initializes a PSStream structure so that it can be used to		do writes by a PS Output Filter. The filter type created is kSerialStream. This		is only useful if you wish to have a filter use the routine psOutFormat to write 		formatted output.				When doing the writes on such a stream, it is important that the routine psFilterSetPSPosition 		be used to set the appropriate PSPosition data on the stream. The routines		psOutFormatPosition, psOutFormatPositionInfo, and psOutBlockPositionInfo should NOT be used 		since they update/change the PSPosition data of a SerialStream in a way that is incompatible 		with filter writes.			*/	OSStatus psOpenFilterOutputStream(struct PSStream *stream, PSOutputFilterRef filter);	/*	psCloseFilterOutputStream closes a PSStream structure that has been initialized by 		psOpenFilterOutputStream.					*/	OSStatus psCloseFilterOutputStream(struct PSStream *stream);#if PRAGMA_STRUCT_ALIGN	#pragma options align=reset#elif PRAGMA_STRUCT_PACKPUSH	#pragma pack(pop)#elif PRAGMA_STRUCT_PACK	#pragma pack()#endif#ifdef PRAGMA_IMPORT_OFF#pragma import off#elif PRAGMA_IMPORT#pragma import reset#endif#endif	///rez#ifdef __cplusplus}#endif#endif	/// __PSOUTPUTFILTERS__