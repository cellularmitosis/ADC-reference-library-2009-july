  //
// <wo:WOString value="[superClassPrefix]"/><wo:WOString value="[entity.classNameWithoutPackage]"/>.java
//
// Created by eogenerator
// DO NOT EDIT.  Make changes to <wo:WOString value="[entity.classNameWithoutPackage]"/>.java instead.
// copyright <wo:WOString value="[copyrightYear]"/> <wo:WOString value="[copyrightBy]"/>

package <wo:WOString value="[entity.classPackageName]"/>.base;

import com.webobjects.foundation.*;
import com.webobjects.eocontrol.*;
import com.webobjects.eoaccess.*;
import java.math.BigDecimal;
import java.util.*;

@SuppressWarnings("all")
public abstract class <wo:WOString value="[superClassPrefix]"/><wo:WOString value="[entity.classNameWithoutPackage]"/> extends <wo:WOConditional condition="[entity.parentEntity]"><wo:WOString value="[entity.parentEntity.className]"/></wo:WOConditional><wo:WOConditional condition="[entity.parentEntity]" negate="true">com.webobjects.eocontrol.EOGenericRecord</wo:WOConditional> {
    private static org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(<wo:WOString value="[superClassPrefix]"/><wo:WOString value="[entity.classNameWithoutPackage]"/>.class);

<wo:WORepetition list="[entity.classProperties]" item="[property]">
	public static final String <wo:WOString value="[property.uppercaseUnderscoreName]"/>_KEY = "<wo:WOString value="[property.name]"/>";
	public static final String <wo:WOString value="[property.initialCapitalName]"/>Key = "<wo:WOString value="[property.name]"/>";</wo:WORepetition>

	<wo:WOConditional condition="[entity.isAbstractEntity]" negate="true">
	public static <wo:WOString value="[superClassPrefix]"/><wo:WOString value="[entity.classNameWithoutPackage]"/> new<wo:WOString value="[entity.classNameWithoutPackage]"/>Instance(com.webobjects.eocontrol.EOEditingContext context) {
		com.webobjects.eocontrol.EOClassDescription desc = com.webobjects.eocontrol.EOClassDescription.classDescriptionForEntityName("<wo:WOString value="[entity.name]"/>");
		com.webobjects.eocontrol.EOEnterpriseObject object = desc.createInstanceWithEditingContext(context, null);
		context.insertObject(object);
		return (<wo:WOString value="[superClassPrefix]"/><wo:WOString value="[entity.classNameWithoutPackage]"/>)object;
	}</wo:WOConditional>

    public static String entity() {
        return "<wo:WOString value="[entity.name]"/>";
    }

    public <wo:WOString value="[superClassPrefix]"/><wo:WOString value="[entity.classNameWithoutPackage]"/>() {
        super();
    }

<wo:WORepetition list="[entity.classFetchSpecifications]" item="[fetchSpecification]">
    public static NSArray objectsFor<wo:WOString value="[fetchSpecification.initialCapitalName]"/>(com.webobjects.eocontrol.EOEditingContext context<wo:WORepetition list="[fetchSpecification.bindings]" item="[binding]">, <wo:WOString value="[binding.valueTypeClassName]"/> <wo:WOString value="[binding.name]"/>Binding</wo:WORepetition>) {
        com.webobjects.eocontrol.EOFetchSpecification spec = com.webobjects.eocontrol.EOFetchSpecification.fetchSpecificationNamed("<wo:WOString value="[fetchSpecification.name]"/>", "<wo:WOString value="[entity.name]"/>");
        <wo:WOConditional condition="[fetchSpecification.hasBindings]">
        com.webobjects.foundation.NSMutableDictionary bindings = new com.webobjects.foundation.NSMutableDictionary();<wo:WORepetition list="[fetchSpecification.bindings]" item="[binding]">
        bindings.setObjectForKey(<wo:WOString value="[binding.name]"/>Binding, "<wo:WOString value="[binding.name]"/>");</wo:WORepetition>
        spec = spec.fetchSpecificationWithQualifierBindings(bindings);
        </wo:WOConditional>
        return context.objectsWithFetchSpecification(spec);
    }
</wo:WORepetition>

<wo:WORepetition list="[entity.classAttributes]" item="[attribute]">
    public <wo:WOString value="[attribute.valueTypeClassName]"/> <wo:WOString value="[attribute.name]"/>() {
        return (<wo:WOString value="[attribute.valueTypeClassName]"/>)this.storedValueForKey("<wo:WOString value="[attribute.name]"/>");
    }

    public void set<wo:WOString value="[attribute.initialCapitalName]"/>(<wo:WOString value="[attribute.valueTypeClassName]"/> value) {
        this.takeStoredValueForKey(value, "<wo:WOString value="[attribute.name]"/>");
    }

    public void initialize<wo:WOString value="[attribute.initialCapitalName]"/>(<wo:WOString value="[attribute.valueTypeClassName]"/> value) {
        this.set<wo:WOString value="[attribute.initialCapitalName]"/>(value);
    }
</wo:WORepetition>

<wo:WORepetition list="[entity.classToOneRelationships]" item="[relationship]">
    public <wo:WOString value="[relationship.destinationEntity.className]"/> <wo:WOString value="[relationship.name]"/>() {
        return (<wo:WOString value="[relationship.destinationEntity.className]"/>)this.storedValueForKey("<wo:WOString value="[relationship.name]"/>");
    }

    public void set<wo:WOString value="[relationship.initialCapitalName]"/>(<wo:WOString value="[relationship.destinationEntity.className]"/> value) {
        this.takeStoredValueForKey(value, "<wo:WOString value="[relationship.name]"/>");
    }

    public <wo:WOString value="[relationship.destinationEntity.className]"/> <wo:WOString value="[relationship.name]"/>Relationship() {
        return (<wo:WOString value="[relationship.destinationEntity.className]"/>)this.storedValueForKey("<wo:WOString value="[relationship.name]"/>");
    }

    public void set<wo:WOString value="[relationship.initialCapitalName]"/>Relationship(<wo:WOString value="[relationship.destinationEntity.className]"/> value) {
        if (value == null) {
            <wo:WOString value="[relationship.destinationEntity.className]"/> object = this.<wo:WOString value="[relationship.name]"/>();
            if (object != null)
                this.removeObjectFromBothSidesOfRelationshipWithKey(object, "<wo:WOString value="[relationship.name]"/>");
        } else {
            this.addObjectToBothSidesOfRelationshipWithKey(value, "<wo:WOString value="[relationship.name]"/>");
        }
    }

    public void initialize<wo:WOString value="[relationship.initialCapitalName]"/>(<wo:WOString value="[relationship.destinationEntity.className]"/> value) {
        this.set<wo:WOString value="[relationship.initialCapitalName]"/>Relationship(value);
    }
</wo:WORepetition>

<wo:WORepetition list="[entity.classToManyRelationships]" item="[relationship]">
    public com.webobjects.foundation.NSArray&lt;<wo:WOString value="[relationship.destinationEntity.className]"/>&gt; <wo:WOString value="[relationship.name]"/>() {
    	com.webobjects.foundation.NSArray aList = (com.webobjects.foundation.NSArray)this.storedValueForKey("<wo:WOString value="[relationship.name]"/>");
    	if (aList != null ) {
    		return aList;
    	} else {
    		return com.webobjects.foundation.NSArray.emptyArray();
    	}
    }

    public void set<wo:WOString value="[relationship.initialCapitalName]"/>(NSArray&lt;<wo:WOString value="[relationship.destinationEntity.className]"/>&gt; value) {
        this.takeStoredValueForKey(value, "<wo:WOString value="[relationship.name]"/>");
    }

    public void addTo<wo:WOString value="[relationship.initialCapitalName]"/>(<wo:WOString value="[relationship.destinationEntity.className]"/> object) {
        this.includeObjectIntoPropertyWithKey(object, "<wo:WOString value="[relationship.name]"/>");
    }

    public void removeFrom<wo:WOString value="[relationship.initialCapitalName]"/>(<wo:WOString value="[relationship.destinationEntity.className]"/> object) {
        this.excludeObjectFromPropertyWithKey(object, "<wo:WOString value="[relationship.name]"/>");
    }

    public void addTo<wo:WOString value="[relationship.initialCapitalName]"/>(<wo:WOString value="[relationship.destinationEntity.className]"/> object) {
        if (logger.isDebugEnabled()) {
            if ((this.editingContext() != null) &amp;amp;&amp;amp; (object != null) &amp;amp;&amp;amp; (!this.isReadOnly()) &amp;amp;&amp;amp; (!object.isReadOnly()) &amp;amp;&amp;amp; (!this.editingContext().equals(object.editingContext()))) {
                try {
                    throw new Exception("WrongEdidtingContext");
                } catch(Exception exception) {
                    logger.warn("addTo<wo:WOString value="[relationship.initialCapitalName]"/> exception " , exception);
                }
            }
        }
        this.includeObjectIntoPropertyWithKey(object, "<wo:WOString value="[relationship.name]"/>");
    }

    public void removeFrom<wo:WOString value="[relationship.initialCapitalName]"/>Relationship(<wo:WOString value="[relationship.destinationEntity.className]"/> object) {
        this.removeObjectFromBothSidesOfRelationshipWithKey(object, "<wo:WOString value="[relationship.name]"/>");
    }

    public <wo:WOString value="[relationship.destinationEntity.className]"/> create<wo:WOString value="[relationship.initialCapitalName]"/>Relationship() {
        com.webobjects.eocontrol.EOClassDescription classDescription = com.webobjects.eocontrol.EOClassDescription.classDescriptionForEntityName("<wo:WOString value="[relationship.destinationEntity.name]"/>");
        com.webobjects.eocontrol.EOEnterpriseObject object = classDescription.createInstanceWithEditingContext(this.editingContext(), null);
        this.editingContext().insertObject(object);
        this.addObjectToBothSidesOfRelationshipWithKey(object, "<wo:WOString value="[relationship.name]"/>");
        return (<wo:WOString value="[relationship.destinationEntity.className]"/>)object;
    }

    public void delete<wo:WOString value="[relationship.initialCapitalName]"/>Relationship(<wo:WOString value="[relationship.destinationEntity.className]"/> object) {
		switch (<wo:WOString value="[relationship.deleteRule]"/>) {
			case com.webobjects.eoaccess.EORelationship.DeleteRuleNullify:
				this.removeObjectFromBothSidesOfRelationshipWithKey(object, "<wo:WOString value="[relationship.name]"/>");
				<wo:WOConditional condition="[relationship.ownsDestination]">this.editingContext().deleteObject(object);</wo:WOConditional>
				break;
			case com.webobjects.eoaccess.EORelationship.DeleteRuleCascade:
				this.removeObjectFromBothSidesOfRelationshipWithKey(object, "<wo:WOString value="[relationship.name]"/>");
				this.editingContext().deleteObject(object);
				break;
			case com.webobjects.eoaccess.EORelationship.DeleteRuleDeny:
				break;
			case com.webobjects.eoaccess.EORelationship.DeleteRuleNoAction:
				this.removeObjectFromBothSidesOfRelationshipWithKey(object, "<wo:WOString value="[relationship.name]"/>");
				<wo:WOConditional condition="[relationship.ownsDestination]">this.editingContext().deleteObject(object);</wo:WOConditional>
				break;
		}
    }

    public void deleteAll<wo:WOString value="[relationship.initialCapitalName]"/>Relationships() {
        for (<wo:WOString value="[relationship.destinationEntity.className]"/> <wo:WOString value="[relationship.name]"/>Instance : this.<wo:WOString value="[relationship.name]"/>().vector())
             this.delete<wo:WOString value="[relationship.initialCapitalName]"/>Relationship(<wo:WOString value="[relationship.name]"/>Instance);
    }

    public void initialize<wo:WOString value="[relationship.initialCapitalName]"/>(NSArray&lt;<wo:WOString value="[relationship.destinationEntity.className]"/>&gt; value) {
        this.set<wo:WOString value="[relationship.initialCapitalName]"/>(value);
    }

    public void initialize<wo:WOString value="[relationship.initialCapitalName]"/>(<wo:WOString value="[relationship.destinationEntity.className]"/> value) {
        this.addTo<wo:WOString value="[relationship.initialCapitalName]"/>Relationship(value);
    }
</wo:WORepetition>
}
