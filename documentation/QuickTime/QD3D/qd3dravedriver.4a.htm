<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Texture and Bitmap Methods</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=59551"> </A><A NAME="11971"> </A>Texture and Bitmap Methods</H1><P CLASS="T1.Text1"><A NAME="pgfId=59552"> </A>To write a drawing engine, you need to implement several private methods for managing bitmaps. If your engine supports texture mapping, you also need to implement several private methods for managing textures.</P><P CLASS="T1.Text1"><A NAME="pgfId=59553"> </A>Pointers to your drawing engine's texture and bitmap methods are returned to QuickDraw&nbsp;3D RAVE by your <TT CLASS="cv">TQAEngineGetMethod</TT> method. See page <A HREF="qd3dgeometry.34.htm#34505" CLASS="XRef">[link]</A> for details.</P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=49243"> </A>TQATextureNew</H2><P CLASS="T1.Text1"><A NAME="pgfId=49249"> </A><A NAME="marker=51707"> </A><A NAME="marker=51552"> </A>A drawing engine may define a method to create a new texture map. This method is optional and must be supported only by drawing engines that support texture mapping.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69501"> </A>typedef TQAError (*TQATextureNew) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long flags, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQAImagePixelType pixelType, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQAImage images[], <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQATexture **newTexture);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69503"> </A><TT CLASS="cv">flags</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=49090"> </A>A set of bit flags specifying features of the new texture map. See <A HREF="qd3dravedriver.2d.htm#21829" CLASS="XRef">&quot;Texture Flags Masks&quot;</A> for complete information.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69512"> </A><TT CLASS="cv">pixelType</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=49096"> </A>The type of pixels in the new texture map. See <A HREF="qd3dravedriver.16.htm#13225" CLASS="XRef">&quot;Pixel Types&quot;</A> for a description of the values you can pass in this parameter.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69521"> </A><TT CLASS="cv">images</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=49098"> </A>An array of pixel images to use for the new texture map. The values in the <TT CLASS="cv">width</TT> and <TT CLASS="cv">height</TT> fields of these structures must be an even power of 2.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69530"> </A><TT CLASS="cv">newTexture</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=49099"> </A>On entry, the address of a pointer variable. On exit, that variable points to a new texture map. If a new texture map cannot be created, <TT CLASS="cv">*newTexture</TT> is set to the value <TT CLASS="cv">NULL</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=49100"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=49475"> </A>Your <TT CLASS="cv">TQATextureNew</TT> function is called whenever an application calls <TT CLASS="cv">QATextureNew</TT>. Your function should perform any tasks required to use the texture in texture-mapping operations. This might involve loading the texture into memory on the device associated with your drawing engine. If so, your <TT CLASS="cv">TQATextureNew</TT> function should not return until the texture has been completely loaded.</P><P CLASS="T1.Text1"><A NAME="pgfId=49489"> </A>The <TT CLASS="cv">flags</TT> parameter specifies a set of texture map features. If the <TT CLASS="cv">kQATexture_Lock</TT> bit in that parameter is set but your drawing engine cannot guarantee that the texture will remain locked in memory, your <TT CLASS="cv">TQATextureNew</TT> function should return an error.</P><P CLASS="T1.Text1"><A NAME="pgfId=49103"> </A>If the <TT CLASS="cv">kQATexture_Mipmap</TT> bit of the <TT CLASS="cv">flags</TT> parameter is clear, the <TT CLASS="cv">images</TT> parameter points to a single pixel image that defines the texture map. If the <TT CLASS="cv">kQATexture_Mipmap</TT> bit is set, the <TT CLASS="cv">images</TT> parameter points to an array of pixel images of varying pixel depths. The first element in the array must be the mipmap page having the highest resolution, with a width and height that are even powers of 2. Each subsequent pixel image in the array should have a width and height that are half those of the previous image (with a minimum width and height of 1).<A NAME="marker=57746"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=49106"> </A>TQATextureDetach</H2><P CLASS="T1.Text1"><A NAME="pgfId=49107"> </A><A NAME="marker=51547"> </A>A drawing engine may define a method to detach a texture map. This method is optional and must be supported only by drawing engines that support texture mapping.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69541"> </A>typedef TQAError (*TQATextureDetach) (TQATexture *texture);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69543"> </A><TT CLASS="cv">texture</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=49110"> </A>A texture map.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=49111"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=49497"> </A>Your <TT CLASS="cv">TQATextureDetach</TT> function is called whenever an application calls <TT CLASS="cv">QATextureDetach</TT>. Your function should, if necessary, load the texture specified by the <TT CLASS="cv">texture</TT> parameter into memory on the device associated with your drawing engine (so that the caller can release the memory occupied by the texture). Your <TT CLASS="cv">TQATextureDetach</TT> function should not return until the texture has been completely loaded.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=59860"> </A>TQATextureBindColorTable</H2><P CLASS="T1.Text1"><A NAME="pgfId=59862"> </A><A NAME="marker=59861"> </A>A drawing engine may define a method to bind a color lookup table to a texture map.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69554"> </A>typedef TQAError (*TQATextureBindColorTable) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQATexture *texture, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQAColorTable *colorTable);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69556"> </A><TT CLASS="cv">texture</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=59865"> </A>A texture map.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69565"> </A><TT CLASS="cv">colorTable</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=59866"> </A>A color lookup table (as returned by a previous call to <TT CLASS="cv">QAColorTableNew</TT>).</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=59867"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=59868"> </A>Your <TT CLASS="cv">TQATextureBindColorTable</TT> function is called whenever an application calls <TT CLASS="cv">QATextureBindColorTable</TT>. Your function should bind the color lookup table specified by the <TT CLASS="cv">colorTable</TT> parameter to the texture map specified by the <TT CLASS="cv">texture</TT> parameter. Note that the type of the specified color lookup table must match that of the pixel type of the texture map to which it is bound. For example, a color lookup table of type <TT CLASS="cv">kQAColorTable_CL8_RGB32</TT> can be bound only to a texture map whose pixel type is <TT CLASS="cv">kQAPixel_CL8</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=49113"> </A>TQATextureDelete</H2><P CLASS="T1.Text1"><A NAME="pgfId=49114"> </A><A NAME="marker=51542"> </A>A drawing engine may define a method to delete a texture map. This method is optional and must be supported only by drawing engines that support texture mapping.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69576"> </A>typedef void (*TQATextureDelete) (TQATexture *texture);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69578"> </A><TT CLASS="cv">texture</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=49117"> </A>A texture map.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=49118"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=49547"> </A>Your <TT CLASS="cv">TQATextureDelete</TT> function is called whenever an application calls <TT CLASS="cv">QATextureDelete</TT>. Your function should delete the texture map specified by the <TT CLASS="cv">texture</TT> parameter.<A NAME="marker=51706"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=49120"> </A>TQABitmapNew</H2><P CLASS="T1.Text1"><A NAME="pgfId=49121"> </A><A NAME="marker=51705"> </A><A NAME="marker=51537"> </A>A drawing engine must define a method to create a new bitmap.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69589"> </A>typedef TQAError (*TQABitmapNew) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long flags, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQAImagePixelType pixelType, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQAImage *image, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQABitmap **newBitmap);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69591"> </A><TT CLASS="cv">flags</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=49124"> </A>A set of bit flags specifying features of the new bitmap. See <A HREF="qd3dravedriver.2e.htm#13462" CLASS="XRef">&quot;Bitmap Flags Masks&quot;</A> for complete information</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69600"> </A><TT CLASS="cv">pixelType</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=49130"> </A>The type of pixels in the new bitmap. See <A HREF="qd3dravedriver.16.htm#13225" CLASS="XRef">&quot;Pixel Types&quot;</A> for a description of the values you can pass in this parameter.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69609"> </A><TT CLASS="cv">image</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=49132"> </A>A pixel image to use for the new bitmap. The <TT CLASS="cv">width</TT> and <TT CLASS="cv">height</TT> fields of this image can have any values greater than 0.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69618"> </A><TT CLASS="cv">newBitmap</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=49133"> </A>On entry, the address of a pointer variable. On exit, that variable points to a new bitmap. If a new bitmap cannot be created, <TT CLASS="cv">*newBitmap</TT> is set to the value <TT CLASS="cv">NULL</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=49134"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=49555"> </A>Your <TT CLASS="cv">TQABitmapNew</TT> function is called whenever an application calls <TT CLASS="cv">QABitmapNew</TT>. Your function should perform any tasks required to draw the bitmap in the draw context associated with your drawing engine. This might involve loading the bitmap into memory on the device associated with your drawing engine. If so, your <TT CLASS="cv">TQABitmapNew</TT> function should not return until the bitmap has been completely loaded.</P><P CLASS="T1.Text1"><A NAME="pgfId=51526"> </A>The <TT CLASS="cv">flags</TT> parameter specifies a set of bitmap features. If the <TT CLASS="cv">kQABitmap_Lock</TT> bit in that parameter is set but your drawing engine cannot guarantee that the bitmap will remain locked in memory, your <TT CLASS="cv">TQABitmapNew</TT> function should return an error.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=51527"> </A>TQABitmapDetach</H2><P CLASS="T1.Text1"><A NAME="pgfId=51528"> </A><A NAME="marker=51532"> </A>A drawing engine must define a method to detach a bitmap from a drawing engine.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69629"> </A>typedef TQAError (*TQABitmapDetach) (TQABitmap *bitmap);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69631"> </A><TT CLASS="cv">bitmap</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=49143"> </A>A bitmap.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=49144"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=49619"> </A>Your <TT CLASS="cv">TQABitmapDetach</TT> function is called whenever an application calls <TT CLASS="cv">QABitmapDetach</TT>. Your function should, if necessary, load the bitmap specified by the <TT CLASS="cv">bitmap</TT> parameter into memory on the device associated with your drawing engine (so that the caller can release the memory occupied by the bitmap). Your <TT CLASS="cv">TQABitmapDetach</TT> function should not return until the bitmap has been completely loaded.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=59902"> </A>TQABitmapBindColorTable</H2><P CLASS="T1.Text1"><A NAME="pgfId=59904"> </A><A NAME="marker=59903"> </A>A drawing engine may define a method to bind a color lookup table to a bitmap.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69642"> </A>typedef TQAError (*TQABitmapBindColorTable) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQABitmap *bitmap, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQAColorTable *colorTable);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69644"> </A><TT CLASS="cv">bitmap</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=59906"> </A>A bitmap.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69653"> </A><TT CLASS="cv">colorTable</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=59907"> </A>A color lookup table (as returned by a previous call to <TT CLASS="cv">QAColorTableNew</TT>).</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=59908"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=59909"> </A>Your <TT CLASS="cv">TQABitmapBindColorTable</TT> function is called whenever an application calls <TT CLASS="cv">QABitmapBindColorTable</TT>. Your function should bind the color lookup table specified by the <TT CLASS="cv">colorTable</TT> parameter to the bitmap specified by the <TT CLASS="cv">bitmap</TT> parameter. Note that the type of the specified color lookup table must match that of the pixel type of the bitmap to which it is bound. For example, a color lookup table of type <TT CLASS="cv">kQAColorTable_CL8_RGB32</TT> can be bound only to a bitmap whose pixel type is <TT CLASS="cv">kQAPixel_CL8</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=49146"> </A>TQABitmapDelete</H2><P CLASS="T1.Text1"><A NAME="pgfId=49147"> </A><A NAME="marker=51507"> </A>A drawing engine must define a method to delete a bitmap.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69664"> </A>typedef void (*TQABitmapDelete) (TQABitmap *bitmap);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69666"> </A><TT CLASS="cv">bitmap</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=49150"> </A>A bitmap.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=49151"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=49629"> </A>Your <TT CLASS="cv">TQABitmapDelete</TT> function is called whenever an application calls <TT CLASS="cv">QABitmapDelete</TT>. Your function should delete the bitmap specified by the <TT CLASS="cv">bitmap</TT> parameter.<A NAME="marker=51703"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>