{\rtf1\mac\ansicpg10000{\fonttbl\f0\froman\fcharset77 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-2040\ql\qnatural

\f0\b\fs48 \cf0 About PThreadSorts\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-2040\ql\qnatural

\b0\fs28 \cf0 version: 1.0.0\
last modified: August 8, 2000\
PThread sorts is a sample based on the older sample MP Threaded Sort by Matthew Xavier Mora that took pictures and applied different sorting algorithms to them using MP Tasks.  This sample is similar but using POSIX Threads(pthreads) on Mac OS X instead.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-2040\ql\qnatural

\b\fs36 \cf0 Building the Code\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-2040\ql\qnatural

\b0\fs28 \cf0 The code was built using a standard Carbon Application(nib Based) project in project builder.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-2040\ql\qnatural

\b\fs36 \cf0 Restrictions\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-2040\ql\qnatural

\b0\fs28 \cf0 none.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-2040\ql\qnatural

\b\fs36 \cf0 Other Code Notes\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-2040\ql\qnatural

\b0\fs28 \cf0 The design is a C++ abstract base class which handles all the general setup and display operations for a picture that can be sorted.  Each specific sort derives off this class and overrides the Sort() method to sort the picture using its algorithm.  the InOrder() method is provided to do comparisons and the SwapPixels() method is provided for swapping pixels.  These routines will keep track of the number of swaps and comparisons for display in the window.  During construction, to allow sorting of the picture, each pixel is indexed in one array.  We can then just use this array to sort and scramble the picture by swapping the index and the actual pixel.  To make things clearer a second array keeps track pixel offsets from the base address of the picture so we can find the Nth pixel by adding the Nth index of this array to the base address of the picture.
\b\fs36 \
Known Bugs\

\b0\fs28 Currently the pthreads package under Mac OS X does not support cancellation points other than pthread_testcancel().  The pthreads standard specifies several other cancellation points including pthread_join which waits for the termintation of another thread in order to continue executing.  The lack of pthread_join() being a cancellation point causes a bug when cancelling the ThreadedQuickSort where it must wait for all the threads it's joining to terminate normally before it is actually canceled rather than having it cancel the thread at pthread_join() and then calling the cleanup routines which will cancel and join all the child threads.  This causes a delay when closing a ThreadedQuickSort picture.
\b\fs36 \
Possible Future Enhancements\

\b0\fs28 Add some more sorts.
\b\fs36 \
Other Sources of Reference\

\b0\fs28 none.
\b\fs36 \
Version History\

\b0\fs28 7/00-Created\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ri-2040\ql\qnatural

\b\fs36 \cf0 Credits
\b0\fs28 \
Karl Groethe\
Apple Developer Technical Support\
\
\
}
