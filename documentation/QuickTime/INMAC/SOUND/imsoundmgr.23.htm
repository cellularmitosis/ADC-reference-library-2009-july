<!-- legacy work start --><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"        "http://www.w3.org/TR/html4/loose.dtd"><!-- legacy work end --><HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><TITLE> Managing Multiple Sound Channels (deprecated)</title><!-- legacy work start -->        <META NAME="Generator" CONTENT="manual">        <META http-equiv="content-type" CONTENT="text/html;charset=utf-8">        <META NAME = "Copyright" CONTENT="Copyright 2007 Apple Inc. All Rights Reserved.">        <META NAME="IndexTitle" CONTENT="Sound Input Manager (Not Recommended)">        <meta name="xcode-display" content="render">        <LINK REL="stylesheet" TYPE="text/css" HREF="../../../Resources/CSS/frameset_styles.css"> <!-- before submitting, globally replace ".." with "developer.apple.com" -->        <script type="text/javascript" language="JavaScript" src="../../../Resources/JavaScript/page.js"></script><!-- legacy work end --></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><!-- QTnavbar start --><P><I>Inside Macintosh: Sound</I><P>| <A target="doc" HREF="imsoundmgr.22.htm">Previous</A> | <A target="doc" HREF="imsoundmgr.1.htm">Chapter contents</A> | <A target="doc" HREF="imsoundmgr.htm">Chapter top</A> | <A target="doc" HREF="imsoundmgr.1e.htm">Section top</A> | <A target="doc" HREF="imsoundmgr.24.htm">Next</a> | <!-- QTnavbar end --><!-- legacy work start --><script type="text/javascript"> placeWatermark()</script><div style="width:100%; position:fixed;"><div align="center" id="watermark" style="position: relative; margin-left:auto; margin-right:auto; z-index:20; width:500px;"><div class="legacybox" style="position: relative;"><h1>Legacy Document<span class=closebutton><a href="javascript:closeWatermark()"><img src="../../../Resources/Images/closebutton.png" width="14" height="14" border="0" align="top" alt="close button"></a></span></h1><p><b>Important:</b><i>Sound Input Manager</i> is deprecated as of Mac OS X v10.5. For new audio development in Mac OS X, use Core Audio. See the <a href="http://developer.apple.com/referencelibrary/MusicAudio/" target="_top">Audio</a> page in the ADC Reference Library.</p></div></div></div><!-- legacy work end --><H1 CLASS="H3.Heading3"><A NAME="pgfId=2173"> </A><A NAME="22498"> </A>Managing Multiple Sound Channels</H1><P CLASS="T0.Text0"><A NAME="pgfId=2158"> </A><A NAME="marker=1605"> </A>If you are writing an application that can play multiple channels of sound on Macintosh computers that support that feature, you can use the Sound Manager's asynchronous playing abilities, but you might encounter some special obstacles. The technique for playing sounds asynchronously described in <A target="doc" HREF="imsoundmgr.1e.htm#28093" CLASS="XRef">&quot;Playing Sounds Asynchronously&quot;</A> has a limitation if you are using multiple sound channels. Using that technique without modification, you would need to define each separate sound channel in a different global variable, and you would need to use several global flags in your callback procedure to signal which sound channels have finished processing sound commands.</P><P CLASS="T1.Text1"><A NAME="pgfId=2159"> </A>Although it is easy to modify the code in <A target="doc" HREF="imsoundmgr.1e.htm#28093" CLASS="XRef">&quot;Playing Sounds Asynchronously&quot;</A> to use several flags, this solution might not be satisfactory for an application in which the number of sound channels open can vary. For example, suppose that you are writing entertainment software with dozens of sound effects that correspond to actions on the screen and you wish to use the Sound Manager asynchronously so that several sound effects can be played at once. It would be cumbersome to associate a separate global sound channel variable with each sound and create a flag variable for each of these sound channels. Also, you might wish to play the same sound simultaneously in two separate channels. It would be better to write code that manages a global list of sound channels and then provides a simple routine that allows you to add a channel to the list. This section shows how you might implement such a list of sound channels. <A target="doc" HREF="imsoundmgr.23.htm#42482" CLASS="XRef">Listing 1-34</A> defines a data structure that you could use to track multiple sound channels.</P><P CLASS="L.Listing"><A NAME="pgfId=2397"> </A>Listing&nbsp;34 <A NAME="42482"> </A>Defining a data structure to track many sound channels</P><CODE CLASS="Cv.Code"><A NAME="pgfId=9929"> </A>CONST<BR>&nbsp;&nbsp;&nbsp;&nbsp;kMaxNumSndChans = 20;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{max number of sound channels}<BR>TYPE<BR>&nbsp;&nbsp;&nbsp;&nbsp;SCInfo = <BR>&nbsp;&nbsp;&nbsp;&nbsp;RECORD<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sndChan: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SndChannelPtr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{NIL or pointer to channel}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mustDispose: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Boolean;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{flag to dispose channel}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itsData: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Handle;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{data to dispose with channel}<BR>&nbsp;&nbsp;&nbsp;&nbsp;END;<BR>&nbsp;&nbsp;&nbsp;&nbsp;SCList = ARRAY[1..kMaxNumSndChans] OF SCInfo;<BR>VAR<BR>&nbsp;&nbsp;&nbsp;&nbsp;gSndChans:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SCList;<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=2008"> </A>The <TT CLASS="cv">SCInfo</TT> data structure defined in <A target="doc" HREF="imsoundmgr.23.htm#42482" CLASS="XRef">Listing 1-34</A> allows you to keep track of which channels in the collection are being used and which were being used but currently need disposal; it also allows you to associate data with a sound channel so that you can dispose of the data when you dispose of the sound channel. Note that the value of the <TT CLASS="cv">kMaxNumSndChans</TT> constant might vary from application to application. Having defined the data structure, you must initialize it (so that the <TT CLASS="cv">sndChan</TT> and <TT CLASS="cv">itsData</TT> fields are <TT CLASS="cv">NIL</TT> and the <TT CLASS="cv">mustDispose</TT> field is <TT CLASS="cv">FALSE</TT>). You must also write a procedure that finds an available channel. You might declare such a procedure like this:</P><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=9933"> </A>PROCEDURE DoTrackChan (chanToTrack: SndChannelPtr; associatedData: Handle);<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=2398"> </A>Using such a procedure, you could simply create sound channels by using local variables and then add them to the tracking list so that your application disposes of them when they finish executing. The exact implementation of such a procedure would depend on the needs of your application. For example, if there are no channels available in the global list of sound channels, your application might report an error, stop sound on all active channels, or stop sound on the channel that has been playing the longest. If you want your application to be compatible with computers that do not support multichannel sound, this procedure could check whether multichannel sound is supported, and if not, would stop any sound playing on other channels. This is particularly useful if your application plays sound effects in response to actions on the screen; overlapping sound effects sound best, but if this is unattainable, the newest sound should have the highest priority.</P><P CLASS="T1.Text1"><A NAME="pgfId=2160"> </A>One advantage of maintaining a list of sound channels is that you can use it in conjunction with both callback procedures and completion routines. <A target="doc" HREF="imsoundmgr.23.htm#18075" CLASS="XRef">Listing 1-35</A> defines a procedure that either your callback procedure or completion routine could call after setting the application's A5 world correctly.</P><P CLASS="L.Listing"><A NAME="pgfId=2161"> </A>Listing&nbsp;35 <A NAME="18075"> </A>Marking a channel for disposal</P><CODE CLASS="Cv.Code"><A NAME="pgfId=9937"> </A>PROCEDURE MySetTrackChanDispose (mySndChannel: SndChannelPtr);<BR>VAR<BR>&nbsp;&nbsp;&nbsp;&nbsp;index:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{channel index}<BR>&nbsp;&nbsp;&nbsp;&nbsp;found:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Boolean;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{flag variable}<BR>BEGIN<BR>&nbsp;&nbsp;&nbsp;&nbsp;index := 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{start at first spot}<BR>&nbsp;&nbsp;&nbsp;&nbsp;found := FALSE;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{initialize flag variable}<BR>&nbsp;&nbsp;&nbsp;&nbsp;WHILE (index &lt;= kMaxNumSndChans) AND (NOT found) DO<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IF gSndChans[index].sndChan = mySndChannel THEN<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;found := TRUE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{proper channel found}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELSE<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index := index + 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{move to next spot}<BR>&nbsp;&nbsp;&nbsp;&nbsp;IF found THEN<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gSndChans[index].mustDispose := TRUE;<BR>END;<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=2162"> </A><A NAME="marker=9939"> </A>The final thing you need to do is to define a procedure that your application calls once each time through its main event loop. This procedure must dispose of sound channels that are marked for disposal. <A target="doc" HREF="imsoundmgr.23.htm#21362" CLASS="XRef">Listing 1-36</A> defines such a routine.</P><P CLASS="L.Listing"><A NAME="pgfId=2164"> </A>Listing&nbsp;36 <A NAME="21362"> </A>Disposing of channels that have been marked for disposal</P><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=9943"> </A>PROCEDURE MyCleanUpTrackedChans;<BR>CONST<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQuietNow = TRUE;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{need to quiet channel?}<BR>VAR<BR>&nbsp;&nbsp;&nbsp;&nbsp;index:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer;<BR>&nbsp;&nbsp;&nbsp;&nbsp;myErr:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OSErr;<BR>BEGIN<BR>&nbsp;&nbsp;&nbsp;&nbsp;FOR index := 1 TO kMaxNumSndChans DO&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{go through all channels}<BR>&nbsp;&nbsp;&nbsp;&nbsp;WITH gSndChans[index] DO<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IF mustDispose THEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{check global flag}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BEGIN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{channel needs disposal}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IF gSndChans[index].itsData &lt;&gt; NIL THEN<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BEGIN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{release other data}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HUnlock(gSndChans[index].itsData);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HPurge(gSndChans[index].itsData);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;END;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{free channel-related memory}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myErr := MyDisposeSndChannel(sndChan, kQuietNow);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sndChan := NIL;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{set pointer to NIL}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mustDispose := FALSE;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{reset global flag}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IF myErr &lt;&gt; noErr THEN <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoError(myErr);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;END;<BR>END;<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=2167"> </A><A NAME="marker=9945"> </A>The <TT CLASS="cv">MyCleanUpTrackedChans</TT> procedure defined in <A target="doc" HREF="imsoundmgr.23.htm#21362" CLASS="XRef">Listing 1-36</A> works just like the <TT CLASS="cv">MyCheckSndChan</TT> procedure defined in <A target="doc" HREF="imsoundmgr.1f.htm#11643" CLASS="XRef">Listing 1-30</A>, but instead of checking a single global flag, it checks the flag associated with each allocated sound channel. Now that you have defined such a procedure, you can easily write a routine to stop sound in all active channels (for example, if your application receives a suspend event). Simply set the <TT CLASS="cv">mustDispose</TT> flag on all sound channels that are allocated (that is for all channels that are not <TT CLASS="cv">NIL</TT>) and then call <TT CLASS="cv">MyCleanUpTrackedChans</TT>. Note, however, that when the <TT CLASS="cv">MyCleanUpTrackedChans</TT> procedure disposes of a sound channel processing a play from disk, the completion routine will be called and will thus set the <TT CLASS="cv">mustDispose</TT> flag to <TT CLASS="cv">TRUE</TT>. Thus, the <TT CLASS="cv">mustDispose</TT> flag must be reset to <TT CLASS="cv">FALSE</TT> <I CLASS="italics">after</I> the sound channel has been disposed. Otherwise, the <TT CLASS="cv">MyCleanUpTrackedChans</TT> procedure would try to dispose of the same sound channel again when the application called it from its main event loop.<A NAME="marker=962"> </A><A NAME="marker=1607"> </A></P><hr>&#169; 1999 Apple Computer, Inc.<!-- QTnavbar start --><P><I>Inside Macintosh: Sound</I><P>| <A target="doc" HREF="imsoundmgr.22.htm">Previous</A> | <A target="doc" HREF="imsoundmgr.1.htm">Chapter contents</A> | <A target="doc" HREF="imsoundmgr.htm">Chapter top</A> | <A target="doc" HREF="imsoundmgr.1e.htm">Section top</A> | <A target="doc" HREF="imsoundmgr.24.htm">Next</a> | <!-- QTnavbar end --><!-- legacy work start --><script type="text/javascript"> placeWatermark()</script><div style="width:100%; position:fixed;"><div align="center" id="watermark" style="position: relative; margin-left:auto; margin-right:auto; z-index:20; width:500px;"><div class="legacybox" style="position: relative;"><h1>Legacy Document<span class=closebutton><a href="javascript:closeWatermark()"><img src="../../../Resources/Images/closebutton.png" width="14" height="14" border="0" align="top" alt="close button"></a></span></h1><p><b>Important:</b><i>Sound Input Manager</i> is deprecated as of Mac OS X v10.5. For new audio development in Mac OS X, use Core Audio. See the <a href="http://developer.apple.com/referencelibrary/MusicAudio/" target="_top">Audio</a> page in the ADC Reference Library.</p></div></div></div><!-- legacy work end --></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>