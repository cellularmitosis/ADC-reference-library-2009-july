<html>

	<head>
		<meta http-equiv="content-type" content="text/html;charset=iso-8859-1">
		<meta name="generator" content="Adobe GoLive 4">
		<title>Sample Chapter</TITLE>
<script language=javascript> window.parent.focus(); </script>
	</head>

	<body bgcolor="white">
		<a href="../qtdevseries.htm"><i>QuickTime Developer Series</i></a><br>
		<img src="../qlogo2.jpg" width="512" height="118"><br>
		<img src="qt4javatitle.gif" width="512" height="100"><br>
		<h1>Sample Chapter
		<hr width="512" align="left">
		<table width="515">
			<tr>
				<td scope="row">
					<h1><img src="qtjsample_1.gif" valign="middle" align="middle"> Integrating QuickTime with Java</h1>
					<p class="T0.Text0"><a name="pgfId=7761"></a><a name="marker=10006"></a>As we've seen in Chapter 1, QuickTime for Java represents a library of classes that are designed to bring the power and functionality of QuickTime to Java. The core library of these classes provides you with the ability to access many features and capabilities in the QuickTime API. The second set of classes--an Application Framework--lets you integrate those capabilities into your Java programs.</p>
					<p class="T1.Text1"><a name="pgfId=8957"></a>This chapter discusses how that integration works. The topics discussed include the following:</p>
					<ul>
						<li class="B1.Bullet1"><a name="pgfId=7763"></a>a brief introduction to some Java terminology
						<li class="B1.Bullet1"><a name="pgfId=7764"></a>grouping QuickTime for Java classes into a set of packages based on common functionality and usage
						<li class="B1.Bullet1"><a name="pgfId=7765"></a>classes in the Application Framework built on top of QuickTime for Java native binding classes
						<li class="B1.Bullet1"><a name="pgfId=7769"></a>the <tt class="cv">QTSimpleApplet</tt> and <tt class="cv">PlayMovie</tt> programs explained method by method
					</ul>
					<p class="T1.Text1"><a name="pgfId=9872"></a>In this and the following chapters, many code listings are given that use the various QuickTime components and structures. A brief introduction to QuickTime is given and its major components and structures discussed in Chapter 2, &quot;QuickTime Basics.&quot; More information is available in the various books and reference material for QuickTime that is presented on the CD-ROM at the back of this book and at the QuickTime website <tt class="cv">http://www.apple.com/quicktime</tt> , where the complete QuickTime reference documentation and SDK are available.<br>
					<br>
					</p>
					<div>
						<h2 class="H1.Heading1"><a name="pgfId=7770"></a>Some Java Terminology
						<hr>
						</h2>
						<p class="T0.Text0"><a name="pgfId=7771"></a><a name="marker=10008"></a>If you're a C or C++ programmer, you'll need to understand some of the key terms in the Java programming language before proceeding with the QuickTime for Java API.</p>
						<p class="T1.Text1"><a name="pgfId=7772"></a>In Java, you can think of an <a name="marker=10009"></a>object as a collection of data values, or fields. In addition, there are <a name="marker=10010"></a>methods that operate on that data. The data type of an object is called a <a name="marker=10011"></a>class; and an object is referred to as an <a name="marker=10012"></a>instance of its class. In object-oriented programming, the class defines the type of each field in the object. The class also provides the methods that operate on data that is contained in an instance of the class. You create an object using the <a name="marker=10013"></a>new keyword. This invokes a constructor method of the class to initialize the new object. You access the fields and methods of an object by using the dot (.)<tt class="cv"> </tt>operator.</p>
						<p class="T1.Text1"><a name="pgfId=7773"></a>In Java, methods that operate on the object itself are known as <a name="marker=10014"></a>instance methods. These are different from the class methods. Class methods are declared <tt class="cv">static</tt> <a name="marker=10015"></a>; and they operate on the class itself rather than on an individual instance of the class. The fields of a class may also be declared <tt class="cv">static</tt> , which makes them <a name="marker=10016"></a>class fields instead of instance fields. Each object that you instantiate in Java has its own copy of each instance field, but there is only one copy of a class field, which is shared by all instances of the class.</p>
						<p class="T1.Text1"><a name="pgfId=7774"></a>Fields and methods of a class may have different <a name="marker=10017"></a>visibility levels, namely, <tt class="cv">public</tt> , <tt class="cv">protected</tt> , <tt class="cv">package</tt> , and <tt class="cv">private</tt> . These different levels allow fields and methods to be used in different ways.</p>
						<p class="T1.Text1"><a name="pgfId=10022"></a>Every class has a <a name="marker=10021"></a>superclass. And from that superclass it inherits fields and methods. When a class inherits from another class, it is called a <a name="marker=10025"></a>subclass of that class. This inheritance relationship forms what is known as a <a name="marker=10026"></a>class hierarchy. The <tt class="cv">java.lang.Object</tt> <a name="marker=10027"></a>class is the root class of all Java classes; <tt class="cv">Object</tt> is the ultimate superclass of all other classes in Java.</p>
						<p class="T1.Text1"><a name="pgfId=7775"></a>An <a name="marker=10028"></a>interface is a Java construct that defines methods, like a class. However, it does not provide implementations for those methods. A class can implement an interface by defining an appropriate implementation for each of the methods in the interface. An interface expresses the methods an object can perform--what a class can do--while making no assumptions about how the object implements these methods.</p>
						<p class="T1.Text1"><a name="pgfId=7776"></a>When compiled, Java classes generate a class file that is a <a name="marker=10029"></a>byte- coded representation of the class. When a Java program is run, these byte codes are interpreted and often compiled (with a Just-in-Time Compiler) into the native or machine code of the runtime environment and then executed. This is the part of the work done by the <a name="marker=10030"></a>Java Virtual Machine (VM). These byte codes are platform-independent and can be executed on any platform that has a Java VM.</p>
						<p class="T1.Text1"><a name="pgfId=7777"></a>A method in a Java class can be declared to be a <a name="marker=10031"></a>native method. A native method has no Java code; it assumes that the method is actually defined in a native library, typically in C. Native methods are used for a number of reasons: performance, access to native services provided by the operating system, and so on. In fact, many of the classes in the <tt class="cv">java.*</tt> packages contain native methods in order for the Java classes to intergrate with an existing operating system.</p>
						<p class="T1.Text1"><a name="pgfId=9753"></a>Part of the distribution of QuickTime for Java is a framework of classes. A <a name="marker=10032"></a>package name (package and import) is a qualification that precedes the name of a class, i.e., it defines a name-space. The <tt class="cv">java.*</tt> packages are the standard set available on any distribution. QuickTime for Java uses <tt class="cv">quicktime.*</tt> to delineate the QuickTime for Java name-space.</p>
						<p class="T1.Text1"><a name="pgfId=9891"></a>You may want to refer to Appendix A for an explanation of the nomenclature that is used in the QuickTime for Java API. Appendix A also discusses some of the guidelines used in naming methods and classes.</p>
						<h2 class="H1.Heading1"><a name="pgfId=7781"></a>A View of the QuickTime to Java Integration
						<hr>
						</h2>
						<p class="T0.Text0"><a name="pgfId=7784"></a>The following diagram illustrates a top-level view of the QuickTime to Java integration.</p>
						<div>
							<h4 class="Fg.Figure"><a name="pgfId=7790"></a><a name="36504"></a>The QuickTime and Java integration</h4>
						</div>
						<div>
							<div>
								<img src="qtjsample_5.gif"></div>
						</div>
						<div>
							<h2 class="H2.Heading2"><a name="pgfId=7791"></a>Binding QuickTime Functions to Java Methods</h2>
						</div>
						<p class="T0.Text0"><a name="pgfId=7792"></a><a name="marker=10033"></a>Java classes are created from structures and data types found in the standard QuickTime C language header files. These data types provide the basic class structure of the QuickTime for Java API. For example, the <tt class="cv">Movie</tt> data type in <tt class="cv">Movies.h</tt> becomes the <tt class="cv">Movie</tt> class. In general, the C function calls list the main data structure they operate on as the first parameter of the function. These calls become methods in this class. In line with Java conventions, all class names are capitalized, while method names are not.</p>
						<div>
							<h3 class="H3.Heading3"><a name="pgfId=7793"></a>Functions to Methods</h3>
							<p class="T0.Text0"><a name="pgfId=7794"></a>The methods of a class are created from C functions. There is generally a one-to-one relationship between a native function call and a Java method. The Java method's name is derived by the following procedure:</p>
							<p class="T1.Text1"><a name="pgfId=7795"></a>The QuickTime native function</p>
							<p class="T1.Text1"><a name="pgfId=7796"></a><tt class="cv">SetMovieGWorld</tt></p>
							<p class="T1.Text1"><a name="pgfId=7797"></a>logically translates (or is bound by) the Java method</p>
							<p class="T1.Text1"><a name="pgfId=7798"></a><tt class="cv">setGWorld</tt> on the <tt class="cv">Movie</tt> class.</p>
							<p class="T1.Text1"><a name="pgfId=7799"></a>The QuickTime native function</p>
							<p class="T1.Text1"><a name="pgfId=7800"></a><tt class="cv">MCSetControllerPort</tt></p>
							<p class="T1.Text1"><a name="pgfId=7801"></a>logically translates (or is bound by) the Java method</p>
							<p class="T1.Text1"><a name="pgfId=7802"></a><tt class="cv">setPort</tt> on the <tt class="cv">MovieController</tt> class.</p>
							<p class="T1.Text1"><a name="pgfId=7803"></a>A complete list of the QuickTime functions that QuickTime for Java binds is provided on the CD-ROM at the back of this book. The javadoc-generated documentation in HTML, also on the CD-ROM, lists for each method the related QuickTime function call in bold. For example:</p>
							<p class="T1.Text1"><a name="pgfId=7804"></a>QuickTime::EnterMovies()</p>
							<p class="T1.Text1"><a name="pgfId=7805"></a>The supplied HTML documentation for these binding calls provides only brief descriptions. You need to refer to the QuickTime documentation both for specific details of a particular API, as well as for general discussions on the usage of particular services. QuickTime documentation is available on the QuickTime website.</p>
						</div>
						<div>
							<h2 class="H2.Heading2"><a name="pgfId=7806"></a>Garbage Collection</h2>
						</div>
						<p class="T0.Text0"><a name="pgfId=7807"></a><a name="marker=10034"></a>As Java has a built-in garbage collection mechanism, the QuickTime for Java classes perform their own memory management. There are no explicit dispose calls in the QuickTime for Java API. These calls are called by the objects themselves when they perform garbage collection. The <tt class="cv">quicktime.util.QTUtils.reclaimMemory()</tt> <a name="marker=10035"></a>method requests that the garbage collector run and can be used to help ensure disposed of memory that is no longer referenced.</p>
						<p class="T1.Text1"><a name="pgfId=7808"></a>The QuickTime for Java API contains no direct access to pointers or other features that are common in a C-based API. The Java method calls provide very little overhead to the native call; they do parameter marshalling and check the result of the native call for any error conditions. If an error is returned by the native call, then an exception is thrown.</p>
						<div>
							<h2 class="H2.Heading2"><a name="pgfId=7809"></a>Threads</h2>
						</div>
						<p class="T0.Text0"><a name="pgfId=7810"></a><a name="marker=10036"></a>Although Java is a multithreaded environment, the method calls that map a QuickTime function to a Java method do not provide any implicit <a name="marker=10037"></a>synchronization support. If you share any QuickTime object between threads, you are responsible for dealing with any synchronization issues that may arise. The Java language provides easy services to let you do this by means of the following syntax as well as synchronized method calls:</p>
						<p class="Cv.Code"><a name="pgfId=7811"></a>synchronize (aJavaObject) { /*synchronized block of code*/ }<br>
						<br>
						</p>
						<h1 class="H1.Heading1"><a name="pgfId=7813"></a></h1>
						<h1>The QuickTime for Java Package Structure
						<hr>
						</h1>
						<p class="T0.Text0"><a name="pgfId=7814"></a><a name="marker=10038"></a>The QuickTime for Java classes are grouped into a set of packages. The grouping is based on common functionality and usage and on their organization in the standard QuickTime header files. The packages provide both an object model for the QuickTime API and a logical translation or binding of the native function calls into Java method calls. A number of packages also have subpackages that group together smaller sets of functionality.</p>
						<p class="T1.Text1"><a name="pgfId=7815"></a>The major packages generally have a constants interface that presents all of the constants that relate to this general grouping and an exception class that all errors that derive from a call in this package group will throw. The packages, with descriptions of their principal classes and interfaces, are shown in the following table .</p>
						<div>
							<b><a name="pgfId=7929"></a><a name="34857"></a>QuickTime for Java packages </b>
							<table border="1" cellpadding="3">
								<tr>
									<th>
										<p class="TbH.TblHd"><a name="pgfId=7822"></a>Package</th>
									<th>
										<p class="TbH.TblHd"><a name="pgfId=7824"></a>Principal classes<br>
										and interfaces</th>
									<th>
										<p class="TbH.TblHd"><a name="pgfId=7826"></a>Description</th>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7828"></a><tt class="cv">quicktime</tt> <a name="marker=10048"></a></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7830"></a><tt class="cv">QTSession, QTException</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7832"></a>The <tt class="cv">QTSession</tt> class has calls that set up and intialize the QuickTime engine, such as <tt class="cv">initialize</tt> , <tt class="cv">gestalt</tt> , and <tt class="cv">enterMovies</tt> .</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7834"></a><tt class="cv">quicktime.io </tt><a name="marker=10049"></a></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7836"></a><tt class="cv">OpenFile, QTFile, OpenMovieFile, QTIOException </tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7838"></a>Contains calls that deal with file I/O. These calls are derived from the <tt class="cv">Movies.h</tt> file.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7840"></a><tt class="cv">quicktime.qd</tt> <a name="marker=10050"></a></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7842"></a><tt class="cv">QDGraphics, PixMap, Region, QDRect, QDColor, QDConstants, QDException</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7844"></a>Contains classes that represent the QuickDraw data structures that are required for the rest of the QuickTime API. These calls are derived from the <tt class="cv">QuickDraw.h</tt> and <tt class="cv">QDOffscreen.h</tt> files. The QuickTime API expects data structures that belong to QuickDraw, such as graphics ports, GWorlds, rectangles, and points.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7846"></a><tt class="cv">quicktime.qd3d</tt> <a name="marker=10051"></a></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7848"></a><tt class="cv">CameraData, Q3Point, Q3Vector</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7850"></a>Contains classes that represent the QuickDraw 3D data structures that are required for the rest of the QuickTime API, predominantly the tweener and 3D media services.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7852"></a><tt class="cv">quicktime.sound</tt> <a name="marker=10052"></a></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7854"></a><tt class="cv">SndChannel, Sound, SPBDevice, SoundConstants, SoundException</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7856"></a>Contains classes that represent the Sound Manager API. These calls are derived from the <tt class="cv">Sound.h</tt> file. While some basic sound recording services are provided, for more demanding sound input and output the sequence grabber components and movie playback services should be used.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7858"></a><tt class="cv">quicktime.std</tt> <a name="marker=10053"></a></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7860"></a><tt class="cv">StdQTConstants, StdQTException </tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7862"></a>The original QuickTime interfaces on the Mac OS are contained in a collection of eight header files that describe the standard QuickTime API. As such, nearly all of the functions defined in these files are to be found in classes in the <tt class="cv">quicktime.std</tt> group of packages.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7864"></a><tt class="cv">quicktime.std.<br>
										anim</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7866"></a><tt class="cv">Sprite, SpriteWorld </tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7868"></a>Classes that provide support for animation. QuickTime can be used as a real-time rendering system for animation, distinct from a data format--that is, the movie. Thus, you can create a graphics space (<tt class="cv"> SpriteWorld</tt> ) within which characters (<tt class="cv"> Sprite</tt> objects) can be manipulated.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7870"></a><tt class="cv">quicktime.std.<br>
										clocks</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7872"></a><tt class="cv">Clock, TimeBase, QTCallback </tt>and subclasses</td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7874"></a>Contains classes that provide timing services, including support for the creation of hierarchical dependencies between time bases, the usage of callbacks for user scheduling of events or notification, and the capability of instantiating the system clocks that provide the timing services.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7876"></a><tt class="cv">quicktime.std.<br>
										com</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7878"></a><tt class="cv">Component, Component-<br>
										Description</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7880"></a>QuickTime is a component-based architecture, with much of its funtionality being provided through the creation and implementation of a particular component's API. This package contains classes that provide basic support for this component architecture; a full implementation is forthcoming.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7882"></a><tt class="cv">quicktime.std.<br>
										image</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7884"></a><tt class="cv">CodecComponent, QTImage, CSequence, Matrix</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7886"></a>Contains classes that present the Image Compression Manager. These classes provide control for the compression and decompression of both single images and sequences of images. It also contains the <tt class="cv">Matrix</tt> class, which (like the <tt class="cv">Region</tt> class in the <tt class="cv">qd</tt> package) is used generally throughout QuickTime to alter and control the rendering of 2D images.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7888"></a><tt class="cv">quicktime.std.<br>
										movies</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7890"></a><tt class="cv">AtomContainer, Movie, MovieController, Track</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7892"></a>Contains the principal data structures of QuickTime, including classes that represent QuickTime atom containers, movies, movie controllers, and tracks--all essential for creating and manipulating QuickTime movies. A movie containing one or more tracks is the primary way that data is organized and managed in QuickTime. A <tt class="cv">Movie</tt> object can be created from a file or from memory and can be saved to a file. The <tt class="cv">MovieController</tt> class provides the standard way that QuickTime data (movies) are presented and controlled. <tt class="cv">AtomContainer</tt> objects are the standard data structures used to store and retrieve data in QuickTime.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7894"></a><tt class="cv">quicktime.std.<br>
										movies.media</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7896"></a><tt class="cv">DataRef, Media </tt>and subclasses,<tt class="cv"> MediaHandler<br>
										</tt>and subclasses<tt class="cv"> , Sample<br>
										Description </tt>and subclasses</td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7898"></a>A <tt class="cv">Track</tt> object is a media neutral structure, but it contains a single <tt class="cv">Media</tt> type that defines the kind of data that a <tt class="cv">Track</tt> is representing. The <tt class="cv">Media</tt> , <tt class="cv">MediaHandler</tt> and <tt class="cv">SampleDescription</tt> subclasses describe the various media types that QuickTime can present. <tt class="cv">Media</tt> classes control references to data that comprise the raw media data.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7900"></a><tt class="cv">quicktime.std.<br>
										music</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7902"></a><tt class="cv">AtomicInstrument,<br>
										NoteChannel, NoteAllocator</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7904"></a>Contains classes that deal with the general music architecture provided by QuickTime. This architecture can be used to capture and generate music (MIDI) events in real time, customize and create instruments, and eventually provide your own algorithmic synthesis engines.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7906"></a><tt class="cv">quicktime.std.<br>
										qtcomponets</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7908"></a><tt class="cv">MovieExporter, MovieImporter, TimeCoder</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7910"></a>Contains classes that interface with some of the components that are provided to supply different services. The import and export components are supported, as are tween and timecode media components.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7912"></a><tt class="cv">quicktime.std.sg</tt> <a name="marker=10077"></a></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7914"></a><tt class="cv">SequenceGrabber, SGVideoChannel, SGSoundChannel</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7916"></a>Contains classes that implement the sequence grabber component for capturing video and audio media data.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7918"></a><tt class="cv">quicktime.util</tt> <a name="marker=10078"></a></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7920"></a><tt class="cv">QTHandle, QTByteObject, QTPointer, UtilException</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7922"></a>Contains classes that represent utility functionality required by the general QuickTime API. The most commonly used feature of this package is set of classes for memory management from <tt class="cv">Memory.h</tt> . These classes typically form the base class for actual QuickTime objects.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7924"></a><tt class="cv">quicktime.vr</tt> <a name="marker=10079"></a></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7926"></a><tt class="cv">QTVRConstants, QTVRInstance, QTVRException</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7928"></a>Contains classes that represent the QuickTime Virtual Reality API. The package contains all the QuickTime VR interface constants, the <tt class="cv">QTVRInstance</tt> class and some QTVR callbacks for presentation of QTVR content. <a name="marker=10040"></a></td>
								</tr>
							</table>
							<br>
							<br>
						</div>
						<h2 class="H1.Heading1"><a name="pgfId=7930"></a>QuickTime Headers and Java Classes
						<hr>
						</h2>
						<p class="T0.Text0"><a name="pgfId=7931"></a><a name="marker=10080"></a>As we've seen, Java classes are created from structures and data types found in the standard QuickTime C language header files. These provide the basic class structure of the QuickTime for Java API. The original QuickTime interfaces on the Mac OS are contained in a collection of eight header files that describe the standard QuickTime API. As such, nearly all of the functions defined in these files are to be found in classes in the <tt class="cv">quicktime.std</tt> group of packages.</p>
						<p class="T1.Text1"><a name="pgfId=7932"></a>The standard QuickTime C header files with their corresponding packages in the QuickTime for Java API are shown in the table below .</p>
						<div>
							<b class="Tb.Table"><a name="pgfId=7970"></a><a name="17934"></a>C header files and corresponding QuickTime for Java packages</b>
							<table border="1" cellpadding="3">
								<tr>
									<th>
										<p class="TbH.TblHd"><a name="pgfId=7939"></a>QuickTime C header files</th>
									<th>
										<p class="TbH.TblHd"><a name="pgfId=7941"></a>Description</th>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7943"></a><tt class="cv">Components.h</tt> <a name="marker=10081"></a></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7945"></a>Calls from this file are in the <tt class="cv">quicktime.std.comp</tt> package.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7947"></a><tt class="cv">ImageCompression.h </tt><a name="marker=10082"></a>and<tt class="cv"><br>
										ImageCodec.h</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7949"></a>Calls from this file are in the <tt class="cv">quicktime.std.image</tt> package.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7951"></a><tt class="cv">MediaHandlers.h</tt> <a name="marker=10083"></a></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7953"></a>Not required in QuickTime for Java.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7955"></a><tt class="cv">Movies.h</tt> <a name="marker=10084"></a></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7957"></a>This file has been separated into a number of packages to present a finer degree of definition and functional grouping.<br>
										Sprite animation calls are in the <tt class="cv">quicktime.std.anim</tt> package.<br>
										<tt class="cv">Callback</tt> and <tt class="cv">time-base</tt> calls are in the <tt class="cv">quicktime.std.clocks</tt> package.<br>
										File I/O calls are in the <tt class="cv">quicktime.io</tt> package.<br>
										All media-related calls are in the <tt class="cv">quicktime.std.movies.media</tt> package.<br>
										Movies, movie controllers, tracks, and atom containers are in the <tt class="cv">quicktime.std.movies</tt> package.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7959"></a><tt class="cv">MoviesFormat.h</tt> <a name="marker=10085"></a></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7961"></a>Not required in QuickTime for Java.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7963"></a><tt class="cv">QuickTimeComponents.h</tt> <a name="marker=10086"></a></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7965"></a>This file has been separated into a number of packages to present a finer degree of definition and functional grouping. The clocks component is found in the <tt class="cv">quicktime.std.clocks</tt> package. Sequence grabber components calls are found in the <tt class="cv">quicktime.std.sg</tt> package. The remaining components are found in the <tt class="cv">quicktime.std.qtcomponents</tt> package.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=7967"></a><tt class="cv">QuickTimeMusic.h</tt> <a name="marker=10087"></a></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=7969"></a>All calls from this file are in the <tt class="cv">quicktime.std.music</tt> package.</td>
								</tr>
							</table>
							<br>
							<br>
						</div>
						<h2 class="H1.Heading1"><a name="pgfId=7971"></a>The Application Framework
						<hr>
						</h2>
						<p class="T0.Text0"><a name="pgfId=7972"></a><a name="marker=10088"></a>The classes in the QuickTime for Java Application Framework are built entirely on top of QuickTime for Java native binding classes.</p>
						<p class="T1.Text1"><a name="pgfId=7973"></a>The Application Framework classes are designed to simplify the usage of the QuickTime for Java API and to provide a close integration with Java's display and event distribution system. They offer a set of services that are commonly used by QuickTime programs. In addition, they provide useful abstractions and capabilities that make the use of these services simpler and easier for the developer.</p>
						<p class="T1.Text1"><a name="pgfId=7974"></a>The Framework itself is also designed with reusability and extensibility of classes in mind. It uses Java interfaces to express some of the functionality that can be shared or is common among different classes. You can also implement your own versions of these interfaces, or extend existing implementations, to more specifically meet a particular requirement, and in so doing, use these custom classes with other classes of the Framework itself. The following table describes the various Framework packages and their principal classes.</p>
						<div>
							<b class="Tb.Table"><a name="pgfId=8046"></a><a name="23953"></a>QuickTime for Java Application Framework packages</b>
							<table border="1" cellpadding="3">
								<tr>
									<th>
										<p class="TbH.TblHd"><a name="pgfId=9500"></a>Package</th>
									<th>
										<p class="TbH.TblHd"><a name="pgfId=9502"></a>Description</th>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=9504"></a><tt class="cv">quicktime.app</tt> <a name="marker=10089"></a></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=9506"></a>Provides a set of &quot;factory&quot; methods for creating classes that you can use to present media that QuickTime can import. In addition, it provides some utility methods for finding directories and files in the local file system.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=9508"></a><tt class="cv">quicktime.app.action</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=9510"></a>Contains a large number of useful controller classes for mouse drags and for handling mouse events. It also contains action classes that can be used to apply actions to target objects.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=9512"></a><tt class="cv">quicktime.app.anim</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=9514"></a>Contains classes that present all of the functionality of the <tt class="cv">Sprite</tt> and <tt class="cv">SpriteWorld</tt> .</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=9516"></a><tt class="cv">quicktime.app.audio </tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=9518"></a>Contains a number of interfaces and classes that deal specifically with the audio capabilities of QuickTime.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=9520"></a><tt class="cv">quicktime.app.display </tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=9522"></a>Contains a number of classes that are important for using the QuickTime for Java API. <tt class="cv">QTCanvas</tt> and <tt class="cv">QTDrawable</tt> negotiate with <tt class="cv">java.awt</tt> classes to allow the presentation of QuickTime content within a Java window or display space.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=9524"></a><tt class="cv">quicktime.app.image </tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=9526"></a>Handles the presentation and manipulation of images. Included are utility classes for setting transparent colors in images, applying visual effects, creating objects for handling sequences of images, and <tt class="cv">QTDrawable</tt> objects that read image data from a file or load the data into memory.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=9528"></a><tt class="cv">quicktime.app.players</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=9530"></a><tt class="cv">QTPlayer</tt> and <tt class="cv">MoviePlayer</tt> define a set of useful methods that enables you to present QuickTime movies, using <tt class="cv">QTCanvas</tt> objects and the <tt class="cv">QTDrawable</tt> interface.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=9532"></a><tt class="cv">quicktime.app.sg</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=9534"></a>Contains a single class, <tt class="cv">SGDrawer</tt> .</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=9536"></a><tt class="cv">quicktime.app.spaces</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=9538"></a>Interfaces in this package provide a uniform means of dealing with a collection of objects in QuickTime for Java.</td>
								</tr>
								<tr>
									<td scope="row">
										<p class="TbT.TblText"><a name="pgfId=9540"></a><tt class="cv">quicktime.app.time</tt></td>
									<td>
										<p class="TbT.TblText"><a name="pgfId=9542"></a>Provides a set of useful classes to handle timing services used to schedule regular tasks that need to be performed on an ongoing basis.</td>
								</tr>
							</table>
						</div>
						<p><br>
						<br>
						<h2 class="H1.Heading1"><a name="pgfId=8096"></a>The QTSimpleApplet
						<hr>
						</h2>
						<p class="T0.Text0"><a name="pgfId=8099"></a><a name="marker=10093"></a>The sample code on the accompanying CD-ROM includes <tt class="cv">QTSimpleApplet</tt> , a QuickTime for Java applet you can create that presents any of the media file formats that QuickTime supports. QuickTime includes support for a vast array of common file formats: QuickTime movies (including QuickTime VR), pictures, sounds, MIDI, and QuickDraw 3D.</p>
						<p class="T1.Text1"><a name="pgfId=9767"></a>The applet tag for this applet is</p>
						<p class="Cv.Code"><a name="pgfId=9768"></a>&lt;applet code=&quot;QTSimpleApplet.class&quot; width=200 height=100&gt;<br>
						&lt;param name=&quot;file&quot; value=&quot;media/crossfad.gif&quot;&gt;<br>
						&lt;/applet&gt;</p>
						<p class="T1.Text1"><a name="pgfId=9779"></a>The <a name="marker=10099"></a><tt class="cv">test.html</tt> file on the CD-ROM contains the complete HTML listing, including the use of a JavaScript script to generate the appropriate tag. The <tt class="cv">QTSimpleApplet</tt> code takes any of the media file types supported by QuickTime as a parameter in the HTML applet tag and creates the appropriate object for that media type:</p>
						<p class="Cv.Code"><a name="pgfId=8651"></a>param name=file value=&quot;MyMediaFile.xxx&quot;</p>
						<p class="T1.Text1"><a name="pgfId=9834"></a>The <tt class="cv">QTCanvas</tt> , <tt class="cv">QTDrawable</tt> , and <tt class="cv">QTFactory</tt> classes, which are part of the <tt class="cv">QTSimpleApplet</tt> code, are discussed in greater detail in Chapter 4, &quot;QTCanvas, QTDrawable, and QTFactory.&quot;</p>
						<p class="T1.Text1"><a name="pgfId=9832"></a>As with all Java applets, we begin in the <tt class="cv">QTSimpleApplet</tt> code by declaring a list of Java packages and QuickTime for Java packages that contain the required classes you need to import:</p>
						<p class="Cv.Code"><a name="pgfId=8653"></a>import java.applet.Applet;<br>
						import java.awt.*;<br>
						import quicktime.QTSession;<br>
						import quicktime.io.QTFile;<br>
						<br>
						import quicktime.app.QTFactory;<br>
						import quicktime.app.display.QTCanvas;<br>
						import quicktime.app.display.Drawable;<br>
						import quicktime.QTException;</p>
						<p class="T1.Text1"><a name="pgfId=8654"></a>To get the resources for the simple applet and set up the environment, including the creation of the <tt class="cv">QTCanvas</tt> <a name="marker=10101"></a>object, you use the <tt class="cv">init()</tt> <a name="marker=10100"></a>method, as shown in the snippet below. <tt class="cv">QTCanvas</tt> is the object responsible for handling the integration from the <tt class="cv">java.awt</tt> side between Java and QuickTime. The <tt class="cv">QTCanvas</tt> also has parameters that let you control the resizing of the client that it presents. In this case, we tell the canvas to center the client within the space given by the applet's layout manager. This ensures that the client is only as big as its initial size (or smaller if you make the canvas smaller).</p>
						<p class="T1.Text1"><a name="pgfId=8655"></a>The <tt class="cv">QTSession.open()</tt> <a name="marker=10102"></a>call performs a gestalt check to make sure that QuickTime is present and is initialized. Note that this is a required call before any QuickTime for Java classes can be used:</p>
						<p class="Cv.Code"><a name="pgfId=8656"></a>public void init () {<br>
						try {<br>
						QTSession.open()</p>
						<p class="T1.Text1"><a name="pgfId=8657"></a>To set up a <tt class="cv">QTCanvas</tt> object that displays its content at its original size or smaller and is centered in the space given to the <tt class="cv">QTCanvas</tt> when the applet is laid out, we do the following:</p>
						<p class="Cv.Code"><a name="pgfId=9944"></a>setLayout (new BorderLayout());<br>
						myQTCanvas = new QTCanvas (QTCanvas.kInitialSize, 0.5F,<br>
						0.5F);<br>
						add (myQTCanvas, &quot;Center&quot;);<br>
						<br>
						QTFile file = new QTFile (getCodeBase().getFile() +<br>
						getParameter(&quot;file&quot;));<br>
						myQTContent = QTFactory.makeDrawable (file);<br>
						} catch (Exception e) {<br>
						e.printStackTrace();<br>
						...<br>
						}<br>
						}</p>
						<p class="T1.Text1"><a name="pgfId=9945"></a>The <tt class="cv">QTFactory.makeDrawable()</tt> <a name="marker=10103"></a>method is used to create an appropriate QuickTime object for the media that is specified in the &lt;PARAM&gt; tag.</p>
						<p class="T1.Text1"><a name="pgfId=9782"></a>If a <tt class="cv">QTException</tt> <a name="marker=10104"></a>is thrown in the <tt class="cv">init()</tt> method, an appropriate action should be taken by the applet, depending on the error reported.</p>
						<p class="T1.Text1"><a name="pgfId=9953"></a>In the <tt class="cv">start()</tt> <a name="marker=10105"></a>method shown in the next code snippet, you set the client of the <tt class="cv">QTCanvas</tt> . This <tt class="cv">QTCanvas.client</tt> is the QuickTime object (i.e., an object that implements the <tt class="cv">QTDrawable</tt> interface) that draws to the area of the screen that the <tt class="cv">QTCanvas</tt> occupies. This is the QuickTime side of the integration between Java and QuickTime:</p>
						<p class="Cv.Code"><a name="pgfId=9954"></a>public void start () {<br>
						try { myQTCanvas.setClient (myQTContent, true);<br>
						} catch (Exception e) {<br>
						e.printStackTrace();<br>
						}<br>
						}</p>
						<p class="T1.Text1"><a name="pgfId=8662"></a>You use the <tt class="cv">stop()</tt> <a name="marker=10106"></a>method to remove the client from the <tt class="cv">QTCanvas</tt> . It will be reset in the <tt class="cv">start()</tt> method if the applet is restarted. <tt class="cv">destroy()</tt> <a name="marker=10107"></a>is used to close the <tt class="cv">QTSession</tt> . This protocol enables the applet to be reloaded, suspended, and resumed--for example, if the user is leaving and returning to the page with the applet. The <tt class="cv">init()</tt> /<tt class="cv"> destroy()</tt> and <tt class="cv">start()</tt> /<tt class="cv"> stop()</tt> methods are reciprocal in their activities:</p>
						<p class="Cv.Code"><a name="pgfId=8663"></a>public void stop () {<br>
						myQTCanvas.removeClient();<br>
						}<br>
						<br>
						public void destroy () {<br>
						QTSession.close();<br>
						}</p>
						<p class="T0.Text0"><a name="pgfId=8664"></a>You need to call <tt class="cv">QTSession.close()</tt> <a name="marker=10108"></a>if you have previously called <tt class="cv">QTSession.open()</tt> in order to shut down QuickTime properly.</p>
						<p class="T1.Text1"><a name="pgfId=8116"></a>The <tt class="cv">QTTestApplet</tt> <a name="marker=10109"></a>on the accompanying CD-ROM at the back of this book lists a version of the simple applet that allows for the contingencies of QuickTime or QuickTime for Java not being present when an applet is launched. The <tt class="cv">init()</tt> method may throw exceptions because the required file was not found or the applet does not have permission from Java's security manager to read that file. Alternatively, the required version of QuickTime may not be installed. The applet should deal with these issues appropriately. <a name="marker=10095"></a><br>
						<br>
						</p>
						<h2 class="H1.Heading1"><a name="pgfId=8117"></a></h2>
						<h2>Comparing QuickTime C and Java Code
						<hr>
						</h2>
						<p class="T0.Text0"><a name="pgfId=8118"></a><a name="marker=10110"></a>Much of the sample code available for QuickTime is presented in the C programming language. Comparing <a href="#30938" class="XRef">Getting a movie from a file using C code</a> and <a href="#11087" class="XRef">Playing a movie</a> (also in C code) with the Java version shown in <a href="#12318" class="XRef">PlayMovie.java</a> can aid in understanding how to translate C to Java code.</p>
						<div>
							<h2 class="H2.Heading2"><a name="pgfId=8125"></a>Getting a Movie from a File</h2>
						</div>
						<p class="T0.Text0"><a name="pgfId=8126"></a><a name="marker=10116"></a>Before your application can work with a movie, you must load the movie from its file. You must open the movie file and create a new movie from the movie stored in the file. You can then work with the movie. You use the <tt class="cv">OpenMovieFile</tt> <a name="marker=10117"></a>function to open a movie file and the <tt class="cv">NewMovieFromFile</tt> <a name="marker=10118"></a>function to load a movie from a movie file. The code in <a href="#30938" class="XRef">Getting a movie from a file using C code</a> shows how you can use these functions.</p>
						<div>
							<h4 class="E.Example"><a name="pgfId=8131"></a><a name="30938"></a>Getting a movie from a file using C code</h4>
							<p class="CvF.CodeFull"><tt><a name="pgfId=8132"></a>Movie GetMovie (void)<br>
							{<br>
							OSErr err;<br>
							SFTypeList typeList = {MovieFileType,0,0,0};<br>
							StandardFileReply reply;<br>
							Movie aMovie = nil;<br>
							short movieResFile;<br>
							<br>
							StandardGetFilePreview (nil, 1, typeList, &amp;reply);<br>
							if (reply.sfGood)<br>
							{<br>
							err = OpenMovieFile (&amp;reply.sfFile, &amp;movieResFile,<br>
							fsRdPerm);<br>
							<br>
							if (err == noErr)<br>
							{<br>
							short movieResID = 0; /* want first movie */<br>
							Str255 movieName;<br>
							Boolean wasChanged;<br>
							err = NewMovieFromFile (&amp;aMovie, movieResFile,<br>
							&amp;movieResID,<br>
							movieName,<br>
							newMovieActive, /* flags */<br>
							&amp;wasChanged);<br>
							CloseMovieFile (movieResFile);<br>
							}<br>
							}<br>
							return aMovie;<br>
							}</tt></p>
							<p class="T1.Text1"><a name="pgfId=8573"></a>The Movie Toolbox uses <a name="marker=10119"></a>Alias Manager and File Manager functions to manage a movie's references to its data. A movie file does not necessarily contain the movie's data. The movie's data may reside in other files, which are referred to by the movie file. When your application instructs the Movie Toolbox to play a movie, the Toolbox attempts to collect the movie's data. If the movie has become separated from its data, the Movie Toolbox uses the Alias Manager to locate the data files. During this search, the Movie Toolbox automatically displays a dialog box. The user can cancel the search by clicking the Stop button.</p>
							<p class="T1.Text1"><a name="pgfId=8577"></a><a name="marker=10121"></a>The code in <a href="#11087" class="XRef">Playing a movie</a> shows the steps your application must follow in order to play a movie. This program retrieves a movie, sizes the window properly, plays the movie forward, and exits. This program uses the <tt class="cv">GetMovie</tt> <a name="marker=10120"></a>function shown in <a href="#30938" class="XRef">Getting a movie from a file using C code</a> to retrieve a movie from a movie file.</p>
							<div>
								<h4 class="E.Example"><a name="pgfId=8142"></a><a name="11087"></a>Playing a movie</h4>
							</div>
							<p class="CvF.CodeFull"><tt><a name="pgfId=8143"></a>#include &lt;Types.h&gt;<br>
							#include &lt;Traps.h&gt;<br>
							#include &lt;Menus.h&gt;<br>
							#include &lt;Fonts.h&gt;<br>
							#include &lt;Packages.h&gt;<br>
							#include &lt;GestaltEqu.h&gt;<br>
							#include &quot;Movies.h&quot;<br>
							#include &quot;ImageCompression.h&quot;<br>
							<br>
							/* #include &quot;QuickTimeComponents.h&quot; */<br>
							<br>
							#define doTheRightThing 5000<br>
							<br>
							void main (void)<br>
							{<br>
							WindowPtr aWindow;<br>
							Rect windowRect;<br>
							Rect movieBox;<br>
							Movie aMovie;<br>
							Boolean done = false;<br>
							OSErr err;<br>
							EventRecord theEvent;<br>
							WindowPtr whichWindow;<br>
							short part;<br>
							<br>
							InitGraf (&amp;qd.thePort);<br>
							InitFonts ();<br>
							InitWindows ();<br>
							InitMenus ();<br>
							TEInit ();<br>
							InitDialogs (nil);<br>
							err = EnterMovies ();<br>
							if (err) return;<br>
							<br>
							SetRect (&amp;windowRect, 100, 100, 200, 200);<br>
							aWindow = NewCWindow (nil, &amp;windowRect, &quot;\pMovie&quot;,<br>
							false, noGrowDocProc, (WindowPtr)-1,<br>
							true, 0);<br>
							<br>
							SetPort (aWindow);<br>
							aMovie = GetMovie ();<br>
							if (aMovie == nil) return;<br>
							<br>
							GetMovieBox (aMovie, &amp;movieBox);<br>
							OffsetRect (&amp;movieBox, -movieBox.left, -movieBox.top);<br>
							SetMovieBox (aMovie, &amp;movieBox);<br>
							<br>
							SizeWindow (aWindow, movieBox.right, movieBox.bottom, true);<br>
							ShowWindow (aWindow);<br>
							<br>
							SetMovieGWorld (aMovie, (CGrafPtr)aWindow, nil);<br>
							<br>
							StartMovie (aMovie);<br>
							while ( !IsMovieDone(aMovie) &amp;&amp; !done )<br>
							{<br>
							if (WaitNextEvent (everyEvent, &amp;theEvent, 0, nil))<br>
							{<br>
							switch ( theEvent.what )<br>
							{<br>
							case updateEvt:<br>
							whichWindow = (WindowPtr)theEvent.message;<br>
							if (whichWindow == aWindow)<br>
							{<br>
							BeginUpdate (whichWindow);<br>
							UpdateMovie(aMovie);<br>
							SetPort (whichWindow);<br>
							EraseRect (&amp;whichWindow-&gt;portRect);<br>
							EndUpdate (whichWindow);<br>
							}<br>
							break;<br>
							<br>
							case mouseDown:<br>
							part = FindWindow (theEvent.where,<br>
							&amp;whichWindow);<br>
							if (whichWindow == aWindow)<br>
							{<br>
							switch (part)<br>
							{<br>
							case inGoAway:<br>
							done = TrackGoAway (whichWindow,<br>
							theEvent.where);<br>
							break;<br>
							case inDrag:<br>
							DragWindow (whichWindow,<br>
							theEvent.where,<br>
							&amp;qd.screenBits.bounds);<br>
							break;<br>
							}<br>
							}<br>
							break;<br>
							}<br>
							}<br>
							MoviesTask (aMovie, DoTheRightThing);<br>
							}<br>
							DisposeMovie (aMovie);<br>
							DisposeWindow (aWindow);<br>
							}</tt></p>
						</div>
						<div>
							<h2 class="H2.Heading2"><a name="pgfId=8144"></a>Playing a QuickTime Movie</h2>
						</div>
						<p class="T0.Text0"><a name="pgfId=8147"></a><a name="marker=10122"></a><a href="#12318" class="XRef">PlayMovie.java</a> shows how to display any QuickTime content within a <tt class="cv">java.awt</tt> display space using the <tt class="cv">QTCanvas</tt> . It also demonstrates the use of the different resize options of the <tt class="cv">QTCanvas</tt> (with the alignment set to center it in the display space). You use the movie controller to select and then play a QuickTime movie, which can be a local file or a URL specified by the user.</p>
						<p class="T1.Text1"><a name="pgfId=8149"></a>You call <tt class="cv">QTSession.open()</tt> <a name="marker=10123"></a>to perform a gestalt check to ensure that QuickTime is present and is initialized. This is a required call before any QuickTime Java classes can be used.</p>
						<p class="T1.Text1"><a name="pgfId=8150"></a>The window is the size of the movie and resizing the window will resize the movie. The <tt class="cv">QTCanvas</tt> is set to allow any size and is the central component in a <tt class="cv">java.awt.BorderLayout</tt> of its parent <tt class="cv">Frame</tt> .</p>
						<p class="T1.Text1"><a name="pgfId=9310"></a>You use the following methods to lay out and resize the <tt class="cv">Frame</tt> to the size of the <tt class="cv">Movie</tt> :</p>
						<p class="Cv.Code"><a name="pgfId=9319"></a>pm.pack();<br>
						pm.show();<br>
						pm.toFront();</p>
						<p class="T1.Text1"><a name="pgfId=9322"></a>You now prompt the user to select a movie file:</p>
						<p class="CvF.CodeFull"><tt><a name="pgfId=9405"></a>QTFile qtf = QTFile.standardGetFilePreview(QTFile.kStandardQTFileTypes);</tt></p>
						<p class="T1.Text1"><a name="pgfId=9415"></a>You open the selected file and make a movie from it, using these calls:</p>
						<p class="Cv.Code"><a name="pgfId=9410"></a>OpenMovieFile movieFile = OpenMovieFile.asRead(qtf);<br>
						Movie m = Movie.fromFile (movieFile);</p>
						<p class="T1.Text1"><a name="pgfId=9348"></a>You construct a movie controller from the resultant movie, enabling the keys so the user can interact with the movie using the keyboard:</p>
						<p class="Cv.Code"><a name="pgfId=9420"></a>MovieController mc = new MovieController (m);<br>
						mc.setKeysEnabled (true);</p>
						<p class="T1.Text1"><a name="pgfId=9355"></a>You create a <tt class="cv">QTCanvas</tt> so that the <tt class="cv">MovieController</tt> has somewhere to draw and add it to the <tt class="cv">Frame</tt> :</p>
						<p class="Cv.Code"><a name="pgfId=9429"></a>QTCanvas myQTCanvas = new QTCanvas();<br>
						add (myQTCanvas);</p>
						<p class="T1.Text1"><a name="pgfId=9362"></a>You construct the <tt class="cv">QTDrawable</tt> object to present a movie controller:</p>
						<p class="Cv.Code"><a name="pgfId=9440"></a>QTPlayer myQTPlayer = new QTPlayer (mc);</p>
						<p class="T1.Text1"><a name="pgfId=9441"></a>Now you set it as the drawing client of the <tt class="cv">QTCanvas</tt> for a <tt class="cv">QTPlayer</tt> . This also registers interests for both mouse and key events that originate in the <tt class="cv">QTCanvas</tt> :</p>
						<p class="Cv.Code"><a name="pgfId=9398"></a>myQTCanvas.setClient (myQTPlayer, true);</p>
						<p class="T1.Text1"><a name="pgfId=9374"></a>You add a <tt class="cv">WindowListener</tt> to this frame that will close down the <tt class="cv">QTSession</tt> . Finally, you dispose of the <tt class="cv">Frame</tt> that closes down the window and you exit:</p>
						<p class="Cv.Code"><a name="pgfId=9397"></a>addWindowListener(new WindowAdapter () {<br>
						public void windowClosing (WindowEvent e) {<br>
						QTSession.close();<br>
						dispose();<br>
						}<br>
						<br>
						public void windowClosed (WindowEvent e) {<br>
						System.exit(0);<br>
						}<br>
						});</p>
						<p class="T1.Text1"><a name="pgfId=8151"></a><a name="marker=10125"></a>When the user closes the window, the program quits, first calling <tt class="cv">QTSession.close</tt> to terminate QuickTime. You need to call <tt class="cv">QTSession.close()</tt> if you have previously called <tt class="cv">QTSession.open()</tt> in order to shut down QuickTime properly. <tt class="cv">QTSession.close()</tt> is called before the canvas that the QuickTime object is attached to is disposed of. This enables QuickTime to clean up its graphics objects, which it attaches to the native implementation of the <tt class="cv">QTCanvas</tt> .</p>
						<div>
							<h4 class="E.Example"><a name="pgfId=8154"></a><a name="12318"></a>PlayMovie.java</h4>
							<p class="CvF.CodeFull"><tt><a name="pgfId=9388"></a>import java.awt.*;<br>
							import java.awt.event.*;<br>
							<br>
							import quicktime.*;<br>
							import quicktime.io.*;<br>
							import quicktime.std.movies.*;<br>
							import quicktime.app.display.QTCanvas;<br>
							import quicktime.app.players.QTPlayer;<br>
							<br>
							public class PlayMovie extends Frame {<br>
							<br>
							public static void main (String args[]) {<br>
							try {<br>
							QTSession.open ();<br>
							PlayMovie pm = new PlayMovie(&quot;QT in Java&quot;);<br>
							pm.pack();<br>
							pm.show();<br>
							pm.toFront();<br>
							} catch (QTException e) {<br>
							// handle errors<br>
							. . .<br>
							}<br>
							}<br>
							<br>
							PlayMovie (String title) throws QTException {<br>
							super (title);<br>
							<br>
							QTFile qtf = QTFile.standardGetFilePreview(QTFile.kStandardQTFileTypes);<br>
							<br>
							OpenMovieFile movieFile = OpenMovieFile.asRead(qtf);<br>
							Movie m = Movie.fromFile (movieFile);<br>
							<br>
							MovieController mc = new MovieController (m);<br>
							mc.setKeysEnabled (true);<br>
							<br>
							QTCanvas myQTCanvas = new QTCanvas();<br>
							add (myQTCanvas);<br>
							<br>
							QTPlayer myQTPlayer = new QTPlayer (mc);<br>
							<br>
							myQTCanvas.setClient (myQTPlayer, true);<br>
							<br>
							addWindowListener(new WindowAdapter () {<br>
							public void windowClosing (WindowEvent e) {<br>
							QTSession.close();<br>
							dispose();<br>
							}<br>
							<br>
							public void windowClosed (WindowEvent e) {<br>
							System.exit(0);<br>
							}<br>
							});<br>
							}<br>
							}</tt></p>
						</div>
						<div>
							<h2 class="H2.Heading2"><a name="pgfId=9583"></a>Summary Comparision</h2>
						</div>
						<p class="T0.Text0"><a name="pgfId=9584"></a>We've seen two bodies of code illustrated in several examples, one in C and the other in Java. In summary, we could note the following points:</p>
						<ul>
							<li class="B1.Bullet1"><a name="pgfId=9585"></a>Both pieces of code can open and play a vast number of media files.
							<li class="B1.Bullet1"><a name="pgfId=9809"></a>The C code is specific to the Macintosh; the Windows version (not shown) is different--though only slightly. Of course, as an application in C is developed around QuickTime, more and more platform-specific code needs to be written, whereas with Java, a framework is provided that is a cross-platform API as well as a cross-platform execution model.
							<li class="B1.Bullet1"><a name="pgfId=9810"></a>The Java code benefits from the Java class framework with which a developer may already be familiar.
							<li class="B1.Bullet1"><a name="pgfId=9588"></a>Java runs anywhere, unchanged, so long as QuickTime is available. As other client operating systems gain QuickTime support, the QuickTime for Java code will run there, too.
							<li class="B1.Bullet1"><a name="pgfId=9589"></a>The Java code is arguably<a name="marker=10112"></a> simpler. <a name="marker=10007"></a>
						</ul>
						<p class="T1.Text1"><a name="pgfId=8963"></a>&nbsp;</div>
				</div>
			</td>
			</trr></tr>
	</table>
	<hr width="512" align="left">
	</h1>
	<p><a href="QT4Java.htm"><font size="4">Home</font></a><font size="4"> | <a href="updates.htm">Updates</a> | <a href="corrections.htm">Corrections</a> | <a href="faq.htm">FAQ</a> | <a href="toc.htm">Table of Contents</a> | </font>
</body>

</html>
