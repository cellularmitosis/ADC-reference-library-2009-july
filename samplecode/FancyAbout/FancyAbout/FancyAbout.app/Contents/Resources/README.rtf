{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\froman\fcharset77 Times-Bold;\f1\froman\fcharset77 Times-Roman;\f2\fmodern\fcharset77 Courier;
\f3\froman\fcharset77 Times-Italic;}
{\colortbl;\red255\green255\blue255;}
\vieww16340\viewh15180\viewkind1\viewscale100
\pard\tx300\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 About the FancyAbout example
\f1\b0 \
\pard\tx300\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs28 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 FancyAbout is an example Cocoa application that displays a plain, borderless \'d2About\'c9\'d3 panel and illustrates several techniques to achieve a particular appearance:\
	\'a5 programmatically constructing a window with no title bar\
	\'a5 making a window disappear when the user clicks in it\
		(or clicks in other windows or other applications)\
	\'a5 smooth, animated scrolling of text\
\
If you\'d5re considering using this style of panel, keep in mind that the Application Kit offers a standard \'d2About\'c9\'d3 panel that is easy to invoke (see NSApplication\'d5s 
\f0\b orderFrontStandardAboutPanel:
\f1\b0  method) and that displays a panel that looks just like panels put up by most applications. In addition, if your panel provides information that the user may want to select and copy, such as an email address for technical support, they will find it frustrating when clicking to select something makes the window go away!\
\
Even if you choose not to use a panel like this in your application, you can still adopt other techniques from this example, such as creating a bordereless window and animating the scrolling of text.\
\
\
\pard\tx300\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Using this application
\f1\b0 \
\pard\tx300\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs28 \cf0 \
\'a5 Launch it\
\'a5 Select \'d2About FancyAbout\'d3 from the Apple menu\
	(or click the \'d2Show About Panel\'d3 button)\
\'a5 Click anywhere on the screen to dismiss the About\'c9 panel\
\'a5 Repeat as necessary\
\'a5 Try clicking the second button, to visualize how the scrolling works.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Techniques illustrated by this application\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs28 \cf0 \

\f0\b Creating a window in code
\f1\b0  (as opposed to loading it from a nib)\
(see first part of the method 
\f2\fs20 \CocoaLigature0 createPanelToDisplay
\f1\fs28 \CocoaLigature1 )\
\
The code creates a window using NSWindow\'d5s 
\f0\b initWithContentRect:styleMask:backing:defer:
\f1\b0 . To get the minimalist look of an all-white About\'c9 panel with no title bar, it:\
\
\pard\tx320\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 	\'a5 passes 
\f2\fs20 \CocoaLigature0 NSBorderlessWindowMask
\f1\fs28 \CocoaLigature1  for the 
\f0\b styleMask:
\f1\b0  argument\
	\'a5 uses 
\f0\b setBackgroundColor:
\f1\b0  to make the panel\'d5s background white\
	\'a5 uses 
\f0\b setHasShadow:
\f1\b0  to give the window an Aqua drop-shadow\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\

\f0\b Moving one window\'d5s contents to another\

\f1\b0 (see second part of the method 
\f2\fs20 \CocoaLigature0 createPanelToDisplay
\f1\fs28 \CocoaLigature1 )\
\
To create a window with no title bar takes just a few lines of code \'d1 but it would take a lot of code to then fill in the contents of that window.\
\
To create a window full of text and controls is easy in Interface Builder \'d1 but IB can\'d5t create a window with no title bar.\
\
To reduce the programming effort, the application takes the best of both worlds: It takes a titled window from a nib file and copies its contents to an untitled one it creates. This means you can easily modify the nib file using IB, and those modifications will appear in the programmatically-created window.\
\
The two windows are
\f2\fs20 \CocoaLigature0  panelInNib
\f1\fs28 \CocoaLigature1  (an outlet, loaded from the nib file) and
\f2\fs20 \CocoaLigature0  panelToDisplay
\f1\fs28 \CocoaLigature1  (not an outlet, and created in code as described above). The code that creates
\f2\fs20 \CocoaLigature0  panelToDisplay
\f1\fs28 \CocoaLigature1  steals the frame and backing type from 
\f2\fs20 \CocoaLigature0 panelInNib
\f1\fs28 \CocoaLigature1 . This means you can change the frame and backing type of the displayed window by changing those attributes of the window in the nib file.\
\
To move the content of the old, titled window to the new, untitled one, the code:\
	- retains the old window\'d5s content view\
	- removes the content view from the old window\
	- sets the new windows content view to that content view\
	- releases the content view (to balance the retain above)\
\
\

\f0\b Obtaining an application\'d5s version information\

\f1\b0 (see the method
\f2\fs20 \CocoaLigature0  displayVersionInfo
\f1\fs28 \CocoaLigature1 )\
\
Applications usually include their version number or other release information in the About panel, so users can better report problems or submit enhancement requests.\
\
Most development environments let you enter this information in just one place, so you don\'d5t have to remember to update your About panel\'d5s nib file each time you release a new version. But you still need to show that information in the user interface, so the code asks the application\'d5s \'d2info dictionary\'d3 like this:\
\pard\tx480\tx960\tx1440\tx1920\tx2400\tx2880\tx3360\tx3840\tx4320\tx4800\tx5280\tx5760\tx6240\tx6720\tx7200\tx7680\tx8160\tx8640\tx9120\tx9600\tx10080\tx10560\tx11040\tx11520\tx12000\tx12480\tx12960\tx13440\tx13920\tx14400\tx14880\tx15360\tx15840\tx16320\tx16800\tx17280\tx17760\tx18240\tx18720\tx19200\tx19680\tx20160\tx20640\tx21120\tx21600\tx22080\tx22560\tx23040\tx23520\tx24000\tx24480\tx24960\tx25440\tx25920\tx26400\tx26880\tx27360\tx27840\tx28320\tx28800\tx29280\tx29760\tx30240\tx30720\tx31200\tx31680\tx32160\tx32640\tx33120\tx33600\tx34080\tx34560\tx35040\tx35520\tx36000\tx36480\tx36960\tx37440\tx37920\tx38400\tx38880\tx39360\tx39840\tx40320\tx40800\tx41280\tx41760\tx42240\tx42720\tx43200\tx43680\tx44160\tx44640\tx45120\tx45600\tx46080\tx46560\tx47040\tx47520\tx48000\ql\qnatural

\f2\fs20 \cf0 \CocoaLigature0 	value = [[NSBundle mainBundle]\
		objectForInfoDictionaryKey: @"CFBundleShortVersionString"];\
    if (value != nil)\
    \{\
        [shortInfoField setStringValue: value];\
    \}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs28 \cf0 \CocoaLigature1 \

\f0\b Making the panel disappear\

\f1\b0 The About\'c9 panel used in this application has no close button or other controls (such as \'d2OK\'d3 or \'d2Cancel\'d3 buttons) that would obviously close the window. Instead of making the user experiment to learn how to dismiss it, this implementation makes the window disappear no matter what the user does. In particular, it disappears:\
	\'a5 when the user presses any key\
	\'a5 when the user clicks it\
	\'a5 when the user clicks other windows\
	\'a5 when the user activates another app\
\
Below are some details on how it does each of the above.\
\

\f0\b Making the panel disappear
\f1\b0  \'d1 when the user presses any key\
(see the method
\f2\fs20 \CocoaLigature0  handlesKeyDown:inWindow:
\f1\fs28 \CocoaLigature1 )\
\
To learn when the user presses a key, it seems overly complex to hook into NSApplication\'d5s event handling. Instead, it would be nice to make the About\'c9 panel become the 
\f3\i key window
\f1\i0 , so it can process any keystrokes. Ordinarily, the AppKit will not allow a window without a title bar to become the key window, so this application subclasses NSPanel to create NSFancyPanel.\
\
Once the panel is the key window, things are still tricky, because keystrokes ordinarily route to views and other parts of the responder chain. To make sure to process keystrokes the way we want, NSFancyPanel overrides 
\f0\b sendEvent:
\f1\b0 , which gets invoked early in routing events such as keystrokes. The implementation checks for a keydown event and, if it finds one, tries to send a 
\f0\b handlesKeyDown:inWindow:
\f1\b0  message to the delegate. (The AppKit does \ul not\ulnone  define this method for window delegates; NSFancyPanel just checks if the delegate implements it.)\
\
AboutPanelController\'d5s implementation of 
\f0\b handlesKeyDown:inWindow:
\f1\b0  always processes the keystroke, hiding the panel, then returning YES to prevent the panel from doing normal processing. Your implementation could be more refined, perhaps processing only the Escape key to dismiss the panel.\
\
(Not every keystroke goes through 
\f0\b sendEvent:
\f1\b0 ; command-key equivalents are an exception, and thus don\'d5t cause the panel to disappear.)\
\
\

\f0\b Making the panel disappear
\f1\b0  \'d1 when the user clicks it\
(see the method
\f2\fs20 \CocoaLigature0  handlesMouseDown:inWindow:
\f1\fs28 \CocoaLigature1 )\
\
The panel handles mouse clicks (both left- and right-clicks) much like it handles keystrokes. The overridden implementaion of 
\f0\b sendEvent: 
\f1\b0 consults the delegate, and the delegate always handles the event by hiding the panel.\
\
\

\f0\b Making the panel disappear
\f1\b0  \'d1 when the user clicks other windows\
(see the method
\f2\fs20 \CocoaLigature0  watchForNotificationsWhichShouldHidePanel
\f1\fs28 \CocoaLigature1 )\
\

\f0\b awakeFromNib
\f1\b0  invokes 
\f0\b watchForNotificationsWhichShouldHidePanel
\f1\b0 , which watches for 
\f0\b NSWindowDidResignMainNotification
\f1\b0 . If that notification arrives, the application knows that some other window has become the main window, and hides the About... panel.\
\
\

\f0\b Making the panel disappear
\f1\b0  \'d1 when the user activates another app\
(see the method
\f2\fs20 \CocoaLigature0  watchForNotificationsWhichShouldHidePanel
\f1\fs28 \CocoaLigature1 )\
\
The 
\f0\b watchForNotificationsWhichShouldHidePanel
\f1\b0  method also watches for 
\f0\b NSApplicationWillResignActiveNotification
\f1\b0 . If that notification arrives, the application knows that some other app has become active, and hides the About... panel.\
\
This is not the same as making the About\'c9 panel automatically hide by sending 
\f0\b setHidesOnDeactivate
\f1\b0 :YES \'d1 that technique would make the panel hide when the app was no longer active, but then when the app returned to being active, the panel would reappear, a behavior we don\'d5t want for this panel.\
\

\f0\b Animated scrolling of text\

\f1\b0 (see the methods 
\f2\fs20 \CocoaLigature0 startScrollingAnimation
\f1\fs28 \CocoaLigature1 , 
\f2\fs20 \CocoaLigature0 stopScrollingAnimation
\f1\fs28 \CocoaLigature1 , 
\f2\fs20 \CocoaLigature0 setScrollAmount
\f1\fs28 \CocoaLigature1 , and 
\f2\fs20 \CocoaLigature0 scrollOneUnit
\f1\fs28 \CocoaLigature1 )\
\
There are several ways to make text scroll, including techniques with a custom view subclass. To keep things simple, this application just puts the text inside an NSScrollView, hides the scroller, and uses a timer to regularly advance the amount by which the text is scrolled.\
\
Scrolling to the end of some text usually means the last line of text is at the \ul bottom\ulnone  of the scrolling area, still in sight. To make the supplied text scroll completely out of sight (like movie credits do), the method 
\f2\fs20 \CocoaLigature0 loadTextToScroll
\f1\fs28 \CocoaLigature1  adds a bunch of blank lines at the end. This solution is not elegant, but works well in practice.\
\
The actual scrolling gets done in 
\f2\fs20 \CocoaLigature0 scrollOneUnit
\f1\fs28 \CocoaLigature1 , which gets invoked regularly from an NSTimer object. It finds the current scroll amount, adds a small increment to it, and updates the scrolling.\
\
If you have anything (such as a logo) placed in front of the scrolling area, it will \ul not\ulnone  redraw on its own when you scroll the text. This is why 
\f0\b setScrollAmount:
\f1\b0  calculates where the scroll-view is in the panel and forces that whole window to redraw. (Try commenting out this code. The Apple logo will slide with the text, because a scrollview\'d5s default behavior is to scroll by copying pixels in the window.)\
\
To see how the scrolling works, click the button \'d2Show About Panel, including scroller in text\'d3, and you can see the scroller moving. This can help you visualize how the scrolling works in the usual (no scroller) case.\
\
\
\pard\tx300\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Using this functionality in your application\
\pard\tx300\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs28 \cf0 \
This application does a bunch of things, and you may not want to incorporate all of them in your application, but it\'d5s probably easiest to incorporate everything and then remove what you don\'d5t like. To incorporate all of the functionality:\
\
(1) add these files to your project\'d5s classes:\
	AboutPanelController.m and .h\
	NSFancyPanel.m and .h\
\
(2) add these to your project\'d5s resources:\
	README.rtf\
	AboutPanel.nib  (remember, it\'d5s inside English.lproj)\
\
(3) Add this method to your application\'d5s main controller class (.m and .h files):\
\pard\tx480\tx960\tx1440\tx1920\tx2400\tx2880\tx3360\tx3840\tx4320\tx4800\tx5280\tx5760\tx6240\tx6720\tx7200\tx7680\tx8160\tx8640\tx9120\tx9600\tx10080\tx10560\tx11040\tx11520\tx12000\tx12480\tx12960\tx13440\tx13920\tx14400\tx14880\tx15360\tx15840\tx16320\tx16800\tx17280\tx17760\tx18240\tx18720\tx19200\tx19680\tx20160\tx20640\tx21120\tx21600\tx22080\tx22560\tx23040\tx23520\tx24000\tx24480\tx24960\tx25440\tx25920\tx26400\tx26880\tx27360\tx27840\tx28320\tx28800\tx29280\tx29760\tx30240\tx30720\tx31200\tx31680\tx32160\tx32640\tx33120\tx33600\tx34080\tx34560\tx35040\tx35520\tx36000\tx36480\tx36960\tx37440\tx37920\tx38400\tx38880\tx39360\tx39840\tx40320\tx40800\tx41280\tx41760\tx42240\tx42720\tx43200\tx43680\tx44160\tx44640\tx45120\tx45600\tx46080\tx46560\tx47040\tx47520\tx48000\ql\qnatural

\f2\fs20 \cf0 \CocoaLigature0 	- (IBAction) orderFrontCustomAboutPanel: (id) sender\
	\{\
	    [[AboutPanelController sharedInstance] showPanel];\
	\}\
\pard\tx300\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs28 \cf0 \CocoaLigature1 \
(4) Open the main nib file, parse your updated controller header file, and connect your About 
\f3\i MyApplication
\f1\i0  menu item to the 
\f2\fs20 \CocoaLigature0 orderFrontCustomAboutPanel:
\f1\fs28 \CocoaLigature1  action in your controller object.\
\
(5) Build and run the application. The About
\f3\i  MyApplication
\f1\i0  menu item should show the panel, including this README\'d5s text scrolling by.\
\
You can then change things to your liking:\
	\'a5 changing the contents of the README.rtf file\
	\'a5 using a file with some name other than README.rtf\
	\'a5 adjusting 
\f2\fs20 \CocoaLigature0 SCROLL_DELAY_SECONDS
\f1\fs28 \CocoaLigature1  and 
\f2\fs20 \CocoaLigature0 SCROLL_AMOUNT_PIXELS
\f1\fs28 \CocoaLigature1 \
	\'a5 adding other content to the nib file or changing the size of its window\
	\'a5 having 
\f2\fs20 \CocoaLigature0 displayVersionInfo
\f1\fs28 \CocoaLigature1  show other information}