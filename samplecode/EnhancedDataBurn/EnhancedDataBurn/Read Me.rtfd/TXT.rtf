{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 LucidaGrande-Bold;\f1\fnil\fcharset77 LucidaGrande;}
{\colortbl;\red255\green255\blue255;}
\vieww12360\viewh14360\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Read Me About EnhancedDataBurn\

\f1\b0\fs24 1.0 (12/19/02)\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\ql\qnatural
\cf0 \
EnhancedDataBurn is an application written in Objective-C which shows how to burn a more advanced data disc containing a complete virtual filesystem. The application presents a simple interface to create the virtual filesystem and panels to set the various options that DiscRecording provides for data burning.\
\
This sample code demonstrates: \
\
	\'a5 Creation on a complete virtual filesystem.\
	\'a5 Setting which filesystems to generate\
	\'a5 How to include/exclude files from a particular filesystem independent of others.\
	\'a5 How to handle renaming of the files in each filesystem.\
	\'a5 How to set various file properties that override the file properties found on the source disk.\
\
The outline table code itself is based on the DragNDropOutlineView sample code located in /Developer/Examples/AppKit/DragNDropOutlineView. Look there for more information on the details of implementing an NSOutlneTableView.\
\
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\ql\qnatural

\f0\b\fs28 \cf0 Major source files and what's interesting about them:\
\
AppController.m\
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\ql\qnatural

\f1\b0\fs24 \cf0 The AppController object acts as the outline view's delegate and data source. It maintains a tree like structure as its model. The nodes of the this structure are FSTreeNodes, each having a pointer to some FSTreeData. \
\
Finally, the AppController handles initiating the burn itself through a menu item and toolbar button. 
\f0\b \CocoaLigature0 burnDisc: 
\f1\b0 and
\f0\b  burnSetupEnded:returnCode:contextInfo: 
\f1\b0 together are used to present the burn setup panel and handle creation of the DRTrack object to be burned. 
\f0\b burnProgressPanelWillBegin: 
\f1\b0 and
\f0\b  burnProgressPanelDidFinish:
\f1\b0  are used to prevent the app from being quit until the burn completes.\CocoaLigature1 \
\pard\tx480\tx960\tx1440\tx1920\tx2400\tx2880\tx3360\tx3840\tx4320\tx4800\tx5280\tx5760\tx6240\tx6720\tx7200\tx7680\tx8160\tx8640\tx9120\tx9600\tx10080\tx10560\tx11040\tx11520\tx12000\tx12480\tx12960\tx13440\tx13920\tx14400\tx14880\tx15360\tx15840\tx16320\tx16800\tx17280\tx17760\tx18240\tx18720\tx19200\tx19680\tx20160\tx20640\tx21120\tx21600\tx22080\tx22560\tx23040\tx23520\tx24000\tx24480\tx24960\tx25440\tx25920\tx26400\tx26880\tx27360\tx27840\tx28320\tx28800\tx29280\tx29760\tx30240\tx30720\tx31200\tx31680\tx32160\tx32640\tx33120\tx33600\tx34080\tx34560\tx35040\tx35520\tx36000\tx36480\tx36960\tx37440\tx37920\tx38400\tx38880\tx39360\tx39840\tx40320\tx40800\tx41280\tx41760\tx42240\tx42720\tx43200\tx43680\tx44160\tx44640\tx45120\tx45600\tx46080\tx46560\tx47040\tx47520\tx48000\li480\fi-480\ql\qnatural

\f0\b \cf0 \
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\ql\qnatural

\fs28 \cf0 DiscInfoController.m\
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\ql\qnatural

\f1\b0\fs24 \cf0 The DiscInfoController object acts as the Controller for the filesystem properties Model and the DiskInfo Panel's View. It demonstrates what items are possible to control for the volume(s) to be created as well as how to limit the filesystems generated on the resulting disc. 
\f0\b \CocoaLigature0 setFilesystemMask:
\f1\b0  shows how to set and clear filesystem mask bits to control which filesystems get generated for a burned data disc. 
\f0\b setVolumeName:
\f1\b0  illustrates some of the odd cases when dealing with volume names for multiple filesystems.
\f0\b  setVolumeProperty:
\f1\b0  is an example of how to take user interface items and extract their values for storage into a properties dictionary.
\fs20 \
\pard\tx480\tx960\tx1440\tx1920\tx2400\tx2880\tx3360\tx3840\tx4320\tx4800\tx5280\tx5760\tx6240\tx6720\tx7200\tx7680\tx8160\tx8640\tx9120\tx9600\tx10080\tx10560\tx11040\tx11520\tx12000\tx12480\tx12960\tx13440\tx13920\tx14400\tx14880\tx15360\tx15840\tx16320\tx16800\tx17280\tx17760\tx18240\tx18720\tx19200\tx19680\tx20160\tx20640\tx21120\tx21600\tx22080\tx22560\tx23040\tx23520\tx24000\tx24480\tx24960\tx25440\tx25920\tx26400\tx26880\tx27360\tx27840\tx28320\tx28800\tx29280\tx29760\tx30240\tx30720\tx31200\tx31680\tx32160\tx32640\tx33120\tx33600\tx34080\tx34560\tx35040\tx35520\tx36000\tx36480\tx36960\tx37440\tx37920\tx38400\tx38880\tx39360\tx39840\tx40320\tx40800\tx41280\tx41760\tx42240\tx42720\tx43200\tx43680\tx44160\tx44640\tx45120\tx45600\tx46080\tx46560\tx47040\tx47520\tx48000\li480\fi-480\ql\qnatural

\f0\b\fs28 \cf0 \CocoaLigature1 \
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\ql\qnatural
\cf0 FSPropertiesController.m, HFSPlusController.m, ISOController.m, JolietController.m, ISO9660Controller.m\
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\ql\qnatural

\f1\b0\fs24 \cf0 These files as a group handle display and data handling for the file/folder object properties. Many of the file/folder properties that can be set are common between all of the different filesystems, so these controller objects are arranged into a simple class hierarchy. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 {{\NeXTGraphic Pasted Graphic.tiff \width7060 \height3100
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
\
Most of the functionality is contained in FSPropertyController. The important methods you'll want to look at are 
\f0\b \CocoaLigature0 setIncludedBit:
\f1\b0  (shows how to get and set the filesystem inclusion mask for an item), 
\f0\b setProperty:
\f1\b0  (shows how to set a property for an item) and 
\f0\b setFileName:
\f1\b0  (shows how to set the filename for an item). HFSPlusController adds in a few other methods to handle it's special needs, and ISO9660Controller overrides 
\f0\b updateFileNames
\f1\b0  and 
\f0\b setFileName:
\f1\b0  to handle the peculiarities of ISO naming conventions.
\fs20 \
\pard\tx480\tx960\tx1440\tx1920\tx2400\tx2880\tx3360\tx3840\tx4320\tx4800\tx5280\tx5760\tx6240\tx6720\tx7200\tx7680\tx8160\tx8640\tx9120\tx9600\tx10080\tx10560\tx11040\tx11520\tx12000\tx12480\tx12960\tx13440\tx13920\tx14400\tx14880\tx15360\tx15840\tx16320\tx16800\tx17280\tx17760\tx18240\tx18720\tx19200\tx19680\tx20160\tx20640\tx21120\tx21600\tx22080\tx22560\tx23040\tx23520\tx24000\tx24480\tx24960\tx25440\tx25920\tx26400\tx26880\tx27360\tx27840\tx28320\tx28800\tx29280\tx29760\tx30240\tx30720\tx31200\tx31680\tx32160\tx32640\tx33120\tx33600\tx34080\tx34560\tx35040\tx35520\tx36000\tx36480\tx36960\tx37440\tx37920\tx38400\tx38880\tx39360\tx39840\tx40320\tx40800\tx41280\tx41760\tx42240\tx42720\tx43200\tx43680\tx44160\tx44640\tx45120\tx45600\tx46080\tx46560\tx47040\tx47520\tx48000\li480\fi-480\ql\qnatural

\f0\b\fs28 \cf0 \CocoaLigature1 \
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\ql\qnatural
\cf0 NSOutlineView_Extensions.m\
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\ql\qnatural

\f1\b0\fs24 \cf0 Implements some convenience methods in a category and a subclass of 
\f0\b NSOutlineView
\f1\b0 , named 
\f0\b MyOutlineView
\f1\b0 .
\f0\b  
\f1\b0 MyOutlineView overrides the method 
\f0\b draggingSourceOperationMaskForLocal:
\f1\b0  to allow our drags initiated from our outline view to have destinations outside of our application. Without overriding this method, we would not be able to drag between this application and TextEdit, even though 
\f0\b outlineView's
\f1\b0  delegate places 
\f0\b NSStringPboardType
\f1\b0  on the pasteboard.\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\ql\qnatural

\f0\b\fs28 \cf0 \
\
ImageAndTextCell.m\
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\ql\qnatural

\f1\b0\fs24 \cf0 The cell class used for display in our outline view. ImageAndTextCell is a subclass of NSTextFieldCell that can display images and text at the same time. The implementation is pretty simple, and mostly involves accounting for the size of the image when displaying (in 
\f0\b drawWithFrame:inView:
\f1\b0 )
\f0\b  
\f1\b0 and editing the cell (in 
\f0\b editWithFrame:inView:editor:delegate:event:
\f1\b0 ).\
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\ql\qnatural

\f0\b\fs28 \cf0 \
TreeNode.m, and FSTreeNode.m\
\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\ql\qnatural

\f1\b0\fs24 \cf0 Files relating to the tree implementation can safely be ignored if desired. Basically, the tree data structure helps hide complexity and defines the model the AppController maintains. \
\
TreeNode is a node in a doubly linked tree data structure. TreeNode's have weak references to their parent (to avoid retain cycles, anyway the parents retain their children). Each node has 0 or more children and a reference to a piece of 
\f0\b TreeNodeData
\f1\b0  data.  The TreeNode provides methods to manipulate and extract structural information about a tree. For instance, TreeNode implements: 
\f0\b insertChild:atIndex:
\f1\b0 , 
\f0\b removeChild:, isDescendantOfNode:
\f1\b0 , and other useful operations on tree nodes.
\f0\b\fs28 \
\

\f1\b0\fs24 The applications AppController, acting as the 
\f0\b outlineView's
\f1\b0  data source, supplies FSTreeNode objects as items. \
\
This source file Implements FSTreeNode and 
\f0\b FSNodeData
\f1\b0 . Each FSTreeNode maintains a reference to some FSNodeData, The FSNodeData is the main data structure in the model maintained by the applications AppController object. This data object responds to queries including: 
\f0\b icon 
\f1\b0 (determines the icon to display for a particular row), 
\f0\b name 
\f1\b0 (the string displayed for a particular row)
\f0\b , isExpandable
\f1\b0  (a flag that determines wether or now a user is allowed to reveal the children of this node), 
\f0\b fsObject
\f1\b0  (the actual DRFSObject that this node represents). 
\f0\b FSFileNodeData
\f1\b0  and 
\f0\b FSFolderNodeData
\f1\b0  are concrete subclasses of FSNodeData that specialize the node data for handling the differences between files and folders. Creation of FSNodeData objects take a DRFSObject of the correct type (DRFolder or DRFile) and initialize the object using 
\f0\b initWithFSObject:
\f1\b0 .\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 Sample Requirements
\f1\b0\fs24 \
\
This sample requires Mac OS X 10.2.3 or later.\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs28 \cf0 FeedBack
\f1\b0\fs24 \
\
Please send all feedback about this sample to \
http://developer.apple.com/contact/feedback.html\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\ql\qnatural
\cf0 \
}