<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE> Introduction</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="H1.Heading1"><A NAME="pgfId=11602"> </A>Introduction</H1><P CLASS="T1.Text1"><A NAME="pgfId=8020"> </A>The 3D Metafile is a file format for 3D graphics applications that makes use of the Apple QuickDraw 3D (QD3D) 1.5 graphics library or other 3D graphics libraries. This document describes the 3D Metafile file format, Version 1.5.</P><P CLASS="T1.Text1"><A NAME="pgfId=8021"> </A>The purpose of the metafile is to establish a standard file format for 3D graphics files. This includes establishing canonical forms for descriptions of familiar 3D graphics objects.</P><P CLASS="T1.Text1"><A NAME="pgfId=8024"> </A>This standard is put forward to promote compatibility among 3D graphics applications and is meant to facilitate the transfer and exchange of data between distinct applications. The file format also permits a project to be saved to a file so that it may be resumed or altered at a later time.</P><P CLASS="T1.Text1"><A NAME="pgfId=8026"> </A>The canonical forms for descriptions of 3D graphics objects outlined in this document embody an object- and class-based approach to 3D graphics. The 3D metafile objects are defined using a small number of basic data types and some object formation devices. Each object is a member of a class; the class structure reflects the structure of the QuickDraw 3D class <A NAME="marker=16214"> </A>hierarchy. (But it is worth pointing out that QD3D also supports immediate mode, which does not require creation of objects, and QD3D can write objects in immediate mode.)</P><P CLASS="T1.Text1"><A NAME="pgfId=16233"> </A>Each class of objects, and thus each object, is correlated with a particular node in that structure. We use the terms <A NAME="marker=13809"> </A><I CLASS="italics">parent</I> and <A NAME="marker=13810"> </A><I CLASS="italics">child</I> to describe the relationships among objects located at immediately adjacent and connected nodes in the structure. For example, a color attribute may be included in a set of attributes that is assigned to a geometric object. In that case, the geometric object is a parent of the attribute set, which in turn is a parent of the color attribute, while the color attribute is a child of the attribute set, which in turn is a child of the geometric object. See the book 3D<I CLASS="italics"> Graphics Programming With QuickDraw&nbsp;3D</I> for complete details on this approach to the classification of 3D graphics objects.</P><P CLASS="T1.Text1"><A NAME="pgfId=16277"> </A>A metafile is simply a sequence or list of one or more valid metafile objects. Each metafile must contain exactly one 3D metafile header, and this header must be the first object to occur in the file. Objects following the header may occur in any order permitted by the metafile class hierarchy. Currently, every object that begins in a metafile must be wholly contained in that file; thus, it is not legal to truncate the description of an object at the end of a file.</P><P CLASS="Note"><A NAME="pgfId=23671"> </A>For examples of complete 3D metafiles, see <A HREF="qd3dmetafile.2f.htm#30110" CLASS="XRef">&quot;Polyhedra&quot;</A>, and <A HREF="qd3dmetafile.34.htm#20162" CLASS="XRef">&quot;Attribute Arrays&quot;</A>. </P><P CLASS="T1.Text1"><A NAME="pgfId=16275"> </A>A metafile object's data can take two forms:</P><UL><LI CLASS="B1.Bullet1"><A NAME="pgfId=20623"> </A>data that is itself another metafile object</LI><LI CLASS="B1.Bullet1"><A NAME="pgfId=20624"> </A>data that is not another metafile object</LI></UL><P CLASS="T1.Text1"><A NAME="pgfId=20625"> </A>Collectively the 2nd type of data makes up the <B CLASS="bold">root</B> object. The data in a root object is some combination of the basic data types (see <A HREF="qd3dmetafile.3.htm#22964" CLASS="XRef">&quot;Basic Data Types&quot;</A>). If a metafile object contains other metafile objects (called <B CLASS="bold">subobjects</B>), then the entire object is enclosed in a <B CLASS="bold">container</B>. The first item in the container is the root object, and the subobjects take up the rest of the container. See <A HREF="qd3dmetafile.20.htm#40766" CLASS="XRef">&quot;Containers&quot;</A>.</P><P CLASS="T1.Text1"><A NAME="pgfId=14681"> </A>This document defines a format for <A NAME="marker=14679"> </A>ASCII <A NAME="marker=14680"> </A>text files and also defines a format for <A NAME="marker=14682"> </A>binary files. The two formats incorporate the same functional features, and there is a close correspondence between their components. Most objects are represented very similarly in the two formats. However, some objects, such as file pointers, are represented differently, as described below. Any text metafile can be converted to a binary metafile, and vice versa, without loss of information. </P><P CLASS="T1.Text1"><A NAME="pgfId=23800"> </A>The metafile file format permits objects to be labeled and referenced: if the same object appears more than once in a metafile, only the first occurrence need be written out fully. All other occurrences take the form of a reference to that first occurrence. The referencing machinery makes use of three special entities: file pointers, reference objects, and table of contents objects. A table of contents provides a complete or partial catalog of the items contained in a metafile. For details, see <A HREF="qd3dmetafile.18.htm#35730" CLASS="XRef">&quot;File Pointers&quot;</A>, <A HREF="qd3dmetafile.1d.htm#33762" CLASS="XRef">&quot;Reference Objects&quot;</A>, and <A HREF="qd3dmetafile.1c.htm#14274" CLASS="XRef">&quot;Tables of Contents&quot;</A>. </P><P CLASS="T1.Text1"><A NAME="pgfId=23810"> </A>Note that a metafile is not itself a database and does not have the capabilities of a database. Applications that wish to apply the capabilities of a database to the contents of a metafile must connect that file to a preexisting database program.</P><P CLASS="T1.Text1"><A NAME="pgfId=16247"> </A>If desired, the objects in a metafile can be organized by adding them to groups. Almost all objects can be added to one or another of the available groups. Groups are themselves objects, and they can be nested, so that more complex objects can be created that have as much hierarchical structure as desired. See <A HREF="qd3dmetafile.77.htm#13944" CLASS="XRef">&quot;Groups&quot;</A>. </P><P CLASS="T1.Text1"><A NAME="pgfId=16505"> </A>The strategy of exposition is as follows: we begin with the basic data types. From these we define the defined data types. This is followed by a discussion of abstract (or structural) data types, which are part of the structure of a metafile object. Next is a section containing descriptions of six special metafile objects. This is followed by a section that contains examples illustrating the structure of metafile objects, especially the cross-referencing machinery. The remainder of this document describes the remaining metafile objects. </P><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>