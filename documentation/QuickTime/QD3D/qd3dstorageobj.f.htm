<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Creating and Accessing Windows Storage Objects</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=2343"> </A>Creating and Accessing Windows Storage Objects</H1><P CLASS="T1.Text1"><A NAME="pgfId=2348"> </A><A NAME="marker=2344"> </A>QuickDraw&nbsp;3D provides routines for creating and managing Windows storage objects.</P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=2359"> </A>Q3Win32Storage_New</H2><P CLASS="T1.Text1"><A NAME="pgfId=2364"> </A>You use the <TT CLASS="cv">Q3Win32Storage_New</TT> function to create a Windows storage object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=6032"> </A>TQ3StorageObject Q3Win32Storage_New (const HANDLE hFile);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=6034"> </A><TT CLASS="cv">hFile</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=2371"> </A>A handle to a file.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=2382"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=2482"> </A>The <TT CLASS="cv">Q3Win32Storage_New</TT> function returns, as its function result, a new storage object associated with the file specified by the <TT CLASS="cv">hFile</TT> parameter. The specified file is assumed to be closed. QuickDraw&nbsp;3D opens the file and, when the associated storage object is closed or disposed of, QuickDraw&nbsp;3D closes the file. If <TT CLASS="cv">Q3Win32Storage_New</TT> cannot create a new storage object, it returns the value <TT CLASS="cv">NULL</TT>.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=2625"> </A>EXAMPLES</H3><P CLASS="T1.Text1"><A NAME="pgfId=2640"> </A>The <TT CLASS="cv">HANDLE</TT> type is a native Windows entity that's created using the Windows <TT CLASS="cv">CreateFile</TT> call.  The following illustrates a typical way of using this call to read an existing variable of type <TT CLASS="cv">HANDLE</TT>:  </P><CODE CLASS="Cv.Code"><A NAME="pgfId=6045"> </A>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hFile = CreateFile(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pathName,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// pointer to name of the file <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GENERIC_READ,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// access (read-write) mode <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// share mode <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// pointer to security descriptor <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OPEN_EXISTING,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// how to create <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_NORMAL,&nbsp;&nbsp;// file attributes <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// handle to file with attributes<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// to copy  <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A3Assert(hFile != INVALID_HANDLE_VALUE);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A3Assert((srcStorage = Q3Win32Storage_New(hFile)) != NULL);<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=2670"> </A>The following is a typical way of using the Windows <TT CLASS="cv">CreateFile</TT> call to write to a variable of type <TT CLASS="cv">HANDLE</TT>: </P><CODE CLASS="Cv.Code"><A NAME="pgfId=6049"> </A>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hFile = CreateFile(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pathName,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// pointer to name of the file <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GENERIC_WRITE,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// access (read-write) mode <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// share mode <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// pointer to security descriptor <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CREATE_NEW,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// how to create <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_NORMAL,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// file attributes <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// handle to file with<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// attributes to copy  <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=6053"> </A>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A3Assert(hFile != INVALID_HANDLE_VALUE);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A3Assert((dstStorage = Q3Win32Storage_New(hFile)) != NULL);<BR></CODE></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=2392"> </A>Q3Win32Storage_Get</H2><P CLASS="T1.Text1"><A NAME="pgfId=2397"> </A>You can use the <TT CLASS="cv">Q3Win32Storage_Get</TT> function to get the file associated with a Windows storage object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=6057"> </A>TQ3Status Q3Win32Storage_Get (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3StorageObject storage,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const HANDLE *hFile);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=6059"> </A><TT CLASS="cv">storage</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=2404"> </A>A Windows storage object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=6068"> </A><TT CLASS="cv">hFile</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=2409"> </A>On exit, a handle to the file associated with the specified storage object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=2420"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=2513"> </A>The <TT CLASS="cv">Q3Win32Storage_Get</TT> function returns, through the <TT CLASS="cv">hFile</TT> parameter, a handle to the file associated with the Windows storage object specified by the <TT CLASS="cv">storage</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=2430"> </A>Q3Win32Storage_Set</H2><P CLASS="T1.Text1"><A NAME="pgfId=2507"> </A>You can use the <TT CLASS="cv">Q3Win32Storage_Set</TT> function to set the file associated with a Windows storage object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=6079"> </A>TQ3Status Q3Win32Storage_Set (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3StorageObject storage,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const HANDLE hFile);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=6081"> </A><TT CLASS="cv">storage</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=2526"> </A>A Windows storage object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=6090"> </A><TT CLASS="cv">hFile</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=2451"> </A>A handle to a file.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=2535"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=2536"> </A>The <TT CLASS="cv">Q3Win32Storage_Set</TT> function sets the file associated with the Windows storage object specified by the <TT CLASS="cv">storage</TT> parameter to the file specified by the <TT CLASS="cv">hFile</TT> parameter.<TT CLASS="cv"></TT><A NAME="marker=2335"> </A><A NAME="marker=2336"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>