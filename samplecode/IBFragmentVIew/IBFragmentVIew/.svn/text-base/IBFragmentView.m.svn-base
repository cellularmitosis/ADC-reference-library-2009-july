//
//  IBFragmentViewPluginWidget.m
//  IBFragmentViewPlugin
//
//  Created by Jonathan Hess on 7/17/06.
//  Copyright __MyCompanyName__ 2006 . All rights reserved.
//

#import "IBFragmentView.h"
#import "IBFragment.h"

static NSBezierPath *BezierPathWithRoundedRect(NSRect rect, CGFloat cornerRadius) {
    NSBezierPath *path = [NSBezierPath bezierPath];
    if (!NSIsEmptyRect(rect)) {
        if (cornerRadius > 0.0) {
            // Clamp radius to be no larger than half the rect's width or height.
            float clampedRadius = MIN(cornerRadius, 0.5 * MIN(rect.size.width, rect.size.height));
            
            NSPoint topLeft = NSMakePoint(NSMinX(rect), NSMaxY(rect));
            NSPoint topRight = NSMakePoint(NSMaxX(rect), NSMaxY(rect));
            NSPoint bottomRight = NSMakePoint(NSMaxX(rect), NSMinY(rect));
            
            [path moveToPoint:NSMakePoint(NSMidX(rect), NSMaxY(rect))];
            [path appendBezierPathWithArcFromPoint:topLeft     toPoint:rect.origin radius:clampedRadius];
            [path appendBezierPathWithArcFromPoint:rect.origin toPoint:bottomRight radius:clampedRadius];
            [path appendBezierPathWithArcFromPoint:bottomRight toPoint:topRight    radius:clampedRadius];
            [path appendBezierPathWithArcFromPoint:topRight    toPoint:topLeft     radius:clampedRadius];
            [path closePath];
        } else {
            // When radius == 0.0, this degenerates to the simple case of a plain rectangle.
            [path appendBezierPathWithRect:rect];
        }
    }
    return path;
}

@implementation IBFragmentView
+ (void)initialize {
    if (self == [IBFragmentView class]) {
        [self setKeys:[NSArray arrayWithObjects:@"fragments", nil] triggerChangeNotificationsForDependentKey:@"fragmentCount"];
    }
}

- (id)initWithFrame:(NSRect)frame {
    if ((self = [super initWithFrame:frame])) {
        fragments = [[NSMutableArray alloc] init];
        IBFragment *fragment = [[[IBFragment alloc] init] autorelease];
        [fragment setTitle:@"Fragment"];
        [self addFragment:fragment];
    }
    return self;
}

- (id)initWithCoder:(NSCoder *)coder {
    if ((self = [super initWithCoder:coder])) {
        fragments = [[coder decodeObjectForKey:@"fragments"] mutableCopy];
    }
    return self;
}

- (void)encodeWithCoder:(NSCoder *)coder {
    [super encodeWithCoder:coder];
    [coder encodeObject:[self fragments] forKey:@"fragments"];
}

- (void)dealloc {
    [fragments release];
    [super dealloc];
}

#pragma mark - Geometry
- (BOOL)isFlipped {
    return YES;
}

- (CGFloat)idealWidth {
    CGFloat idealWidth = 0.0f;
    for(IBFragment *fragment in [self fragments]) {
        idealWidth += [fragment idealSize].width;
    }
    return idealWidth;
}

- (NSArray *)calculateFragmentRects {
    CGFloat idealWidth = [self idealWidth];
    NSSize actualSize = [self bounds].size;
    NSArray *idealWidths = [self valueForKeyPath:@"fragments.idealWidth"];
    
    NSMutableArray *layoutRects = [NSMutableArray array];
    CGFloat x = 0.0f;
    int fragmentIndex = 0;
    for(IBFragment *fragment in [self fragments]) {
        NSRect layoutRect = NSMakeRect(x, 0, 0, 0);
        float percentOfIdeal = [[idealWidths objectAtIndex:fragmentIndex] floatValue] / idealWidth;
        layoutRect.size.width = floor(percentOfIdeal * actualSize.width);
        layoutRect.size.height = actualSize.height;
        x += layoutRect.size.width;
        if (fragment == [[self fragments] lastObject]) {
            layoutRect.size.width += (actualSize.width - x);
        }
        [layoutRects addObject:[NSValue valueWithRect:layoutRect]];
        fragmentIndex += 1;
    }
    return layoutRects;
}

- (void)invalidateLayout {
    [self setNeedsDisplay:YES];
}

#pragma mark - Fragment Management
- (NSArray *)fragments {
    return [[fragments copy] autorelease];
}

- (void)setFragments:(NSArray *)newFragments {
    if (fragments != newFragments) {
        for(IBFragment *fragment in [[[self fragments] copy] autorelease]) {
            [self removeFragment:fragment];
        }
        for(IBFragment *fragment in newFragments) {
            [self addFragment:fragment];
        }
    }
}

- (void)setFragmentCount:(NSInteger)fragmentCount {
    while ([fragments count] > fragmentCount) {
        [self removeFragment:[fragments lastObject]];
    }
    while ([fragments count] < fragmentCount) {
        IBFragment *fragment = [[[IBFragment alloc] init] autorelease];
        [fragment setTitle:@"Fragment"];
        [self addFragment:fragment];
    }    
}

- (NSInteger)fragmentCount {
    return [fragments count];
}

- (void)removeFragment:(IBFragment *)fragment {
    NSAssert([fragments containsObject:fragment], @"Illegal fragment");
    [self willChangeValueForKey:@"fragments"];
    [fragment setFragmentView:nil];
    [fragments removeObject:fragment];
    [self invalidateLayout];
    [self didChangeValueForKey:@"fragments"];
}

- (void)addFragment:(IBFragment *)fragment {
    [self insertFragment:fragment atIndex:[self fragmentCount]];
}

- (void)insertFragment:(IBFragment *)fragment atIndex:(int)index {
    [self willChangeValueForKey:@"fragments"];
    [fragments insertObject:fragment atIndex:index];
    [fragment setFragmentView:self];
    [self invalidateLayout];
    [self didChangeValueForKey:@"fragments"];
}

- (void)drawRect:(NSRect)rect {
    NSArray *fragmentRects = [self calculateFragmentRects];
    NSInteger fragmentIndex = 0;
    NSBezierPath *borderPath = BezierPathWithRoundedRect([self bounds], [self bounds].size.height / 2);
    [[NSColor whiteColor] set];
    [borderPath stroke];
    [borderPath addClip];
    [[[NSColor blackColor] colorWithAlphaComponent:0.25f] set];
    [borderPath fill];
    for(IBFragment *fragment in [self fragments]) {
        NSRect fragmentRect = [[fragmentRects objectAtIndex:fragmentIndex++] rectValue];
        [fragment drawInRect:fragmentRect];
        if (fragment != [[self fragments] lastObject]) {
            [[NSColor whiteColor] set];
            NSBezierPath *line = [NSBezierPath bezierPath];
            [line moveToPoint:NSMakePoint(NSMaxX(fragmentRect), NSMaxY(fragmentRect))]; 
            [line lineToPoint:NSMakePoint(NSMaxX(fragmentRect), NSMinY(fragmentRect))]; 
            [line stroke];
        }
    }
}
@end
