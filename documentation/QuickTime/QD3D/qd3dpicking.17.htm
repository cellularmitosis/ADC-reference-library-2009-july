<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Managing Pick Objects</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=3699"> </A>Managing Pick Objects</H1><P CLASS="T1.Text1"><A NAME="pgfId=3704"> </A><A NAME="marker=3700"> </A>QuickDraw&nbsp;3D provides a number of general routines for managing pick objects of any kind.</P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3705"> </A>Q3Pick_GetType</H2><P CLASS="T1.Text1"><A NAME="pgfId=3707"> </A><A NAME="marker=3706"> </A><A NAME="marker=1260"> </A>You can use the <TT CLASS="cv">Q3Pick_GetType</TT> function to get the type of a pick object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=16759"> </A>TQ3ObjectType Q3Pick_GetType (TQ3PickObject pick);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16761"> </A><TT CLASS="cv">pick</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3709"> </A>A pick object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3710"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3711"> </A>The <TT CLASS="cv">Q3Pick_GetType</TT> function returns, as its function result, the type of the pick object specified by the <TT CLASS="cv">pick</TT> parameter. The types of pick objects currently supported by QuickDraw&nbsp;3D are defined by these constants:<A NAME="marker=3715"> </A></P><CODE CLASS="Cv.Code"><A NAME="pgfId=16772"> </A>kQ3PickTypeWindowPoint<BR>kQ3PickTypeWindowRect<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=3717"> </A>If the specified pick object is invalid or is not one of these types, <TT CLASS="cv">Q3Pick_GetType</TT> returns the value <TT CLASS="cv">kQ3ObjectTypeInvalid</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3718"> </A>Q3Pick_GetData</H2><P CLASS="T1.Text1"><A NAME="pgfId=3720"> </A><A NAME="marker=3719"> </A><A NAME="marker=1275"> </A>You can use the <TT CLASS="cv">Q3Pick_GetData</TT> function to get the basic data associated with a pick object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=16778"> </A>TQ3Status Q3Pick_GetData (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3PickObject pick, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3PickData *data);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16780"> </A><TT CLASS="cv">pick</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3722"> </A>A pick object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16789"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3723"> </A>On entry, a pointer to a pick data structure.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3724"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3725"> </A>The <TT CLASS="cv">Q3Pick_GetData</TT> function returns, through the <TT CLASS="cv">data</TT> parameter, basic information about the pick object specified by the <TT CLASS="cv">pick</TT> parameter. See <A HREF="qd3dpicking.11.htm#41781" CLASS="XRef">&quot;Pick Data Structure&quot;</A> for a description of a pick data structure. Your application is responsible for allocating memory for the pick data structure before calling <TT CLASS="cv">Q3Pick_GetData</TT> and for disposing of that memory when you're finished using that structure.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3729"> </A>Q3Pick_SetData</H2><P CLASS="T1.Text1"><A NAME="pgfId=3731"> </A><A NAME="marker=3730"> </A><A NAME="marker=1288"> </A>You can use the <TT CLASS="cv">Q3Pick_SetData</TT> function to set the basic data associated with a pick object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=16800"> </A>TQ3Status Q3Pick_SetData (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3PickObject pick, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3PickData *data);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16802"> </A><TT CLASS="cv">pick</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3733"> </A>A pick object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16811"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3734"> </A>A pointer to a pick data structure.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3735"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3736"> </A>The <TT CLASS="cv">Q3Pick_SetData</TT> function sets the data associated with the pick object specified by the <TT CLASS="cv">pick</TT> parameter to the data specified by the <TT CLASS="cv">data</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3737"> </A>Q3Pick_GetVertexTolerance</H2><P CLASS="T1.Text1"><A NAME="pgfId=3739"> </A><A NAME="marker=3738"> </A><A NAME="marker=1298"> </A>You can use the <TT CLASS="cv">Q3Pick_GetVertexTolerance</TT> function to get the current vertex tolerance of a pick object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=16822"> </A>TQ3Status Q3Pick_GetVertexTolerance (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3PickObject pick, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float *vertexTolerance);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16824"> </A><TT CLASS="cv">pick</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3741"> </A>A pick object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16833"> </A><TT CLASS="cv">vertexTolerance</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3742"> </A> On exit, the current vertex tolerance of the specified pick object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3743"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3744"> </A>The <TT CLASS="cv">Q3Pick_GetVertexTolerance</TT> function returns, in the <TT CLASS="cv">vertexTolerance</TT> parameter, the current vertex tolerance of the pick object specified by the <TT CLASS="cv">pick</TT> parameter. If the specified pick object does not support a vertex tolerance, <TT CLASS="cv">Q3Pick_GetVertexTolerance</TT> generates an error. Tolerances are discussed in <A HREF="qd3dpicking.4.htm#26021" CLASS="XRef">&quot;Hit Identification&quot;</A>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3745"> </A>Q3Pick_SetVertexTolerance</H2><P CLASS="T1.Text1"><A NAME="pgfId=3747"> </A><A NAME="marker=3746"> </A><A NAME="marker=1308"> </A>You can use the <TT CLASS="cv">Q3Pick_SetVertexTolerance</TT> function to set the vertex tolerance of a pick object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=16849"> </A>TQ3Status Q3Pick_SetVertexTolerance (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3PickObject pick, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float vertexTolerance);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16851"> </A><TT CLASS="cv">pick</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3749"> </A>A pick object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16860"> </A><TT CLASS="cv">vertexTolerance</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3750"> </A> The desired vertex tolerance of the specified pick object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3751"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3752"> </A>The <TT CLASS="cv">Q3Pick_SetVertexTolerance</TT> function sets the vertex tolerance of the pick object specified by the <TT CLASS="cv">pick</TT> parameter to the tolerance specified by the <TT CLASS="cv">vertexTolerance</TT> parameter. If the specified pick object does not support a vertex tolerance, <TT CLASS="cv">Q3Pick_SetVertexTolerance</TT> generates an error. Tolerances are discussed in <A HREF="qd3dpicking.4.htm#26021" CLASS="XRef">&quot;Hit Identification&quot;</A>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3753"> </A>Q3Pick_GetEdgeTolerance</H2><P CLASS="T1.Text1"><A NAME="pgfId=3755"> </A><A NAME="marker=3754"> </A><A NAME="marker=1318"> </A>You can use the <TT CLASS="cv">Q3Pick_GetEdgeTolerance</TT> function to get the current edge tolerance of a pick object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=16872"> </A>TQ3Status Q3Pick_GetEdgeTolerance (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3PickObject pick, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float *edgeTolerance);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16874"> </A><TT CLASS="cv">pick</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3757"> </A>A pick object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16883"> </A><TT CLASS="cv">edgeTolerance</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3758"> </A> On exit, the current edge tolerance of the specified pick object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3759"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3760"> </A>The <TT CLASS="cv">Q3Pick_GetEdgeTolerance</TT> function returns, in the <TT CLASS="cv">edgeTolerance</TT> parameter, the current edge tolerance of the pick object specified by the <TT CLASS="cv">pick</TT> parameter. If the specified pick object does not support an edge tolerance, <TT CLASS="cv">Q3Pick_GetEdgeTolerance</TT> generates an error. Tolerances are discussed in <A HREF="qd3dpicking.4.htm#26021" CLASS="XRef">&quot;Hit Identification&quot;</A>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3761"> </A>Q3Pick_SetEdgeTolerance</H2><P CLASS="T1.Text1"><A NAME="pgfId=3763"> </A><A NAME="marker=3762"> </A><A NAME="marker=1328"> </A>You can use the <TT CLASS="cv">Q3Pick_SetEdgeTolerance</TT> function to set the edge tolerance of a pick object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=16895"> </A>TQ3Status Q3Pick_SetEdgeTolerance (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3PickObject pick, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float edgeTolerance);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16897"> </A><TT CLASS="cv">pick</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3765"> </A>A pick object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16906"> </A><TT CLASS="cv">edgeTolerance</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3766"> </A> The desired edge tolerance of the specified pick object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3767"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3768"> </A>The <TT CLASS="cv">Q3Pick_SetEdgeTolerance</TT> function sets the edge tolerance of the pick object specified by the <TT CLASS="cv">pick</TT> parameter to the tolerance specified by the <TT CLASS="cv">edgeTolerance</TT> parameter. If the specified pick object does not support an edge tolerance, <TT CLASS="cv">Q3Pick_SetEdgeTolerance</TT> generates an error. Tolerances are discussed in <A HREF="qd3dpicking.4.htm#26021" CLASS="XRef">&quot;Hit Identification&quot;</A>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=10816"> </A>Q3Pick_GetPickDetailValidMask</H2><P CLASS="T1.Text1"><A NAME="pgfId=10910"> </A>You can use the Q3Pick_GetPickDetailValidMask function to return a mask designating the available <TT CLASS="cv">TQ3PickDetail</TT> information. It should be followed with a call to <TT CLASS="cv">Q3Pick_GetPickDetailData</TT> for each <TT CLASS="cv">pickDetail</TT> bit set in the returned mask. </P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=16918"> </A>TQ3Status Q3Pick_GetPickDetailValidMask (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3PickObject pick,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long index,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3PickDetail *pickDetailValidMask);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16920"> </A>pick</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10819"> </A>A pick object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16929"> </A>index</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10820"> </A>An index into a hit list.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16938"> </A>pickDetailValidMask</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10821"> </A> 	The detail mask. For mask values, see <A HREF="qd3dpicking.6.htm#41784" CLASS="XRef">&quot;Hit Information&quot;</A>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=10822"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=10928"> </A>Q3Pick_GetPickDetailValidMask returns, in the pickDetailValidMask parameter, a mask designating available pick detail data for the pick object pick and hit index index. If a bit in <TT CLASS="cv">pickDetailValidMask</TT> is 0, it means that either the pick detail type wasn't specified when the pick was created, or if it was specified then it was meaningless for the type of pick object or the geometry intersected.</P><P CLASS="T1.Text1"><A NAME="pgfId=10995"> </A>The <TT CLASS="cv">index</TT> parameter is a zero-based value within the maximum number of hits obtained by <TT CLASS="cv">callingQ3Pick_GetNumHits</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=10825"> </A>Q3Pick_GetPickDetailData</H2><P CLASS="T1.Text1"><A NAME="pgfId=10826"> </A>You can use the Q3Pick_GetPickDetailData function to obtain pick detail data for a given bit out of the mask returned by Q3Pick_GetPickDetailValidMask.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=16950"> </A>TQ3Status Q3Pick_GetPickDetailData (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3PickObject pick,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long index,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3PickDetail pickDetailValue,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void *detailData);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16952"> </A>pick</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10940"> </A>A pick object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16961"> </A>index</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10941"> </A>An index into a hit list.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16970"> </A>pickDetailValue</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10829"> </A> 	A single-bit mask.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16980"> </A>detailData</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10884"> </A>The returned detail pick data.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=10831"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=10832"> </A>The Q3Pick_GetPickDetailData function returns, in the detailData parameter, the data corresponding to a pickDetailValue mask for the pick object pick and hit index index. See <A HREF="qd3dpicking.15.htm#20726" CLASS="XRef">&quot;Hit Detail Data&quot;</A> for descriptions of the information retrurned.</P><P CLASS="T1.Text1"><A NAME="pgfId=11013"> </A>The value of <TT CLASS="cv">pickDetailValue</TT> can be only one bit from the set of possible <TT CLASS="cv">TQ3PickDetailMasks</TT> values returned by <TT CLASS="cv">Q3Pick_GetPickDetailValidMask</TT>. <TT CLASS="cv">TQ3PickDetailMasks</TT> values may not be combined using <TT CLASS="cv">OR</TT>.</P><P CLASS="T1.Text1"><A NAME="pgfId=11054"> </A>Upon successful completion, Q3Pick_GetPickDetailData returns a function result of <TT CLASS="cv">kQ3Success</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=10834"> </A>Q3HitPath_EmptyData</H2><P CLASS="T1.Text1"><A NAME="pgfId=10835"> </A>You must use the Q3HitPath_EmptyData function to dispose of the path data that QuickDraw&nbsp;3D allocated internally as the result of a previous call to <TT CLASS="cv">Q3Pick_GetPickDetailData</TT>.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=16991"> </A>TQ3Status Q3HitPath_EmptyData (TQ3HitPath *hitPath);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=16993"> </A>hitPath</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10837"> </A>A hit path.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=10840"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=10841"> </A>The Q3HitPath_EmptyData function disposes of path data allocated internally as the result of a previous call to <TT CLASS="cv">Q3Pick_GetPickDetailData</TT>. It returns <TT CLASS="cv">kQ3Success</TT> if it completes successfully.</P><P CLASS="T1.Text1"><A NAME="pgfId=10814"> </A>It is the responsibility of the application to dispose of the path data using <TT CLASS="cv">Q3HitPath_EmptyData</TT> and the <TT CLASS="cv">object</TT> and <TT CLASS="cv">shapePart</TT> references using <TT CLASS="cv">Q3Object_Dispose</TT>; otherwise undisposed memory or objects will be leaked.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3769"> </A>Q3Pick_GetNumHits</H2><P CLASS="T1.Text1"><A NAME="pgfId=3771"> </A><A NAME="marker=3770"> </A><A NAME="marker=1338"> </A>You can use the <TT CLASS="cv">Q3Pick_GetNumHits</TT> function to get the number of hits in the hit list of a pick object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=17004"> </A>TQ3Status Q3Pick_GetNumHits (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3PickObject pick, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *numHits);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=17006"> </A><TT CLASS="cv">pick</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3773"> </A>A pick object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=17015"> </A><TT CLASS="cv">numHits</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3774"> </A>On exit, the number of items in the hit list of the specified pick object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3775"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3776"> </A>The <TT CLASS="cv">Q3Pick_GetNumHits</TT> function returns, in the <TT CLASS="cv">numHits</TT> parameter, the number of items in the hit list associated with the pick object specified by the <TT CLASS="cv">pick</TT> parameter. This number never exceeds the maximum number of items specified in the pick object's data structure.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3798"> </A>Q3Pick_EmptyHitList</H2><P CLASS="T1.Text1"><A NAME="pgfId=3800"> </A><A NAME="marker=3799"> </A><A NAME="marker=1373"> </A>You can use the <TT CLASS="cv">Q3Pick_EmptyHitList</TT> function to empty a pick object's hit list.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=17026"> </A>TQ3Status Q3Pick_EmptyHitList (TQ3PickObject pick);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=17028"> </A><TT CLASS="cv">pick</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3802"> </A>A pick object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3803"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3807"> </A>The <TT CLASS="cv">Q3Pick_EmptyHitList</TT> function disposes of all QuickDraw&nbsp;3D-allocated memory occupied by the hit list associated with the pick object specified by the <TT CLASS="cv">pick</TT> parameter. (This memory is also disposed of when the specified pick object is disposed of.) <TT CLASS="cv">Q3Pick_EmptyHitList</TT> also sets the hit count of the specified pick object to 0.<A NAME="marker=3808"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>