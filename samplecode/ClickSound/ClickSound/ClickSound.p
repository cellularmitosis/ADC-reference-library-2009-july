PROGRAM EngineSound;{$Load Blankload}USES	Sound,Events,ToolUtils,Quickdraw,SegLoad,Memtypes,OSIntf,ToolIntf,PackIntf,Script;PROCEDURE _DataInit;	EXTERNAL;VAR		MyChannel : SndChannelPtr;		MyCmd : SndCommand;		MyEvent : EventRecord;		err, i : Integer;		quit : boolean;		theKey : char;{------------------------------------------------------------------------------------}BEGIN 							 {main PROGRAM}		UnLoadSeg(@_DataInit);			   {remove data initialization code before any allocations}	InitGraf(@thePort); 			   {initialize QuickDraw}	FlushEvents(everyEvent, 0); 	   {call OS Event Mgr to discard any previous events}	FlushEvents(everyEvent, 0); 	   {call OS Event Mgr to discard any previous events}	InitWindows;					   {initialize Window Manager}	InitMenus;						   {initialize Menu Manager}	TEInit; 						   {initialize TextEdit}	InitDialogs(NIL);				   {initialize Dialog Manager}	InitCursor; 					   {call QuickDraw to make cursor (pointer) an arrow}	quit := false;		MyChannel := nil;	err := SndNewChannel (MyChannel, noteSynth, initChan0,nil);	if err = noerr then	begin				MyCmd.cmd := timbreCmd;		MyCmd.param1 := 250;		MyCmd.param2 := 0;		err := SndDoCommand (MyChannel, MyCmd, false);		MyCmd.cmd := ampCmd;		MyCmd.param1 := 255;		MyCmd.param2 := 0;		err := SndDoCommand (MyChannel, MyCmd, false);		repeat			repeat until GetNextEvent (EveryEvent,MyEvent);			case MyEvent.what of			keyDown : Begin							theKey := char(BitAnd (MyEvent.message,CharCodeMask));							if theKey = 'q' then quit := true;					  End;			end; {case}						MyCmd.cmd := noteCmd;			MyCmd.param1 := 30;			MyCmd.param2 := $FF000000 + 83;			err := SndDoCommand (MyChannel, MyCmd, false);			MyCmd.cmd := quietCmd;			MyCmd.param1 := 0;			MyCmd.param2 := 0;			err := SndDoCommand (MyChannel, MyCmd, false);		until quit;				err := SndDisposeChannel (MyChannel, false);			end;END.