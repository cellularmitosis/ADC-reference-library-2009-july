<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE> Creating and Configuring a Draw Context</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="H2.Heading2"><A NAME="pgfId=43672"> </A><A NAME="18059"> </A>Creating and Configuring a Draw Context</H1><P CLASS="T1.Text1"><A NAME="pgfId=44647"> </A><A NAME="marker=51447"> </A>Once you've initialized a virtual device and selected a drawing engine capable of drawing to that device, you can call the <TT CLASS="cv">QADrawContextNew</TT> function to create a new draw context. You pass the device and engine to that function, along with a drawing rectangle, a clipping region, and a set of draw context flags. The flags specify features of the new draw context. <A HREF="qd3dravedriver.8.htm#31182" CLASS="XRef">Listing&nbsp;7</A> illustrates how to create a double-buffered draw context with z buffering.</P><P CLASS="L.Listing"><A NAME="pgfId=45216"> </A>Listing&nbsp;7<A NAME="31182"> </A>Creating a draw context</P><CODE CLASS="Cv.Code"><A NAME="pgfId=63974"> </A>TQADrawContext&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*myDrawContext;<BR><BR>if (QADrawContextNew(&amp;myDevice, &amp;myRect, &amp;myClip, myEngine, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kQAContext_DoubleBuffer, &amp;myDrawContext) != kQANoErr) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;/*Error! Could not create new draw context.*/<BR>}<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=45231"> </A>If <TT CLASS="cv">QADrawContextNew</TT> succeeds, it returns the result code <TT CLASS="cv">kQANoErr</TT> and sets the <TT CLASS="cv">myDrawContext</TT> parameter to the new draw context. Otherwise, if an error occurs, <TT CLASS="cv">QADrawContextNew</TT> returns some other result code and sets the <TT CLASS="cv">myDrawContext</TT> parameter to the value <TT CLASS="cv">NULL</TT>.<A NAME="marker=51448"> </A></P><P CLASS="Note"><A NAME="pgfId=45270"> </A>When you are finished using the new draw context, you should free the memory and other resources it uses by calling the <TT CLASS="cv">QADrawContextDelete</TT> function. </P><P CLASS="T1.Text1"><A NAME="pgfId=45232"> </A>QuickDraw&nbsp;3D RAVE does not provide a function to reposition an existing draw context. If a window associated with a draw context is moved on the screen, you need to delete the existing draw context and create a new draw context at the new location. Similarly, QuickDraw&nbsp;3D RAVE does not provide a function to change the clipping region of a draw context. If you want to change a clipping region, you need to delete the existing draw context and create a new draw context with the desired clipping region.<A NAME="marker=51449"> </A></P><P CLASS="T1.Text1"><A NAME="pgfId=45308"> </A><A NAME="marker=51450"> </A>However, you can change a number of other features of a draw context without having to delete an existing draw context and create a new one. The features you can change are indicated by the state variables of the draw context. For example, to change the background color of a draw context to opaque black, you can use the code shown in <A HREF="qd3dravedriver.8.htm#24330" CLASS="XRef">Listing&nbsp;8</A>.<A NAME="marker=52225"> </A></P><P CLASS="L.Listing"><A NAME="pgfId=45323"> </A>Listing&nbsp;8<A NAME="24330"> </A>Setting a draw context state variable</P><CODE CLASS="Cv.Code"><A NAME="pgfId=63978"> </A>void MySetBackgroundToBlack (TQADrawContext *drawContext);<BR>{<BR>&nbsp;&nbsp;&nbsp;&nbsp;QASetFloat(drawContext, kQATag_ColorBG_a, 1.0);<BR>&nbsp;&nbsp;&nbsp;&nbsp;QASetFloat(drawContext, kQATag_ColorBG_r, 0.0);<BR>&nbsp;&nbsp;&nbsp;&nbsp;QASetFloat(drawContext, kQATag_ColorBG_g, 0.0);<BR>&nbsp;&nbsp;&nbsp;&nbsp;QASetFloat(drawContext, kQATag_ColorBG_b, 0.0);<BR>}<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=45286"> </A><A NAME="marker=63980"> </A>The <TT CLASS="cv">QASetFloat</TT> function sets a draw context state variable that has a floating-point value. QuickDraw&nbsp;3D RAVE provides functions to get and set state variables with floating-point, long integer, or pointer values.</P><P CLASS="Note"><A NAME="pgfId=45360"> </A>See <A HREF="qd3dravedriver.1a.htm#24990" CLASS="XRef">&quot;Tags for State Variables&quot;</A>, for a complete description of the available draw context state variables. </P><P CLASS="T1.Text1"><A NAME="pgfId=45374"> </A>The <TT CLASS="cv">QASetFloat</TT> function is defined using a C language macro:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=63984"> </A>#define QASetFloat(drawContext,tag,newValue) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;setFloat (drawContext,tag,newValue)<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=45381"> </A>During compilation, the <TT CLASS="cv">QASetFloat</TT> call is replaced by code that directly calls the drawing engine's floating-point setting method. This allows you to achieve the highest possible performance when configuring a draw context.<A NAME="marker=51451"> </A></P><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>