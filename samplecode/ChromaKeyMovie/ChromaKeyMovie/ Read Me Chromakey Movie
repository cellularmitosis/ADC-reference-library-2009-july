Chromakey MovieWritten by:	Jason Hodges-Harris,  Developer Technical Support	Copyright:	© 1995 by Apple Computer, Inc. All rights reserved.Version History1.0d1   -   09/--/95   JHH.   Initial release version.What it doesChromakey Movie is a simple application which is designed to show alternative approaches to removing a color from a QuickTime movie while it is playing and allowing a separate image to be displayed in the removed regions. It demonstrates several features available in QuickTime and Color QuickDraw:Color Quickdraw¥   The use of GWorlds to store the current QuickTime movie frame, the background image and the composite (movie frame and background) image.¥   Various arithmetic transfer modes with CopyBits() to manipulate image data between offscreen graphics ports and a visible window. QuickTime¥   The playing of a movie into an offscreen port and transfer to a visible window.¥   The use of a modifier track to provide additional information as to the display characteristics of the video tracks in the movie.¥   Operation of the SetVideoMediaGraphicsMode() function to provide a Chromakeying effect. ¥   The use of the movie controller to manipulate the playback of the movie.Additional features demonstrated¥   Checking in a PowerPC native application if a system feature is available from a weak linked shared library as Gestalt() doesn't always provide the correct response.¥   The implementation of the Dialog manager GetStdFilterProc() and SetDialogDefaultItem() functions to provide default alert and warning dialogs with highlighting of the default button. These functions are not documented within Inside Macintosh, but have been available since System 7.0 and are fully explained in the Technical Note "Toolbox - TB 37 - Pending Update Perils". How to use "Chromakey Movie"After launching the application, the menubar contains four titles:  File, Edit, Keying Mode and Movie Options.File menu.¥   Open. This opens a QuickTime movie file, and displays it in a window together with a standard movie controller bar. As only one open window is permitted in the application, this menu item is disabled until the window is closed.¥   Close. This closes the movie window and therefore is only enabled when a window is visible.¥   Quit. When selected exits the application.Edit menu.All of these menu items are disabled as the application does not currently support these operations.Keying Mode menu.¥   Transparent Color. This uses the standard color picker to select the color to remove either from the QuickTime movie file when in the foreground or the background image when the movie is in the background. This allows regions of the background to become visible when the movie is in the foreground and regions of the movie to become visible when the movie is in the background.¥   Movie in Background. Sends the Quicktime movie behind the background image.¥   Movie in Foreground. Places the QuickTime movie in the foreground.¥   Transparent Color Transfer. This selects a transfer method which performs the following steps:            (i)   Creates a GWorld and by calling SetMovieGWorld(), draws the QuickTime movie into the offscreen GWorld.            (ii)  Using CopyBits() set to the transparent transfer mode, merges the current movie frame and a background                   image together before transferring the result into a visible window.¥   Graphix Mode. This option calls SetVideoMediaGraphicsMode() to sets all video track media to the transparent transfer mode  with the key color selected in the Transparent Color menu option. See Inside Macintosh QuickTime page 2-287 for further information about this function.¥   Modifier Track. This function is specific to versions of QuickTime from 2.1 and this menu item is disabled  on Macintoshes running earlier versions. It provides similar functionality to the method implemented in the Graphix Mode menu item. See the reference documentation supplied with QuickTime 2.1 for further details on modifier tracks.Movie Options menu.¥   Play Every Frame. Selecting this option forces the movie controller to play each frame of the movie however slowly. As a        side effect, this causes any audio track to be disabled.¥   Loop movie. Selecting this option will continually loop the playback of the movie.Building the application"Chromakey Movie" is provided with project files and make scripts for 68k and Power PC native versions in the following environments:	Metrowerks CodeWarrior 7	Symantec C++ 8.0.1	Symantec 7.0.4	MPW E.T.O. #18- 'Latest MPW': MPW C, PPCC, Symantec C++ for MPW and MrC.The Symantec environments are using a slightly older version of the Universal Interfaces than MPW and CodeWarrior. You will need to use a later version of the Universal Interfaces than is provided with the Symantec products, or make some changes to the source code. To change the Universal Interfaces, simply place brackets around the existing folder and place the folder containing the later version into the same folder as the existing ones. The brackets will prevent the development environment from using the files contained within the old folder.Two MPW make files are included: to build a 68K and a 'fat' version using 'Latest MPW'. The 'Latest MPW' set up defaults to using the MPW C and PPCC compilers, but you can change the {C} and {PPCC} variables to SC and MrC if you have these compilers installed. You will need to alter the compiler options as appropriate and use the 'Latest MPW' interfaces and libraries rather than SCLibraries and SCIncludes. To build with 'PreRelease MPW' create a make file using 'Create Build Commands' and ensure that 'qd' is defined in all cases, since the PreRelease MPW Libraries do not define 'qd'. Please note, that this application requires the universal headers and shared library (for Power PC build) supplied with  QuickTime 2.1. These can be found within the Interfaces folder of the QuickTime 2.1 developer's kit.Application Filesdoevent.cp¥   Handles the processing of application events.eventloop.cp¥   Performs the program's wait next event loop.menu.cp¥   Handles the processing of the menu options. This includes initialisation, calling application functions to perform the selected options and enabling/disabling menu items.start.cp¥   Performs the initialisation of the application setting the default values for the global variables, initialising the toolbox managers, testing for the availability and version of QuickTime and calling the main application loop.Test.cp¥   This contains all of the files which handle the three alternative methods of producing the chromakeying effect on the movie.windows.cp¥   This performs the functions relating to opening, dragging, closing and updating the movie window and also the display of the generic alert dialogs.ChromaKeyMovie.r¥   Contains information to specific to MPW to enable the Rez tool to append the ChromaKeyMovie.rsrc file.ChromaKeyMovie.rsrc¥   This file contains the application resources.ChromaKeyMovie.app.h¥   The application's constants and window document structure are defined within this file.ChromaKeyMovie.protos.h¥   The application's function prototypes for all of the source code .cp files are defined within this file.How the interesting functions operate and window data storage format Transparent Color Transfer mode.The main work for this function is supplied by the TransparentKeyMode() function, which is located in the moviecontrol.c file. When this transfer mode is selected, the QuickTime movie is redirected into an offscreen GWorld, after which the background image and the movie are composited together in a separate GWorld before the final frame is transferred to the screen. The following code is taken from the TransparentKeyMode() function:¥	First the background image is transferred into a separate GWorld for compositing. This image is held in a separate GWorld and by keeping it in memory, reduces the overhead of constantly locating and reloading the image for each frame. In this application the background image is automatically resized to fit the movie GWorld and therefore distorts the background image.  SetGWorld(gBackGroundPort,nil);	RGBForeColor(&kRGBBlack);	RGBBackColor(&kRGBWhite);	CopyBits((BitMap*)(*gBackGndPictPM),		(BitMap*)(*gBackGndPixmap),		&(*gBackGroundPicture).portRect,&theRect,srcCopy,nil);¥	A test is performed on whether the movie frame is displayed in front or behind the background image. If true the next section sets the GWorld containing the movie frame background color to that required as the keying color and then using CopyBits(), transfers the background image into that GWorld. The composite image is then transferred to the visible window using CopyBits() set to the srcCopy mode.In this application if the key color is set to white, will produce a black check pattern with the movie displayed in the portions of the background image which are white.  		SetGWorld(gOffscreenPort,nil);		RGBForeColor(&kRGBBlack);		RGBBackColor(&gKeyColor);		CopyBits((BitMap*)(*gBackGndPixmap),			(BitMap*)(*gMoviePixmap),			&theRect,&theRect,transparent,nil);		SetGWorld((CWindowPtr)theWindow,oldDevice);		RGBForeColor(&kRGBBlack);		RGBBackColor(&kRGBWhite);		CopyBits((BitMap*)(*gMoviePixmap),			(BitMap*)&((*theWindow).portBits),			&theRect,&theRect,srcCopy,nil);	¥ If the movie ius set to display in front of the background image then the effect produced is dependent on the movie being played. This transfers the GWorld containing the movie frame onto the background image and transfers the composite image to the screen. If the movie frame contains the same color at a given point as that of the key color, then this is replaced by the background image at the corresponding location.  SetGWorld(gBackGroundPort,nil);		RGBForeColor(&kRGBBlack);		RGBBackColor(&gKeyColor);		CopyBits((BitMap*)(*gMoviePixmap),			(BitMap*)(*gBackGndPixmap),			&theRect,&theRect,transparent,nil);		SetGWorld((CWindowPtr)theWindow,oldDevice);		RGBForeColor(&kRGBBlack);		RGBBackColor(&kRGBWhite);		CopyBits((BitMap*)(*gBackGndPixmap),			(BitMap*)&((*theWindow).portBits),			&theRect,&theRect,srcCopy,nil);Graphix Mode.This mode of operation is performed by the SetVideoMediaGraphicsMode() Movie Toolbox function. This functions by altering the operation of a track which contains video media.  The section of code below is called when this mode is selected and operates by stepping through all of the current movie's tracks and if it finds a video track alters the way that the media is displayed.		theTrackCount = GetMovieTrackCount((**theDocHndl).theMovie);		for (count=1;count <=theTrackCount;count++)  {   movieTrack = GetMovieIndTrack((**theDocHndl).theMovie,count);			theMedia = GetTrackMedia(movieTrack);   GetMediaHandlerDescription(theMedia,&theMediaType,nil,nil);			if (theMediaType == VideoMediaType)				if (SetVideoMediaGraphicsMode(GetMediaHandler(theMedia),        transparent,&gKeyColor))					DisplayAlert (rGenAlert,rErrMessages,1);  }Modifier Track mode.This chromakey mode is only available of Systems running Quicktime 2.1 or later as it relys of the use of modifier tracks. Essentially, it is a different method of implementing the Graphix Mode as intead of directly calling   SetVideoMediaGraphicsMode(), this method modifies the movie video track media to operate in the same way.This sets the modifier data structure.		theTrackCount = GetMovieTrackCount((**theDocHndl).theMovie);		theModifierStruct.graphicsMode = transparent;		theModifierStruct.opColor = gKeyColor;		theModifierTrack = GetMovieIndTrack((**theDocHndl).theMovie,theTrackCount+1);The tracks of the movie are then traversed and the first video track is altered to include a track reference to the modifier track.		for (count=1;count <=theTrackCount;count++)		{			theTrack = GetMovieIndTrack((**theDocHndl).theMovie,count);			theMedia = GetTrackMedia(theTrack);			GetMediaHandlerDescription(theMedia,&theMediaType,nil,nil);			if (theMediaType == VideoMediaType)			{				AddTrackReference(theTrack,theModifierTrack,								  kTrackModifierTypeGraphicsMode,&theTrackIndex);				count = theTrackCount;	// bump track count			}	An input map for the video media is created and the modifier track information added.		// create and add the input map			GetMediaInputMap(theMedia,&inputMap);			QTInsertChild( inputMap, kParentAtomIsContainer, kTrackModifierInput, theTrackIndex,				  0, 0, nil,&inputAtom);				  			QTInsertChild( inputMap, inputAtom, kTrackModifierType, 1, 0, 				   sizeof(kTrackModifierTypeGraphicsMode), &inputType, nil );				   			SetMediaInputMap(theMedia, inputMap );			QTDisposeAtomContainer(inputMap );			}struct MovieDoc{   MovieController		theController;   Movie            theMovie;   long             theModifierIndex;   FSSpec           theFileSpec;   short            theMovieResID;};typedef struct MovieDoc MovieDoc, *MovieDocPtr, **MovieDocHndl;The MovieDoc structure listed above and defined in the ChromaKeyMovie.app.h file is implemented within the application to store all of the movie specific information of a given window and is created within the OpenCWindow() function in the windows.cp file using the following code:theDocHndl = (MovieDocHndl)NewHandle(sizeof(MovieDoc));and the following code will retrieve this information from a given WindowPtr:theDocHndl = (MovieDocHndl)GetWRefCon(theWindow);The theMovie, theFileSpec and theMovieResID fields contain information specific to the movie displayed in the window and are filled within the LoadOneMovie() function defined in Test.cp, after the user selects a movie file.The theController field is stores a reference to the movie controller attached to the movie.The theModifierIndex field stores a reference to the modifier track and is used by the Modifier Track Keying Mode menu option. This is also specific to versions of QuickTime from 2.1.Further enhancements and improvements.Hopefully, this application will provide useful as a starting point for your experiments and I've listed below a few pointers where improvements and enhancements could be made.¥	The inclusion of a menu option to enable the user to select a point from the currently displayed movie frame as the color which is to be used for the Chromakey functions. ¥  An option to provide for the chromakeyed movie to be saved as a separate file thus enabling  processor intensive operations to be performed in non realtime on a wide range of Macintoshes with the final modified movie available for playback without the need to run the movie within the ChromaKeyMovie application.¥	Enhancement to the background image to allow for user selection of the background image. This can be further expanded to play multiple video tracks or movies layered over each other.¥   The use of a custom color search routine with the Transparent Color Transfer method to provide chroma keying on a color range centered around the selected color. As this would require additional processor cycles and will reduce the movies playback frame rate, this option would be of most use in conjunction with the second point. Jason Hodges-Harris, September 1995.© 1995 by Apple Computer, Inc. All rights reserved.