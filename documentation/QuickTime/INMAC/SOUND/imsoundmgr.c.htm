<!-- legacy work start --><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"        "http://www.w3.org/TR/html4/loose.dtd"><!-- legacy work end --><HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><TITLE> Allocating Sound Channels (deprecated)</title><!-- legacy work start -->        <META NAME="Generator" CONTENT="manual">        <META http-equiv="content-type" CONTENT="text/html;charset=utf-8">        <META NAME = "Copyright" CONTENT="Copyright 2007 Apple Inc. All Rights Reserved.">        <META NAME="IndexTitle" CONTENT="Sound Input Manager (Not Recommended)">        <meta name="xcode-display" content="render">        <LINK REL="stylesheet" TYPE="text/css" HREF="../../../Resources/CSS/frameset_styles.css"> <!-- before submitting, globally replace ".." with "developer.apple.com" -->        <script type="text/javascript" language="JavaScript" src="../../../Resources/JavaScript/page.js"></script><!-- legacy work end --></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><!-- QTnavbar start --><P><I>Inside Macintosh: Sound</I><P>| <A target="doc" HREF="imsoundmgr.b.htm">Previous</A> | <A target="doc" HREF="imsoundmgr.1.htm">Chapter contents</A> | <A target="doc" HREF="imsoundmgr.htm">Chapter top</A> | <A target="doc" HREF="imsoundmgr.b.htm">Section top</A> | <A target="doc" HREF="imsoundmgr.d.htm">Next</a> | <!-- QTnavbar end --><!-- legacy work start --><script type="text/javascript"> placeWatermark()</script><div style="width:100%; position:fixed;"><div align="center" id="watermark" style="position: relative; margin-left:auto; margin-right:auto; z-index:20; width:500px;"><div class="legacybox" style="position: relative;"><h1>Legacy Document<span class=closebutton><a href="javascript:closeWatermark()"><img src="../../../Resources/Images/closebutton.png" width="14" height="14" border="0" align="top" alt="close button"></a></span></h1><p><b>Important:</b><i>Sound Input Manager</i> is deprecated as of Mac OS X v10.5. For new audio development in Mac OS X, use Core Audio. See the <a href="http://developer.apple.com/referencelibrary/MusicAudio/" target="_top">Audio</a> page in the ADC Reference Library.</p></div></div></div><!-- legacy work end --><H1 CLASS="H3.Heading3"><A NAME="pgfId=1997"> </A><A NAME="36745"> </A>Allocating Sound Channels<A NAME="marker=694"> </A></H1><P CLASS="T0.Text0"><A NAME="pgfId=3328"> </A>Usually, you do not need to worry about allocating memory for sound channels because the <TT CLASS="cv">SndNewChannel</TT> function automatically allocates a sound channel record in the application's heap if passed a pointer to a <TT CLASS="cv">NIL</TT> sound channel. <TT CLASS="cv">SndNewChannel</TT> also internally allocates memory for the sound channel's queue of sound commands. For example, the following lines of code request that the Sound Manager open a new sound channel for playing sampled sounds:<A NAME="marker=1252"> </A></P><CODE CLASS="Cv.Code"><A NAME="pgfId=9665"> </A>mySndChan := NIL;<BR>myErr := SndNewChannel(mySndChan, sampledSynth, 0, NIL);<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=3330"> </A>If you are concerned with managing memory yourself, you can allocate your own memory for a sound channel record and pass the address of that memory as the first parameter to <TT CLASS="cv">SndNewChannel</TT>. By allocating a sound channel record manually, you not only obtain control over the allocation of the sound channel record, but you can specify the size of the queue of sound commands that the Sound Manager internally allocates. <A target="doc" HREF="imsoundmgr.c.htm#18564" CLASS="XRef">Listing 1-11</A> illustrates one way to do this.</P><P CLASS="L.Listing"><A NAME="pgfId=3331"> </A>Listing&nbsp;11 <A NAME="18564"> </A>Creating a sound channel</P><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=9669"> </A>FUNCTION MyCreateSndChannel (synth: Integer; initOptions: LongInt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userRoutine: ProcPtr; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queueLength: Integer): SndChannelPtr;<BR>VAR<BR>&nbsp;&nbsp;&nbsp;&nbsp;mySndChan:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SndChannelPtr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{pointer to a sound channel}<BR>&nbsp;&nbsp;&nbsp;&nbsp;myErr:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OSErr;<BR>BEGIN<BR>&nbsp;&nbsp;&nbsp;&nbsp;{Allocate memory for sound channel.}<BR>&nbsp;&nbsp;&nbsp;&nbsp;mySndChan := SndChannelPtr(NewPtr(Sizeof(SndChannel)));<BR>&nbsp;&nbsp;&nbsp;&nbsp;IF mySndChan &lt;&gt; NIL THEN<BR>&nbsp;&nbsp;&nbsp;&nbsp;BEGIN<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mySndChan^.qLength := queueLength;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{set number of commands in queue}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{Create a new sound channel.}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myErr := SndNewChannel(mySndChan, synth, initOptions, userRoutine);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IF myErr &lt;&gt; noErr THEN<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BEGIN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{couldn't allocate channel}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DisposePtr(Ptr(mySndChan));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{free memory already allocated}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mySndChan := NIL;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{return NIL}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;END<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELSE<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mySndChan^.userInfo := 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{reset userInfo field}<BR>&nbsp;&nbsp;&nbsp;&nbsp;END;<BR>&nbsp;&nbsp;&nbsp;&nbsp;MyCreateSndChannel := mySndChan;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{return new sound channel}<BR>END;<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=3333"> </A><A NAME="marker=9671"> </A>The <TT CLASS="cv">MyCreateSndChannel</TT> function defined in <A target="doc" HREF="imsoundmgr.c.htm#18564" CLASS="XRef">Listing 1-11</A> first allocates memory for a sound channel record and then calls the <TT CLASS="cv">SndNewChannel</TT> function to attempt to allocate a channel. Note that <TT CLASS="cv">MyCreateSndChannel</TT> checks the result code returned by <TT CLASS="cv">SndNewChannel</TT> to determine whether the function was able to allocate a channel. The <TT CLASS="cv">SndNewChannel</TT> function might not be able to allocate a channel if there are so many channels open that allocating another would put too much strain on the CPU. Also, <TT CLASS="cv">SndNewChannel</TT> might fail if memory is low. (In addition to the memory for a sound channel record that is passed in the first parameter to <TT CLASS="cv">SndNewChannel</TT>, the function must internally allocate memory in which to store sound commands.)</P><P CLASS="T1.Text1"><A NAME="pgfId=2247"> </A>If you allocate memory for a sound channel record, you should specify the size of the queue of sound commands by assigning a value to the <TT CLASS="cv">qLength</TT> field of the sound channel record you allocate. You can use the constant <TT CLASS="cv">stdQLength</TT> to obtain a standard queue of 128 sound commands, or you can provide a value of your own. <A NAME="marker=1254"> </A></P><CODE CLASS="Cv.Code"><A NAME="pgfId=9675"> </A>CONST<BR>&nbsp;&nbsp;&nbsp;&nbsp;stdQLength &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= 128;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{default size of a sound channel}<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=2248"> </A><A NAME="marker=9677"> </A>If you know that your application will play only resources containing sampled sound, you might set the <TT CLASS="cv">qLength</TT> field to a considerably lower value, because resources created with the <TT CLASS="cv">SndRecord</TT> function (described in the chapter <A target="doc" HREF="imintrosound.htm" CLASS="XRef">&quot;Introduction to Sound on the Macintosh&quot;</A> in this book) contain only one sound command, the <TT CLASS="cv">bufferCmd</TT> command, which specifies that a buffer of sound should be played. For example, if your application uses a sound channel only to play a single sampled sound asynchronously, you can set <TT CLASS="cv">qLength</TT> to 2, to allow for the <TT CLASS="cv">bufferCmd</TT> command and a <TT CLASS="cv">callBackCmd</TT> command that your application issues manually, as described in <A target="doc" HREF="imsoundmgr.1e.htm#28093" CLASS="XRef">&quot;Playing Sounds Asynchronously&quot;</A>. By using a smaller than standard queue length, your application can conserve memory.<A NAME="marker=780"> </A><A NAME="marker=781"> </A><A NAME="marker=489"> </A></P><P CLASS="Note"><A NAME="pgfId=3335"> </A>The number of sound commands in a channel should be an integer greater than 0. If you open a channel with a 0-length queue, most of the Sound Manager routines will return a <TT CLASS="cv">badChannel</TT> result code.  <A NAME="marker=696"> </A></P><P CLASS="I.Important"><A NAME="pgfId=2892"> </A>In general, however, you should let the Sound Manager allocate sound channel records for you. The amount of memory you might save by allocating your own is usually negligible. </P><P CLASS="T1.Text1"><A NAME="pgfId=3336"> </A>The second parameter in the <TT CLASS="cv">SndNewChannel</TT> function specifies the kind of data you want to play on that channel. You can specify one of the following constants:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=9681"> </A>CONST<BR>&nbsp;&nbsp;&nbsp;&nbsp;squareWaveSynth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{square-wave data}<BR>&nbsp;&nbsp;&nbsp;&nbsp;waveTableSynth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= 3;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{wave-table data}<BR>&nbsp;&nbsp;&nbsp;&nbsp;sampledSynth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= 5;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{sampled-sound data}<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=2012"> </A><A NAME="marker=9683"> </A>In some versions of system software prior to system software version 7.0 (including system software version 6.0.7), high-level Sound Manager routines do not work properly with sound resources that specify the sound data type twice. This might happen if a resource specifies that a sound consists of sampled-sound data and an application does the same when creating a sound channel. This might also happen if an application uses the same sound channel to play several sound resources that contain different kinds of sound data. There are several solutions to this problem that you can use if you must maintain compatibility with old versions of system software:</P><UL><LI CLASS="B1.Bullet1"><A NAME="pgfId=2891"> </A>If your application plays only sampled-sound resources, then you need only ensure that none of the sound resources specifies that it contains sampled-sound data. Then, when you create a sound channel, pass <TT CLASS="cv">sampledSynth</TT> as the second parameter to <TT CLASS="cv">SndNewChannel</TT> so that the Sound Manager interprets the data in the sound resources correctly. Do not use the <TT CLASS="cv">SndPlay</TT> routine.</LI><LI CLASS="B1.Bullet1"><A NAME="pgfId=2354"> </A>If your application must be able to play sampled-sound resources as well as resources that contain square-wave or wave-table data, ensure that all sound resources that your application uses specify their data type. (Sound resources created with the Sound Input Manager automatically specify that they contain sampled-sound data.) Then, when creating a channel in which you plan to play a sound resource, pass 0 as the second parameter to <TT CLASS="cv">SndNewChannel</TT>, and then use the channel to play no more than one sound resource. </LI><LI CLASS="B1.Bullet1"><A NAME="pgfId=2355"> </A>If you do not wish to modify your application's sound resources, and your application plays only sampled-sound resources, then you can play sounds with low-level Sound Manager routines, a technique described in <A target="doc" HREF="imsoundmgr.26.htm#40709" CLASS="XRef">&quot;Playing Sounds Using Low-Level Routines&quot;</A>. </LI></UL><P CLASS="T1.Text1"><A NAME="pgfId=2104"> </A>Note that this problem does not occur with sound files, because sound files always contain sampled-sound data and thus do not explicitly declare their data type. As a result, when creating a channel in which you plan to play a sound file, pass <TT CLASS="cv">sampledSynth</TT> as the second parameter to <TT CLASS="cv">SndNewChannel</TT>.</P><P CLASS="T1.Text1"><A NAME="pgfId=3338"> </A>The third parameter in the <TT CLASS="cv">SndNewChannel</TT> function specifies the initialization parameters to be associated with the new channel. These are discussed in the following section. The fourth parameter in the <TT CLASS="cv">SndNewChannel</TT> function is a pointer to a callback procedure. If your application produces sounds asynchronously or needs to be alerted when a command has completed, you can specify a callback procedure by passing the address of that procedure in the fourth parameter and then by installing a callback procedure into the sound channel. If you pass <TT CLASS="cv">NIL</TT> as the fourth parameter, then no&nbsp;callback procedure is associated with the channel. See <A target="doc" HREF="imsoundmgr.1e.htm#28093" CLASS="XRef">&quot;Playing Sounds Asynchronously&quot;</A> for more information on setting up and using callback&nbsp;procedures.<A NAME="marker=695"> </A><A NAME="marker=682"> </A></P><hr>&#169; 1999 Apple Computer, Inc.<!-- QTnavbar start --><P><I>Inside Macintosh: Sound</I><P>| <A target="doc" HREF="imsoundmgr.b.htm">Previous</A> | <A target="doc" HREF="imsoundmgr.1.htm">Chapter contents</A> | <A target="doc" HREF="imsoundmgr.htm">Chapter top</A> | <A target="doc" HREF="imsoundmgr.b.htm">Section top</A> | <A target="doc" HREF="imsoundmgr.d.htm">Next</a> | <!-- QTnavbar end --><!-- legacy work start --><script type="text/javascript"> placeWatermark()</script><div style="width:100%; position:fixed;"><div align="center" id="watermark" style="position: relative; margin-left:auto; margin-right:auto; z-index:20; width:500px;"><div class="legacybox" style="position: relative;"><h1>Legacy Document<span class=closebutton><a href="javascript:closeWatermark()"><img src="../../../Resources/Images/closebutton.png" width="14" height="14" border="0" align="top" alt="close button"></a></span></h1><p><b>Important:</b><i>Sound Input Manager</i> is deprecated as of Mac OS X v10.5. For new audio development in Mac OS X, use Core Audio. See the <a href="http://developer.apple.com/referencelibrary/MusicAudio/" target="_top">Audio</a> page in the ADC Reference Library.</p></div></div></div><!-- legacy work end --></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>