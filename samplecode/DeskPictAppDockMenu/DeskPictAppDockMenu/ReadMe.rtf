{\rtf1\mac\ansicpg10000\cocoartf100
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\b\fs48 \cf0 DeskPictAppDockMenu ReadMe
\f1\b0\fs24 \
\

\f0\b Overview
\f1\b0 \
\
This sample shows how to add a dock menu to your Cocoa application, so that clicking and holding on your application's dock icon displays a menu.  It demonstrates this by scanning a folder of your choice (which you can choose from the "Preferences..." menu item) for pictures, displaying those pictures in the dock menu, and setting your desktop picture to the picture you choose from the menu.  This sample does not show the most basic way of setting up a dock menu: creating your menu statically in Interface Builder, and wiring it up to the dockMenu outlet of the application.  Instead, this sample shows how to dynamically create the dock menu on the fly and have many dock menu items hooked up to one action method.  The code uses NSInvocations to work around a bug in Mac OS X 10.1.x that causes the sender for the NSMenuItem action method to always be the application, not the menu item.\
\

\f0\b Details
\f1\b0 \
\
A few details worth noting:\
\
* There are a couple possible workarounds to the bug described above.  One is to have each menu item hooked up to a different action method, so that you know when that action is called, which menu item called it, and what action should be taken.  This is ok for when each menu item is known, and the action to be taken for each menu item is distinct.  However, in this case we have an unknown number of pictures, and choosing any picture should perform the same action, with the picture chosen.  So we really do want to just have one action method, and query the sender to determine which picture in the menu should be set as the desktop picture.  Hence, the workaround as described in code, using NSInvocations.\
\
* Note that we try to pre-calculate the dock menu when possible (at app launch time, for instance).  It is important to be sensitive to performance and memory considerations when working with dock menus.  On the speed front, when the user clicks and holds the dock icon, they are waiting for the menu to come up and it wouldn't due to be always heading off and doing a long calculation to create the menu.  In our case, we only recalculate the menu when the modification date of the pictures folder changes.  On the memory front, if your app exists primarily to serve up a dock menu (a la dockling-type behavior), and your app is going to be running all the time in the background, you should minimize your memory overhead when the user is not actually using your application.  The dock menu itself should probably be the only thing that hangs around, depending upon the situation.\
\
* Note that this sample lets you the user choose the "Preferences..." menu item, so that you can choose which folder the app scans for pictures.  It saves out the path you choose in preferences, so that it will be automatically set the next time you run.\
\

\f0\b Version History
\f1\b0 \
\
1.0 - 03/2002 - Initial Release}