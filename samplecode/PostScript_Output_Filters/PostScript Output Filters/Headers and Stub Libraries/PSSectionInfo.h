/**	@name  PSSectionInfo.h*/	/**		@name Introduction		This file contains types and defines for PSSection and PSSubsection data.	*//*	File:		PSSectionInfo.h	Contains:	This file contains types and defines for PSSection and PSSubsection data.  	Version:	Technology:	PrintingLib 8.7 				Release:	1.1 	Copyright:	© 1999 by Apple Computer Inc. All Rights Reserved. 	Bugs?:		For bug reports, consult the following page on 				the World Wide Web:  					http://developer.apple.com/bugreporter/*/#ifndef __PSSECTIONINFO__#define __PSSECTIONINFO__#ifndef __MACTYPES__#include <MacTypes.h>#endif#ifndef __LIMITS__#include <Limits.h>#endif#if PRAGMA_ONCE#pragma once#endif#ifdef __cplusplusextern "C" {#endif#if PRAGMA_IMPORT#pragma import on#endif#if PRAGMA_STRUCT_ALIGN	#pragma options align=mac68k#elif PRAGMA_STRUCT_PACKPUSH	#pragma pack(push, 2)#elif PRAGMA_STRUCT_PACK	#pragma pack(2)#endif/*	While emitting PostScript data to an output procedure, generators of PostScript data	such as the QuickDraw to PostScript converter and Download Manager low level converter	let the client know where in the job it is using the PSSection and PSSubsection enum values. *//*		PSSection indicates to a client what portion of a given print job is in process.	These are the major sections of a print job: queries, coverpage generation, the actual	print job itself, and, for Download Manager job, the peek portion that a low level converter	can do.	*//**	@name PSSection	PSSection indicates to a client what portion of a given print job is in process.*/	/** PSSection */ 	enum PSSection{		/// Invalid Section		kSectInvalid	= -1,						/// Anon		kSectAnon = 0,		/// Query		kSectQueryJob 	= 1,						/// CoverPage		kSectCoverPage 	= 2,						/// Job		kSectJob 		= 3,						/// Peek		kSectPeek		= 4,				/// LONG_MAX		kSectionMaxValue = LONG_MAX		};	typedef enum PSSection PSSection;/*				Part of the data passed in a PSStream's PSPosition structure is the PSSubsection and another part	is a void * 'info' field pointing to some arbitrary data that is subsection dependent. When the writer of output	PostScript data uses the psOutFormatPosition routine, no 'info' data is written, but when the psOutFormatPositionInfo	routine is used, the 'info' data is filled in by the pointer passed by the caller. This documents what	should be passed to psOutFormatPositionInfo for many of the PSSubsection values. This same information	also describes what as what software entities that are passed a PSPosition structure can expect in the 'info' field 	for a given subsection.		Note: Even for subsections that have a well defined 'info' value, it is possible that the 'info' is NULL 	instead so it is important to test for a NULL 'info' value prior to examining the data it contains.	In the comments for many of the enum values below, we indicate the appropriate data that	is to be passed in the void *info field of the PSPosition for a given subsection value. 								NOTE: 	For enum values where we have not added this information, either the data supplied should always			be a NULL pointer OR we have not had a need to define this. If or when we define this, we			will be careful to document it in this file and be consistent across libraries and			clients.				The notation:		infofield: mumbleType		indicates that a POINTER to mumbleType is supplied in the infofield for the given subsection value IF 	there is any data supplied there. We don't always supply data for each subsection for which there is a 	data type defined, meaning that even if a type is defined the actual value may be NULL. 	*//**	@name PSSubsection	A subsection value provides finer granularity in the reporting of progress of the download job.*/	/**	PSSubsection */    enum PSSubsection {		/// An invalid subsection		kSubInvalid = -1,					/// Anon		kSubAnon = 0,		/// %!PS-Adobe					infofield: Fixed 		kSubPSAdobe = 1,					/// %!PS-Adobe-3.0 EPSF-3.0		infofield: EPSFVersion		kSubPSAdobeEPS = 2,				/*	General Header comments.*/		/// %%BoundingBox				infofield: DSCBBox		kSubBoundingBox = 3,				/// %%Copyright					infofield: Str255		kSubCopyright = 4,					/// %%Creator					infofield: Str255		kSubCreator = 5,					/// %%CreationDate				infofield: Str255 		kSubDate = 6,						/// %%DocumentData				infofield: DSCDocumentData		kSubDocData = 7,					/// %%Emulation						kSubEmulation = 8,		/// %%EndComments		kSubEndComments = 9,		/// %%Extensions			kSubExtensions = 10,		/// %%For						infofield: Str255 		kSubFor = 11,						/// %%LanguageLevel				infofield: SInt32	(-1 is used for (atend)) 		kSubLangLevel = 12,					/// %%Orientation				infofield: DSCOrientation		kSubOrientation = 13,				/// %%Pages 					infofield: SInt32 (-1 used for (atend))		kSubPages = 14,						/// %%PageOrder					infofield: DSCPageOrder		kSubPageOrder = 15,					/// %%Routing					infofield: Str255 		kSubRouting = 16,		/// %%Title						infofield: Str255		kSubTitle = 17,						/// %%Version		kSubVersion = 18,			/*	General Body Comments.*/		/// Continue							infofield: DSCContinuationData 		kSubContinue = 19,					/// %%BeginBinary		kSubBeginBinary = 20,				/// %%EndBinary			kSubEndBinary = 21,					/// %%BeginData:			kSubBeginData = 22,					/// %%EndData		kSubEndData = 23,					/// %%BeginDefaults		kSubBeginDefaults = 24,		/// %%EndDefaults		kSubEndDefaults = 25,				/// %%BeginEmulation		kSubBeginEmulation = 26,			/// %%EndEmulation		kSubEndEmulation = 27,				/// %%BeginPreview		kSubBeginpreview = 28,				/// %%EndPreview			kSubEndPreview = 29,				/// %%BeginProlog		kSubBeginProlog = 30,				/// %%EndProlog			kSubEndProlog = 31,					/// %%BeginSetup			kSubBeginSetup = 32,				/// %%EndSetup		kSubEndSetup = 33,			/*	General Page Comments.*/		/// %%BeginObject		kSubBeginObject = 34,							/// %%EndObject		kSubEndObject = 35,										/// %%BeginPageSetup			infofield: SInt32 of the current page ordinal number 		kSubBeginPageSetup = 36,	 		/// %%EndPageSetup				infofield: SInt32 of the current page ordinal number 		kSubEndPageSetup = 37,				/// %%Page						infofield: DSCPage		kSubPage = 38,					  		/// %%PageBoundingBox			infofield: DSCBBox 		kSubPageBoundingBox = 39,			/// %%PageOrientation			infofield: DSCOrientation		kSubPageOrientation = 40,		/*	General Trailer Comments.*/		/// %%PageTrailer				infofield: SInt32 of the current page ordinal number 		kSubPageTrailer = 41,				/// %%Trailer		kSubTrailer = 42,					/// %%EOF		kSubEOF = 43,				/*	Requirement Header Comments.*/		/// %%DocumentMedia				infofield: DSCData		kSubDocMedia = 44,			 		/// %%DocumentNeededResources	infofield: DSCData			kSubDocNeededRes = 45,				/// %%DocumentSuppliedResources	infofield: DSCData		kSubDocSuppliedRes = 46,			/// %%DocumentPrinterRequired		kSubDocPrinterRequired = 47,		/// %%DocumentNeededFiles		kSubDocNeededFiles = 48,			/// %%DocumentSuppliedFiles		kSubDocSuppliedFiles = 49,			/// %%DocumentFonts				infofield: DSCData			kSubDocFonts = 50,		/// %%DocumentNeededFonts		infofield: DSCData			kSubDocNeededFonts = 51,			/// %%DocumentSuppliedFonts		infofield: DSCData		kSubDocSuppliedFonts = 52,			/// %%DocumentProcSets			infofield: DSCData			kSubDocProcSets = 53,				/// %%DocumentNeededProcSets	infofield: DSCData		kSubNeededProcSets = 54,			/// %%DocumentSuppliedProcSets	infofield: DSCData		kSubSuppliedProcSets = 55,			/// %%OperatorIntervention		kSubOpIntervention = 56,			/// %%OperatorMessage		kSubOpMessage = 57,			/// %%ProofMode					infofield: DSCProofMode		kSubProofMode = 58,					/// %%Requirements			kSubRequirements = 59,				/// %%VMLocation		kSubVMLocation = 60,				/// %%VMusage		kSubVMusage = 61,			/*	Requirment Body Comments.*/		/// %%BeginDocument				infofield: DSCData		kSubBeginDoc = 62,					/// %%EndDocument			kSubEndDoc = 63,					/// %%IncludeDocument			infofield: DSCData		kSubIncludeDoc = 64,				/// %%BeginFeature				infofield: DSCFeature		kSubBeginFeature = 65,				/// %%EndFeature			kSubEndFeature = 66,				/// %%IncludeFeature			infofield: DSCFeature		kSubIncludeFeature = 67,			/// %%BeginFile					infofield: Str255		kSubBeginFile = 68,								/// %%EndFile			kSubEndFile = 69,					/// %%IncludeFile				infofield: Str255		kSubIncludeFile = 70,				/// %%BeginFont					infofield: DSCData		kSubBeginFont = 71,						/// %%EndFont		kSubEndFont = 72,					/// %RBIBeginBitmapFont			infofield: Str255		kSubBeginBitmapFont = 73,			/// %RBIEndBitmapFont		kSubEndBitmapFont = 74,				/// %RBIBeginTrueTypeFont		infofield: Str255			kSubBeginTrueTypeFont = 75,			/// %RBIEndTrueTypeFont		kSubEndTrueTypeFont = 76,				/// %RBIBeginFontRasterizer: TrueType		kSubBeginTrueTypeScaler = 77,			/// %RBIEndFontRasterizer: TrueType			kSubEndTrueTypeScaler = 78,					/// %%IncludeFont				infofield: DSCData 		kSubIncludeFont = 79,					/// %%BeginProcSet		kSubBeginProcSet = 80,					/// %%EndProcSet			kSubEndProcSet = 81,					/// %%IncludeProcSet			kSubIncludeProcSet = 82,				/// %%BeginResource				infofield: DSCData		kSubBeginResource = 83,				/// %%EndResource		kSubEndResource = 84,			/// %%BeginResource: ColorSpace <profilename>	infofield: Str255 		kSubBeginColorspace = 85,					/// %%IncludeResource			infofield: DSCData		kSubIncludeResource = 86,	/*	Requirement Page Comments.*/		/// %%PageFonts					infofield: DSCData		kSubPageFonts = 87,					/// %%PageFiles		kSubPageFiles = 88,					/// %%PageMedia,		kSubPageMedia = 89,					/// %%PageRequirements		kSubPageRequirements = 90,			/// %%PageResources				infofield: DSCData			kSubPageResources = 91,		/*	Color Header Comments.*/		/// %%CMYKCustomColor		kSubCMYKCustomColor = 92,		/// %%DocumentCustomColors		kSubDocCustomColors = 93,			/// %%DocumentProcessColors		infofield: DSCProcessColors		kSubDocProcessColors = 94,			/// %%RGBCustomColor		kSubRGBCustomColor = 95,	/*	Color Body Comments.*/		/// %%BeginCustomColor		kSubBeginCustomColor = 96,			/// %%EndCustomColor		kSubEndCustomColor = 97,			/// %%BeginProcessColor		kSubBeginProcessColor = 98,			/// %%EndProcessColor		kSubEndProcessColor = 99,	/*	Color Page Comments.*/		/// %%PageCustomColors		kSubPageCustomColors = 100,			/// %%PageProcessColors		kSubPageProcessColors = 101,/*	Query Comments.*/		/// %!PS-Adobe-3.0 Query		infofield: Fixed		kSubPSAdobeQuery = 102,						/// %%?BeginFeatureQuery			kSubBeginFeatureQuery = 103,		/// %%?EndFeatureQuery		kSubEndFeatureQuery = 104,			/// %%?BeginFileQuery		kSubBeginFileQuery = 105,			/// %%?EndFileQuery		kSubEndFileQuery = 106,				/// %%?BeginFontListQuery		kSubBeginFontListQuery= 107,		/// %%?EndFontListQuery		kSubEndFontListQuery = 108,			/// %%?BeginFontQuery		kSubBeginFontQuery = 109,			/// %%?EndFontQuery		kSubEndFontQuery = 110,				/// %%?BeginPrinterQuery			kSubBeginPrinterQuery = 111,		/// %%?EndPrinterQuery		kSubEndPrinterQuery = 112,			/// %%?BeginProcSetQuery		kSubBeginProcSetQuery = 113,		/// %%?EndProcSetQuery		kSubEndProcSetQuery = 114,			/// %%?BeginQuery		kSubBeginQuery = 115,				/// %%?EndQuery			kSubEndQuery = 116,					/// %%?BeginResourceListQuery		kSubBeginResListQuery = 117,		/// %%?EndResourceListQuery		kSubEndResListQuery = 118,			/// %%?BeginResourceQuery		kSubBeginResQuery = 119,			/// %%?EndResourceQuery		kSubEndResQuery = 120,				/// %%?BeginVMStatus			kSubBeginVMStatus = 121,			/// %%?EndVMStatus		kSubEndVMStatus = 122,		/*	Misc. non-comments.*/		/// show page		kSubShowpage = 123,					///	Reserved1						kSubReserved1 = 124,		/// Reserved2		kSubReserved2 = 125,				/// used to report an error condition to the client 	infofield: DSCLogData			kSubLogErrorData = 126,			/// used to report warning conditions to the client			infofield: DSCLogData			kSubLogWarningData = 127,			/// used to identify message as a printer error to report (i.e. out of paper, etc). 	infofield: Str255 		kSubPrinterErrorSection = 128, 		/// used to identify a printer status message generated from the status code		infofield: Str255 		kSubStatusSection = 129,	 		///	used to identify fatal errors from the printer	infofield: Str255 						kSubFatalPrinterErrorSection = 130,				/// %%ViewingOrientation							infofield: DSCViewingOrientation		kSubViewOrientation = 131,										/// Plate Color		kSubPlateColor = 132, 							/// used to indicate that deviceadjustmatrix is supplied at this point		kSubDeviceAdjustMatrix = 194,					/// used to indicate that auto scaling code is to be supplied at this point			kSubAutoScaling = 195,		 			/// %RBINumCopies:  	infofield: SInt32. (-1 is unknown).		kSubRBINumCopies = 196,			/*	The kSubGiveUpTime subsection is used with writes of no data to enable the writer of the data to allow a client	to get time with some regularity, even if there is no real data to write. */		/// to allow a client to give up time without writing status. No data is written. 		kSubGiveUpTime = 197,		/// %RBINupNess			infofield: DSCNupNess.		kSubRBINupNess = 198,					/// %RBIPCFileName 		infofield: Str255		kSubRBIPCFileName = 199,					/// %RBIPPDFileVersion 	infofield: Str255 		kSubRBIProduct = 200,						/// client is writing %%EOF but does not want to terminate the job.		kSubEOFNoJobTermination = 201,				/// client wants to terminate the job but is not writing %%EOF.		kSubTerminateJob = 202,							/// %RBIPageMarker 		kSubRBIPageMarker = 203,				/*	Some of the information presented as DSC PostScript comments are also emitted into		the stream to build a PostScript dictionary. This is done so that a PostScript interpreter		(as opposed to a parser of DSC comments) can get that information. The subsections here mark 		the emission of PS key-value information pairs. 	*/		/// PS looks something like: /Title(some document name)def				infofield: Str255			kSubInfoTitle = 204,				/// PS looks something like: /Creator(Finder: LaserWriter 8 8.7)def		infofield: Str255		kSubInfoCreator = 205,					/// PS looks something like: /CreationDate(1:52 PM Thursday, March 11, 1999)def	infofield: Str255			kSubInfoDate = 206,						/// PS looks something like: /For(Richard Blanchard)def					infofield: Str255		kSubInfoFor = 207,						/// Creates the page level save.		kSubPageSaveLevelSetup = 208,		/// Does a page level restore. 		kSubPageSaveLevelRestore = 209, 		///  Auto scaling setup		kSubAutoScalingSetup	= 210,			kSubBeginPageSlotInvocation = 211,	/* %RBIBeginPageSlotInvocation	*/		kSubEndPageSlotInvocation = 212,	/* %RBIEndPageSlotInvocation	*/		kSubIncludePageSlotInvocation = 213,/* %RBIIncludePageSlotInvocation	*/		kSubPageGStateSetup = 214,		/* Sets up the page coordinate system. Immediately prior we have the PS coord system. Undefined after.	*/		kSubPageMTSMatrixSetup = 215,	/* Makes sure the mTS matrix matches the QD coordinate system for the page.		*/				kSubADOImageableArea = 216,		/* %ADO_ImageableArea: fixed fixed fixed fixed		infofield DSCFixedBBox	*/		kSubRBIBeginNonPPDFeature = 217,/* %RBIBeginNonPPDFeature: main option				infofield DSCFeature	*/		kSubRBIEndNonPPDFeature = 218,	/* %RBIEndNonPPDFeature								*/		kSubRBIIncludeNonPPDFeature=219,/* %RBIIncludeNonPPDFeature: main option			infofield DSCFeature	*/		kSubStartNup			= 220,	/* 													infofield DSCNupData	*/		kSubIncludeStartNup		= 221,	/* %RBIIncludeStartnup								infofield DSCNupData	*/		kSubNupFinalPage		= 222,				kSubPSBegin				= 223,		kSubPSEnd				= 224,		kSubPSBeginNoSave		= 225,		kSubPSEndNoSave			= 226,				kSubDocFontsAtEnd		= 227,		kSubDocNeededFontsAtEnd	= 228,		kSubDocNeededResAtEnd	= 229,		kSubDocSuppliedFontsAtEnd = 230,		kSubDocSuppliedResAtEnd = 231,		/// %RBIDocumentSuppliedFonts					infofield: DSCData		kSubRBIDocSuppliedFonts = 232,		kSubRBIDocSuppliedFontsAtEnd = 233,				/// PS looks something like: /Pages 22 def		infofield: SInt32 (-1 indicates Unknown)		kSubInfoPages 			= 235,		/// %RBIFontKey: (fontname) 10point bold		infofield: DSCFontAnnotation		kSubAnnotateFontKey		= 236,							kSubSetJobStatusStr		= 237,					/* (username; page: 1 of 4)setjob	infofield: DSCJobStatus */ 		kSubSectionMaxValue = LONG_MAX		};	typedef enum PSSubsection PSSubsection;/**	@name PSPosition		The PSPosition structure is used to pass Document Structuring Conventions data and	status information back to the client idleProc.*/	/** PSPosition */    struct PSPosition{		/// The section of the document the caller is currently emitting. 		PSSection section;			 			/// The subsection of the document the caller is currently emitting. 		PSSubsection subsection;	 			/// More information about the current section:subsection					void *info;							/// A count of the number of positions that have been identified.			SInt32 id;						};	typedef struct PSPosition PSPosition;/**	@name DSCUnstructuredData	more info needed!!!*/typedef Str255 DSCUnstructuredData;/**	@name DSCBBox	more info needed!!!*/	/** DSCBBox */    struct DSCBBox{		/// 11x		SInt16	llx;		/// 11y		SInt16	lly;		/// urx		SInt16	urx;		/// ury		SInt16	ury;	};	typedef struct DSCBBox DSCBBox;/**	@name DSCFixedBBox	more info needed!!*/	/** DSCFixedBBox */    struct DSCFixedBBox{		/// 11x		Fixed	llx;		/// 11y		Fixed	lly;		/// urx		Fixed	urx;		/// ury		Fixed	ury;	};	typedef struct DSCFixedBBox DSCFixedBBox;/**	@name EPSFVersion	more info needed!!!!*/	/** EPSFVersion */    struct EPSFVersion{		/// dscVersion		Fixed	dscVersion;		/// epsfVersion		Fixed	epsfVersion;	};	typedef struct EPSFVersion EPSFVersion;/**	@name DSCPage	more info needed!!!!*/	/** DSCPage */    struct DSCPage{		/// ordinal		UInt32	ordinal;		/// label		Str255	label;	};	typedef struct DSCPage DSCPage;/**	@name DSCDocumentData	more info needed!!!*/	/** DSCDocumentData */    enum DSCDocumentData{		/// if the document data isn't a value we recognize 		kDSCUnknownDocumentData = -1,							///		kDSCClean7Bit = 0,		///		kDSCClean8Bit = 1,		///		kDSCBinary = 2,		///		kDSCDocumentDataMakeShort = SHRT_MAX					};	typedef enum DSCDocumentData DSCDocumentData;/**	@name DSCPageOrder	more info needed!!!!!*/	/** DSCPageOrder */	enum DSCPageOrder{		/// %%PageOrder (atend)		kDSCAtEndPageOrder = -2,							/// if the PageOrder data isn't a value we recognize		kDSCUknownPageOrder = -1,							///		kDSCPageOrderAscend = 0,		///		kDSCPageOrderDescend = 1,		///		kDSCPageOrderSpecial = 2,		///		kDSCPageOrderMakeShort = SHRT_MAX					};	typedef enum DSCPageOrder DSCPageOrder;/**	@name DSCProofMode	more info needed!!!!*/	/** DSCProofMode */    enum DSCProofMode{		/// if the ProofMode data isn't a value we recognize 		kDSCUknownProofMode = -1,								///		kDSCProofModeTrustMe = 0,		///		kDSCProofModeSubstitute = 1,		///		kDSCProofModeNotify = 2,		///		kDSCProofModeMakeShort = SHRT_MAX					};	typedef enum DSCProofMode DSCProofMode;/**	@name DSCFeature	more info needed!!!!!*/	/** DSCFeature */    struct DSCFeature{		/// feature		Str63	feature;		/// option length may be zero, i.e. there is no option value for this feature		Str63	option;				};	typedef struct DSCFeature DSCFeature;/**	@name DSCUnstructuredResourceData	more info needed!!!!!*/	/** DSCUnstructuredResourceData */    struct DSCUnstructuredResourceData{		/// resourceType		Str31 resourceType;		/// data		DSCUnstructuredData data;	};	typedef struct DSCUnstructuredResourceData DSCUnstructuredResourceData;/**	@name DSCProcSet	more info needed*/	/** DSCProcSet */	struct DSCProcSet{		/// version		Fixed	version;		/// revision		SInt16	revision;		/// name		Str63  name;	};	typedef struct DSCProcSet DSCProcSet;/**	@name DSCDocument	more info needed!!!!!*/	/** DSCDocument */    struct DSCDocument{		/// name		Str63  name;		/// version		Fixed	version;				/// type		Str63  type;				};	typedef struct DSCDocument DSCDocument;typedef struct DSCDocumentMedia{	SInt32		size;			/// size of structure. Later versions may have additional data.	StringPtr mediaName;		/// pointer to pascal string containing the media name	Fixed width;	Fixed height;	Fixed weight;	StringPtr color;		/// pointer to pascal string containing the media color	StringPtr type;			/// pointer to pascal string containing the media type}DSCDocumentMedia;typedef struct DSCNupData{	SInt32		size;			/// size of structure. Later versions may have additional data.	SInt32	numXpages;	SInt32 	numYpages;	Fixed 	rotation;	UInt32 	numframes;	SInt32	framewidth;			/// -1 is used when not framed	SInt16	layoutDirection; 	/// 0 = left to right, 1 = right to left	SInt16 acrossBeforeDown;	/// 0 = down before across, 1 = across before down.}DSCNupData;typedef struct DSCProcessColors{	SInt32		size;			/// size of structure. Later versions may have additional data.	Boolean isAtEnd;			/// true if (atend) comment. If true, remainder of data in structure is not valid	Boolean cyan;	Boolean magenta;	Boolean yellow;	Boolean black;}DSCProcessColors;/**	@name DSCStructuredResourceData 	more info needed!!*/	/** DSCStructuredResourceData */	struct DSCStructuredResourceData{		/// resourceType		Str31 resourceType;		/// count		SInt16	count;		union{			/// instanceName			Str63 instanceName[1];			/// procname			DSCProcSet procname[1];			/// document			DSCDocument document[1];		}u;	};	typedef struct DSCStructuredResourceData DSCStructuredResourceData;/**	@name DSCData	more info needed!!!!*/	/** DSCData */    struct DSCData{		/// is it structured?		Boolean structured;		union{			/// unstructuredData			DSCUnstructuredData unstructuredData;			/// structuredResourceData			DSCStructuredResourceData	structuredResourceData;			/// unstructuredResourceData			DSCUnstructuredResourceData unstructuredResourceData;							DSCDocumentMedia documentMedia;						/// there will be more in this union as we handle more comments		}u;	};	typedef struct DSCData DSCData;/**	@name DSCContinuationData	more info needed!!!!!*/	/** DSCContinuationData */    struct DSCContinuationData{		/// continuedSection		PSSubsection continuedSection;		/// data		DSCData		data;	};	typedef struct DSCContinuationData DSCContinuationData;/**	@name DSCLogData	more info needed!!!!!*/	/** DSCLogData */	struct DSCLogData{		/// the subsection the warning is being generated for. May be kSubAnon		PSSubsection 	logSubsection;						/// an info structure corresponding to the logSection being reported or NULL		void			*info;								/// the first 255 characters of the message being logged		Str255 			logMessage;						};	typedef struct DSCLogData DSCLogData;/**	@name DSCNupNess 	more info needed!!!!!*/	/** DSCNupNess */    struct DSCNupNess{		/// pages x		UInt32 pagesX;			/// the number of virtual pages per sheet in X			/// pages y				/// the number of virtual pages per sheet in Y		UInt32 pagesY;				};	typedef struct DSCNupNess DSCNupNess;typedef enum{	kDSCAtEndOrientation = -2,					/// %%Orientation: (atend) or %%PageOrientation: (atend)	kDSCUknownOrientation = -1,					/// if the Orientation data isn't a value we recognize	kDSCPortraitOrientation = 0,	kDSCLandscapeOrientation = 1,	kDSCOrientationMakeShort = SHRT_MAX				}DSCOrientation;/*	The DSCViewingOrientation structure adopts the PS matrix notation for the elements of the	orientation matrix. PS matrix notation is [ a b c d tx ty ]. Here, only the first 4 components are 	specified, hence the notation used below. Each element of the Viewing Orientation submatrix	is either a +1, -1 or 0. If the boolean isAtEnd is true, then the reset of the data is meaningless	and the comment is being written as %%ViewingOrientation: (atend)*/typedef struct DSCViewingOrientation{	SInt32		size;		/// size of structure. Later versions may have additional data.	Boolean isAtEnd;		/// true if this is really (atend) in which case remainder of data is not significant.		SInt8	a;					SInt8	b;	SInt8	c;	SInt8	d;}DSCViewingOrientation;typedef struct DSCFontAnnotation{	SInt32		size;			/// size of structure. Later versions may have additional data.	StringPtr	fontName;	Fixed		pointSize;	StringPtr	styleString;}DSCFontAnnotation;typedef struct DSCJobStatus{	SInt32		size;			/// size of structure. Later versions may have additional data.	StringPtr 	username;	SInt32		currentPage;	SInt32		totalPages;		/// the total number of pages	-1 = unknown}DSCJobStatus;#if PRAGMA_STRUCT_ALIGN	#pragma options align=reset#elif PRAGMA_STRUCT_PACKPUSH	#pragma pack(pop)#elif PRAGMA_STRUCT_PACK	#pragma pack()#endif#ifdef PRAGMA_IMPORT_OFF#pragma import off#elif PRAGMA_IMPORT#pragma import reset#endif#ifdef __cplusplus}#endif#endif	/* __PSSECTIONINFO__ */