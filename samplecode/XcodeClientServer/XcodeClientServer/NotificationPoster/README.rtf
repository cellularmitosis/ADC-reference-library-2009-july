{\rtf1\mac\ansicpg10000{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw10860\paperh9140
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\b\fs36 \cf0 CFNotificationCenter Example (Posting)\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f1\b0\fs24 \cf0 \
This example shows a simple use of the CFNotificationCenter functionality in CoreFoundation.  You should build both this and the NotificationObserver examples to see notifications in action.\
\
Note that this example is a Cocoa application, but the core functionality that is being shown is based on CoreFoundation and can be used the same way in a Carbon application.  In fact, if you were really writing a Cocoa application, you would probably use NSNotification (the Cocoa face of CFNotificationCenter) instead of CFNotificationCenter.\
\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\b\fs28 \cf0 Notification Poster\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f1\b0\fs24 \cf0 \
This example produces an application called 
\f0\b StockMarket
\f1\b0 , which lets you "broadcast" prices of stocks by entering the stock symbol and price in two textfields. It then sends out a "Stock Price Changed Notification" distributed notification. The object in the notification is the CFString representing the stock symbol (for instance, "AAPL"); this allows observers to tailor the notifications they receive to their needs: That is, if an observer wants only certain stock prices, they can register for the "Stock Price Changed Notification" notification, but only with the desired stock symbols provided as the object.  Observers wanting all stock price changes can register with an object of NULL.\
\
The symbol and new price of the stock whose price is changed is delivered in the userInfo dictionary.\
\
All of the pure CF code is in NotificationPost.c. The Objective-C files StockMarket.m and .h contain the Cocoa user interface bits.\
\
}
