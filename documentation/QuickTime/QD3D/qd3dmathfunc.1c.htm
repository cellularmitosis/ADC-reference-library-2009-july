<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Managing Bounding Boxes</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=4281"> </A>Managing Bounding Boxes</H1><P CLASS="T1.Text1"><A NAME="pgfId=4286"> </A><A NAME="marker=4282"> </A>QuickDraw&nbsp;3D provides routines that you can use to manage bounding boxes.</P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4287"> </A>Q3BoundingBox_Copy</H2><P CLASS="T1.Text1"><A NAME="pgfId=4288"> </A><A NAME="marker=2071"> </A>You can use the <TT CLASS="cv">Q3BoundingBox_Copy</TT> function to make a copy of a bounding box.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10977"> </A>TQ3BoundingBox *Q3BoundingBox_Copy (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3BoundingBox *src, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3BoundingBox *dest);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10979"> </A><TT CLASS="cv">src</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4290"> </A>A pointer to the bounding box to be copied.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10988"> </A><TT CLASS="cv">dest</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4291"> </A>On entry, a pointer to a buffer large enough to hold a bounding box. On exit, a pointer to a copy of the bounding box specified by the <TT CLASS="cv">src</TT> parameter.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4292"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4293"> </A>The <TT CLASS="cv">Q3BoundingBox_Copy</TT> function returns, as its function result and in the <TT CLASS="cv">dest</TT> parameter, a copy of the bounding box specified by the <TT CLASS="cv">src</TT> parameter. <TT CLASS="cv">Q3BoundingBox_Copy</TT> does not allocate any memory for the destination bounding box; the <TT CLASS="cv">dest</TT> parameter must point to space allocated in the heap or on the stack before you call <TT CLASS="cv">Q3BoundingBox_Copy</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4294"> </A>Q3BoundingBox_Union</H2><P CLASS="T1.Text1"><A NAME="pgfId=4295"> </A><A NAME="marker=2080"> </A>You can use the <TT CLASS="cv">Q3BoundingBox_Union</TT> function to find the union of two bounding boxes.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10999"> </A>TQ3BoundingBox *Q3BoundingBox_Union (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3BoundingBox *v1, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3BoundingBox *v2, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3BoundingBox *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11001"> </A><TT CLASS="cv">v1</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4297"> </A>A pointer to a bounding box.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11010"> </A><TT CLASS="cv">v2</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4298"> </A>A pointer to a bounding box.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11019"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4299"> </A>On exit, a pointer to the union of the bounding boxes <TT CLASS="cv">v1</TT> and <TT CLASS="cv">v2</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4300"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4301"> </A>The <TT CLASS="cv">Q3BoundingBox_Union</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, a pointer to the bounding box that is the union of the two bounding boxes specified by the parameters <TT CLASS="cv">v1</TT> and <TT CLASS="cv">v2</TT>. The <TT CLASS="cv">result</TT> parameter can point to the memory occupied by either <TT CLASS="cv">v1</TT> or <TT CLASS="cv">v2</TT>, thereby performing the union operation in place.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4302"> </A>Q3BoundingBox_Set</H2><P CLASS="T1.Text1"><A NAME="pgfId=4303"> </A><A NAME="marker=2090"> </A>You can use the <TT CLASS="cv">Q3BoundingBox_Set</TT> function to set the defining points of a bounding box.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=11030"> </A>TQ3BoundingBox *Q3BoundingBox_Set (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3BoundingBox *bBox, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point3D *min, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point3D *max, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean isEmpty);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11032"> </A><TT CLASS="cv">bBox</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4305"> </A>A pointer to a bounding box.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11041"> </A><TT CLASS="cv">min</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4306"> </A>A pointer to a three-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11050"> </A><TT CLASS="cv">max</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4307"> </A>A pointer to a three-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11059"> </A><TT CLASS="cv">isEmpty</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4308"> </A>A Boolean value that indicates whether the specified bounding box is empty (<TT CLASS="cv">kQ3True</TT>) or not (<TT CLASS="cv">kQ3False</TT>).</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4309"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4310"> </A>The <TT CLASS="cv">Q3BoundingBox_Set</TT> function assigns the values <TT CLASS="cv">min</TT> and <TT CLASS="cv">max</TT> to the <TT CLASS="cv">min</TT> and <TT CLASS="cv">max</TT> fields of the bounding box specified by the <TT CLASS="cv">bBox</TT> parameter. <TT CLASS="cv">Q3BoundingBox_Set</TT> also assigns the value of the <TT CLASS="cv">isEmpty</TT> parameter to the <TT CLASS="cv">isEmpty</TT> field of the bounding box.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4311"> </A>Q3BoundingBox_UnionPoint3D</H2><P CLASS="T1.Text1"><A NAME="pgfId=4312"> </A><A NAME="marker=2101"> </A>You can use the <TT CLASS="cv">Q3BoundingBox_UnionPoint3D</TT> function to find the union of a bounding box and a three-dimensional point.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=11070"> </A>TQ3BoundingBox *Q3BoundingBox_UnionPoint3D (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3BoundingBox *bBox, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point3D *pt3D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3BoundingBox *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11072"> </A><TT CLASS="cv">bBox</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4314"> </A>A pointer to a bounding box.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11081"> </A><TT CLASS="cv">pt3D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4315"> </A>A three-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11090"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4316"> </A>On exit, a pointer to the union of the specified bounding box and the specified point.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4317"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4318"> </A>The <TT CLASS="cv">Q3BoundingBox_UnionPoint3D</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, a pointer to the bounding box that is the union of the bounding box specified by the <TT CLASS="cv">bBox</TT> parameter and the three-dimensional point specified by the <TT CLASS="cv">pt3D</TT> parameter. The <TT CLASS="cv">result</TT> parameter can point to the memory pointed to by <TT CLASS="cv">bBox</TT>, thereby performing the union operation in place.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4319"> </A>Q3BoundingBox_UnionRationalPoint4D</H2><P CLASS="T1.Text1"><A NAME="pgfId=4320"> </A><A NAME="marker=2111"> </A>You can use the <TT CLASS="cv">Q3BoundingBox_UnionRationalPoint4D</TT> function to find the union of a bounding box and a rational four-dimensional point.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=11101"> </A>TQ3BoundingBox *Q3BoundingBox_UnionRationalPoint4D (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3BoundingBox *bBox, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3RationalPoint4D *pt4D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3BoundingBox *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11103"> </A><TT CLASS="cv">bBox</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4322"> </A>A pointer to a bounding box.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11112"> </A><TT CLASS="cv">pt4D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4323"> </A>A rational four-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11121"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4324"> </A>On exit, a pointer to the union of the specified bounding box and the specified point.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4325"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4326"> </A>The <TT CLASS="cv">Q3BoundingBox_UnionRationalPoint4D</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, a pointer to the bounding box that is the union of the bounding box specified by the <TT CLASS="cv">bBox</TT> parameter and the rational four-dimensional point specified by the <TT CLASS="cv">pt4D</TT> parameter. The <TT CLASS="cv">result</TT> parameter can point to the memory pointed to by <TT CLASS="cv">bBox</TT>, thereby performing the union operation in place.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4327"> </A>Q3BoundingBox_SetFromPoints3D</H2><P CLASS="T1.Text1"><A NAME="pgfId=4328"> </A><A NAME="marker=2121"> </A>You can use the <TT CLASS="cv">Q3BoundingBox_SetFromPoints3D</TT> function to find the bounding box that bounds an arbitrary list of three-dimensional points.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=11132"> </A>TQ3BoundingBox *Q3BoundingBox_SetFromPoints3D (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3BoundingBox *bBox, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point3D *pts, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long nPts, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long structSize);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11134"> </A><TT CLASS="cv">bBox</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4330"> </A>A pointer to a bounding box.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11147"> </A><TT CLASS="cv">pts</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4331"> </A>A pointer to a list of three-dimensional points.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11156"> </A><TT CLASS="cv">nPts</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4332"> </A>The number of points in the specified list.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11165"> </A><TT CLASS="cv">structSize</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4333"> </A>The number of bytes of data that separate two successive points in the specified list of points.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4334"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4335"> </A>The <TT CLASS="cv">Q3BoundingBox_SetFromPoints3D</TT> function returns, as its function result and in the <TT CLASS="cv">bBox</TT> parameter, a pointer to a bounding box that contains all the points in the list of three-dimensional points specified by the <TT CLASS="cv">pts</TT> parameter. The <TT CLASS="cv">nPts</TT> parameter indicates how many points are in that list, and the <TT CLASS="cv">structSize</TT> parameter indicates the offset between any two successive points in the list. By suitably specifying the value of the <TT CLASS="cv">structSize</TT> parameter, you can have QuickDraw&nbsp;3D extract points that are embedded in an array of larger data structures.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4339"> </A>Q3BoundingBox_SetFromRationalPoints4D</H2><P CLASS="T1.Text1"><A NAME="pgfId=4340"> </A><A NAME="marker=2135"> </A>You can use the <TT CLASS="cv">Q3BoundingBox_SetFromRationalPoints4D</TT> function to find the bounding box that bounds an arbitrary list of rational four-dimensional points.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=11176"> </A>TQ3BoundingBox *Q3BoundingBox_SetFromRationalPoints4D (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3BoundingBox *bBox, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3RationalPoint4D *pts, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long nPts, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long structSize);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11178"> </A><TT CLASS="cv">bBox</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4342"> </A>A pointer to a bounding box.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11187"> </A><TT CLASS="cv">pts</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4343"> </A>A pointer to a list of rational four-dimensional points.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11196"> </A><TT CLASS="cv">nPts</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4344"> </A>The number of points in the specified list.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11205"> </A><TT CLASS="cv">structSize</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4345"> </A>The number of bytes of data that separate two successive points in the specified list of points.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4346"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4347"> </A>The <TT CLASS="cv">Q3BoundingBox_SetFromRationalPoints4D</TT> function returns, as its function result and in the <TT CLASS="cv">bBox</TT> parameter, a pointer to a bounding box that contains all the points in the list of rational four-dimensional points specified by the <TT CLASS="cv">pts</TT> parameter. The <TT CLASS="cv">nPts</TT> parameter indicates how many points are in that list, and the <TT CLASS="cv">structSize</TT> parameter indicates the offset between any two successive points in the list. By suitably specifying the value of the <TT CLASS="cv">structSize</TT> parameter, you can have QuickDraw&nbsp;3D extract points that are embedded in an array of larger data structures.<A NAME="marker=4351"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>