{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red255\green0\blue0;\red0\green255\blue0;
}
\vieww18240\viewh19420\viewkind0
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\b\fs36 \cf0 RGB Value Transformers\
\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f1\b0\fs24 \cf0 This sample is an update to the "RGB Image" sample, which demonstrated the use of compositing to separate an NSimage\cf2  \cf0 into its \cf3 red\cf0 , \cf4 green\cf0 , and \cf2 blue\cf0  components, and shows the results of recombining those components.  This version uses a subclass of NSValueTransformer to perform the color separation.\
\
The conventional way to separate an RGBA image into its components would be to obtain a pointer to the pixel data, and manually separate the bytes.  I started down that path when I began this sample, and then realized that that was far more work than is necessary, and would also limit the separation code to RGBA images.\
\
By using the compositing operators instead of manual data munging, we're able to separate the color components of any image, whether or not it started out as an RGB data source.\
\
Most of the interesting work in this app is done in a categories of NSImage, the TintedImage category (lifted directly from the Tinted Image sample at http://developer.apple.com/samplecode/, and the 
\f2\fs20 \CocoaLigature0 CompositingImageTransformer 
\f1\fs24 \CocoaLigature1 class.\
\
There has been a change to the behavior of the "Plus (Darker)" compositing mode in Mac OS X 10.3.  Previous versions of Mac OS X  implemented this mode incorrectly.  In the "RGB Image" sample for earlier versions of Mac OS X, I composited the complement of each primary color to separate that channel.\
\
Another approach to separating images into their components would be to separate the pixel data manually, but by using compositing I can get the results I want regardless of the format of the original image.  In an earlier version of this sample, I was unmeshing the bytes in the RGB pixels manually, when I realized that by doing far more work, I was limiting myself to handling only one source data format! \
\
So, let's walk through the code:\
\

\f0\b RGBAppController.[hm]\

\f1\b0 \
This class is responsible for user interaction, and keeping the image views up to date.  It's implemented in three parts, with code for copy/paste operations and file handling in separate files.   \
\

\f0\b FileHandling.[hm]\

\f1\b0 \
This category of RGBAppController contains the code to handle the standard Open and Save panels.  If this were an NSDocument-based application, this wouldn't be necessary.\
\

\f0\b PasteboardHandling.[hm]\

\f1\b0 \
The methods in these files deal with copying an image to and from the default pasteboard.   \
\

\f0\b RGBTansformer.[hm]\

\f1\b0 \
These files implement the NSValueTransformer subclass 
\f2\fs20 \CocoaLigature0 CompositingImageTransformer
\f1\fs24 \CocoaLigature1 , which uses compositing to divide an image into its component colors.  \
\

\f0\b TintedImage.[hm]\
\

\f1\b0 This code is taken directly from the Tinted Image example, also available at the Apple DTS web site.  It provides a method to composite an image with a color, using any of the available compositing operators.\
\
\
Since the default image of the Mandrill doesn't have an Alpha channel, try dropping these images onto the color separation window:\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 {{\NeXTGraphic CD Audio.tiff \width2560 \height2560
}¬}{{\NeXTGraphic Drop Folder.tiff \width2560 \height2560
}¬}}