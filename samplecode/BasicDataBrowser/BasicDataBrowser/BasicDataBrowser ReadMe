BasicDataBrowser Sample Code
© 2000-2003 by Apple Computer, Inc. All rights reserved.

version 1.0

The BasicDataBrowser sample shows how to create a basic, functional data browser.

Other Sources of Reference
Tech Note TN2009, "The BrowserControl (aka That List View Thing)"
<http://developer.apple.com/technotes/tn/tn2009.html>

*******************************************************

Here is a high level outline of how to set up a Data Browser:

- create the control
- configure the formatting options & install callbacks
- populate with initial items
- route events like any other control & handle callbacks appropriatly

******************************************************
Detailed sequence of API calls:

// Create a browser
CreateDataBrowserControl(...);

// Configure the browser (exact ordering doesn't matter)
SetDataBrowserXXXX(...); // set various DataBrowser attributes
SetControlFontStyle(...); // set the content font (defaults to the system views font)
SetControlData(..., kControlKeyFilterTag,...); // Install a key filter

// Setup and install your callbacks
DataBrowserCallbacks callbacks;
InitDataBrowserCallbacks(&callbacks); // Initialize an empty set of callbacks

// Fill the various values of the callbacks structure with your UPPs
SetDataBrowserCallbacks(browser, &callbacks); 

// If you're using the ListView view style, format the list
AddDataBrowserListViewColumn(...); // repeat for each column
SetDataBrowserListViewXXXX(...); // customize ListView options
SetDataBrowserTableViewXXX(...); // customize table options (these also work for ColumnView)

// Now you can either explicitly populate
AddDataBrowserItems(...);

// Or you can implicitly populate by setting the target...
// ...which will result in a series of ItemEventNotification callbacks during 
// which you can explictly populate, or start a thread to populate, etc.
SetDataBrowserTarget(...);

// route draw, track, hittest, keydown, etc events to 
// the DataBrowser as you would any other control

All subsequent API usage is either an explicit change to the 
DataBrowser's state (changing a formatting attribute, changing view 
style, explicitly opening/closing/sorting a container, etc), or an 
implicit change initiated by a user interaction in which the appropriate 
callback(s) is/are called as needed.

The most important of the callbacks...the one you can't live without...is 
the GetSetItemData callback. This is how you communicate your data model 
to the browser. It basically consists of a giant switch statement upon 
the property requested. For each case of the switch, use the appropriate 
SetDataBrowserItemDataXXX(...) routine to add your appropriate data to 
the DataBrowserItemDataRef. This data is used by the DataBrowser for all 
rendering, hit testing, tracking, editing, and dragging of the content, 
as well as determining which items are selectable, editable, containers, 
etc. Those properties for which you do not respond (have a case entry in 
your switch table), an appropriate default value will be used instead.

The second most important callback is the ItemEventNotification callback. 
This is how the DataBrowser communicates changes of its internal state to 
your data model, and provides you with an opportunity to respond to each 
event or change in state...either by further manipulating the DataBrowser 
or some other part of your UI (opening a window in response to a 
DoubleClick event), or by updating your data model (fetching the contents 
of a container and further populating the DataBrowser in response to a 
ContainerOpened state change).

Modified 4/22/03