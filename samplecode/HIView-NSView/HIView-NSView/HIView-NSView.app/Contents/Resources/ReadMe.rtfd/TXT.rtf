{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf420
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red137\green19\blue21;\red35\green110\blue37;\red118\green15\blue80;
}
\margl1440\margr1440\vieww14960\viewh18160\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qj\pardirnatural

\f0\b\fs36 \cf0 HIView-NSView
\f1\b0\fs24 \
\

\f0\b Summary
\f1\b0 \
This sample shows how you can integrate Cocoa-based controls or 
\f2\fs20 NSView
\f1\fs24  into a Carbon window using a host 
\f2\fs20 HIView
\f1\fs24  control.\
\
The NSView in Carbon Window feature allows developers to create and embed NSViews into a Carbon HIView hierarchy and use the standard HIView APIs to manipulate that view.  This is accomplished by creating a NSView using one of the view creation APIs or through a nib file, then associating it with an HIView called 
\f2\fs20 HICocoaView
\f1\fs24 .  This view will work in Carbon composited and non-composited windows.\
\

\f0\b Project Dependencies\

\f1\b0 Mac OS X 10.5 Leopard, Xcode 3.0.
\f0\b \
\
Project Components
\f1\b0 \
As you probably noticed, this Xcode project includes both the AppKit and Carbon frameworks.  When you create your own projects, make sure to include them both.  You will also notice your Carbon-based nib file and Cocoa-based nib file.  Both need to be included in the project.  One additional requirement for the Carbon-Cocoa integration to be complete is by calling 
\f2\fs20 NSApplicationLoad
\f1\fs24 .  This needs to be called from Carbon applications wishing to integrate with Cocoa to make sure that Cocoa's NSApplication instance is loaded and initialized properly.  Also note that in this example we call Obj-C code directly from main.c.  In order for the compiler to recognize Obj-C code within a ".c" file we set the "Compile Sources As" build flag to explicitly use the Objective-C compiler.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qj\pardirnatural
\cf0 {{\NeXTGraphic Picture 2.png \width6700 \height3160
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qj\pardirnatural
\cf0 \
\

\f0\b HICocoaView
\f1\b0 \
There are two ways to create an HICocoaView.\
One is by using -\
	
\f2\fs20 OSStatus HICocoaViewCreate(NSView* inNSView, OptionBits inOptions, HIViewRef* outHIView);\

\f1\fs24 \
The other is by creating one through a nib file.\
\
This example shows how to do this through nib file, a method most commonly used by developers.\
In Interface Builder drag an HIView from the controls palette to your Carbon window.  Then in the HIView inspector, rename its 
\f2\fs20 "Class ID" 
\f1\fs24 to 
\f2\fs20 "com.apple.HICocoaView"
\f1\fs24 .  Note that until Interface Builder fully supports HICocoaView you will have to do this extra work.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qj\pardirnatural
\cf0 {{\NeXTGraphic Pasted Graphic.tiff \width5700 \height3080
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qj\pardirnatural
\cf0 \
\

\f0\b Two Approaches
\f1\b0 \
This example shows that you can create and set an NSView inside an HIView programatically like so -\
\pard\tx480\tx960\tx1440\tx1920\tx2400\tx2880\tx3360\tx3840\tx4320\tx4800\tx5280\tx5760\tx6240\tx6720\tx7200\tx7680\tx8160\tx8640\tx9120\tx9600\tx10080\tx10560\tx11040\tx11520\tx12000\tx12480\tx12960\tx13440\tx13920\tx14400\tx14880\tx15360\tx15840\tx16320\tx16800\tx17280\tx17760\tx18240\tx18720\tx19200\tx19680\tx20160\tx20640\tx21120\tx21600\tx22080\tx22560\tx23040\tx23520\tx24000\tx24480\tx24960\tx25440\tx25920\tx26400\tx26880\tx27360\tx27840\tx28320\tx28800\tx29280\tx29760\tx30240\tx30720\tx31200\tx31680\tx32160\tx32640\tx33120\tx33600\tx34080\tx34560\tx35040\tx35520\tx36000\tx36480\tx36960\tx37440\tx37920\tx38400\tx38880\tx39360\tx39840\tx40320\tx40800\tx41280\tx41760\tx42240\tx42720\tx43200\tx43680\tx44160\tx44640\tx45120\tx45600\tx46080\tx46560\tx47040\tx47520\tx48000\qj\pardirnatural

\f2\fs20 \cf0 \CocoaLigature0 \
HIViewRef editTextField;\
status = HIViewFindByID(HIViewGetRoot(window), kEditControlID, &editTextField);\
NSTextField* cocoaView;\
cocoaView = [[NSTextField alloc] init];\
[cocoaView setBezelStyle:NSRoundedBezelStyle];\
status = HICocoaViewSetView(editTextField, cocoaView);\
[cocoaView setStringValue: \cf2 @"http://www.apple.com/"\cf0 ];\
\

\f1\fs24 \CocoaLigature1 Or you can embed an NSView already created through a nib and its controller like so -\

\f2\fs20 \cf3 \CocoaLigature0 \
\cf0 HIViewRef view;\
status = HIViewFindByID(HIViewGetRoot(window), kWebControlID, &view);\
NSView* webView = [controller view];\
\cf4 if\cf0  (webView != \cf4 NULL\cf0 )\
	status = HICocoaViewSetView(view, webView);\cf3 \

\f1\fs24 \cf0 \CocoaLigature1  \

\f0\b Other Possibilities
\f1\b0 \
You are not limited to a HIView that represents a single control.  You can also embed an entire control hierarchy of NSViews into a HICocoaView.  Even more, you can reference your Cocoa NSWindow's "contentView" and set that to your HICocoaView.  The possibilities are there, you just need to take that leap forward and give it a try.\
\pard\pardeftab720\ql\qnatural
\cf0 \

\f0\b Related Documentation
\f1\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 For more information about this topic, read the article "Using Cocoa Views in a Carbon Window" in the Carbon-Cocoa Integration Guide.\
\
To find this article using Xcode:\
	Open the Documentation window in Xcode 3.0.\
	Select a Title search in the Core Reference Library.\
	In the Search field, type "Carbon-Cocoa" and press return.\
	Select the document "Carbon-Cocoa Integration Guide".\
	Select the article "Using Cocoa Views in a Carbon Window".\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qj\pardirnatural

\f0\b \cf0 Developer Technical Support\
\pard\pardeftab720\sa200\qj

\f1\b0 \cf0 The Apple Developer Connection Developer Technical Support (DTS) team is made up of highly qualified engineers with development expertise in key Apple technologies. Whether you need direct one-on-one support troubleshooting issues, hands-on assistance to accelerate a project, or helpful guidance to the right documentation and sample code, Apple engineers are ready to help you.  Refer to the {\field{\*\fldinst{HYPERLINK "http://developer.apple.com/technicalsupport/"}}{\fldrslt Apple Developer Technical Support}} page.\
}