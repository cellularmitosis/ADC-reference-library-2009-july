{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset77 LucidaGrande;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 LucidaGrande-Bold;
\f3\froman\fcharset77 Times-Roman;\f4\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red137\green19\blue21;\red0\green0\blue255;}
\pard\tx0\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\li1120\fi-1120\ri-1440\ql\qnatural

\f0\fs24 \cf0 Copyright \'a9 2005 by Apple Computer, Inc.  All Rights Reserved.\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\li1120\fi-400\ri140\ql\qnatural

\f1\fs30 \cf0 \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\li1120\fi-400\ri140\ql\qnatural

\f2\b\fs48 \cf0 Advanced Xcode Features\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\li960\fi-20\ri140\ql\qnatural

\f3\b0\fs28 \cf0 \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\li960\fi-20\ri-1180\ql\qnatural

\f0\fs24 \cf0 This project demonstrates several advanced features of Xcode 2.0 and 2.1.  It is not meant to demonstrate any particular framework or API, but rather how to structure an Xcode project efficiently.\
\

\f2\b\fs28 Cross-Project References (Subprojects)
\f0\b0 \

\fs24 \
The XcodeClientServer project has no code itself; it\'d5s a master project that just assembles two subprojects.  One builds an application that posts notifications (in the form of "stock trades") and the other builds an application that observes them.  Each project is self-contained, but the XcodeClientServer project integrates them together.\
\
Note the two groups \'d2Client Project\'d3 and \'d2Server Project\'d3 in the XcodeClientServer project\'d5s Groups & FIles list.  Each contains a 
\f2\b project reference
\f0\b0  to the project file for the subproject.  Each project reference can be disclosed to reveal its build product.  This example project just builds the two subprojects, and doesn't use their build products.  \
\
The XcodeClientServer project has only one target: an aggregate target that simply builds and assembles other targets.  Turn down its disclosure arrow and you note that its two dependents are the StockObserver and StockMarket targets from the subprojects.  This 
\f2\b dependency
\f0\b0  ensures that when you build the XcodeClientServer project, the two subprojects get built.\
\

\f2\b\fs28 Configuration Files
\f0\b0 \

\fs24 \
Because the client and server are similar, it's possible to factor out the common build settings and share them between the targets that build them.  The XcodeClientServer project contains a \'d2CommonBuildSettings.xcconfig\'d3 file that has three build settings that are shared between the two subprojects.  Open each project by double-clicking, select its top-level Project icon, and choose Get Info.  In the Build tab of the inspector, note the "Based On" popup near the bottom.  In all configurations for this project, the popup is set to the CommonBuildSettings file.  This means that any change you make in the CommonBuildSettings.xcconfig file will take effect in all configurations of every target of both subprojects.\
\

\f2\b\fs28 Shared Precompiled Headers
\f0\b0 \

\fs24 \
The common Configuration File defines the settings for Prefix Header and Precompile Prefix Header.  Because the prefix header is shared between  the projects, and the projects have substantially similar settings, the resulting precompiled headers can be shared between the projects.  Choose Clean All on the main project (and remove the precompiled headers), then open and build the StockObserver project.  Notice that it precompiles its prefix file.  Then open and build the StockMarket project.  Note that it reuses the same precompiled header file automatically.\

\f2\b\fs28 \
Per-Configuration Settings\
\

\f0\b0\fs24 In the StockMarket project, select the StockMarket target and choose Get Info.  Choose "All Configurations" and "General" in the Build tab, and enter "Info" into the search bubble.  You'll see a build setting named 
\f2\b Info.plist Preprocessor Definitions
\f0\b0  whose value is \'d2<multiple values>\'d3.  If you choose among the configurations in the popup menu, you'll see that its value is simply _RELEASE_ in the Release configuration, and _CONFIGURATION_=$(CONFIGURATION) in the others.  This means that in Release builds, _RELEASE_ is defined and _CONFIGURATION_ is undefined; and in Debug and Default builds _RELEASE_ is undefined and _CONFIGURATION_ is defined as \'d2Debug\'d3 or \'d2Default,\'d3 respectively.  This shows how you can set a build setting to different values on a per-configuration basis.\

\f2\b\fs28 \
Info.plist Preprocessing
\f0\b0 \

\fs24 \
Each subproject has an Info-(name).plist file that's used to create the Info.plist file in the build product. By setting the 
\f2\b Preprocess Info.plist File 
\f0\b0 build setting, this file is passed through the C preprocessor before being copied to the build product.  This preprocessing step has its own prefix file and set of preprocessor macro defines, separate from the ones for real code, so that C code doesn't get injected into the plist.  But by using macro expansion and preprocessor directives, the project can create different plist content in different configurations.  The value for the NSHumanReadableCopyrightString is defined this way:\
\
\pard\tx480\tx960\tx1440\tx1920\tx2400\tx2880\tx3360\tx3840\tx4320\tx4800\tx5280\tx5760\tx6240\tx6720\tx7200\tx7680\tx8160\tx8640\tx9120\tx9600\tx10080\tx10560\tx11040\tx11520\tx12000\tx12480\tx12960\tx13440\tx13920\tx14400\tx14880\tx15360\tx15840\tx16320\tx16800\tx17280\tx17760\tx18240\tx18720\tx19200\tx19680\tx20160\tx20640\tx21120\tx21600\tx22080\tx22560\tx23040\tx23520\tx24000\tx24480\tx24960\tx25440\tx25920\tx26400\tx26880\tx27360\tx27840\tx28320\tx28800\tx29280\tx29760\tx30240\tx30720\tx31200\tx31680\tx32160\tx32640\tx33120\tx33600\tx34080\tx34560\tx35040\tx35520\tx36000\tx36480\tx36960\tx37440\tx37920\tx38400\tx38880\tx39360\tx39840\tx40320\tx40800\tx41280\tx41760\tx42240\tx42720\tx43200\tx43680\tx44160\tx44640\tx45120\tx45600\tx46080\tx46560\tx47040\tx47520\tx48000\ql\qnatural\pardirnatural

\f4\fs18 \cf0 \CocoaLigature0 			#ifdef _RELEASE_\
				\cf2 <string>\cf0 Copyright (c) \cf3 2005\cf2 </string>\cf0 \
			#else\
				\cf2 <string>\cf0 _CONFIGURATION_ version built on __DATE__ __TIME__\cf2 </string>\cf0 \
			#endif\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\li960\fi-20\ri-1180\ql\qnatural

\f0\fs24 \cf0 \CocoaLigature1 \
Using the Per-Configuration Settings from above, this value is either set to a normal copyright string in a Release build, or a string with the configuration name, date, and time otherwise.\
\
Preprocessor macros for Info.plist preprocessing can be defined in the build settings, by the preprocessor itself (such as 
\f4\fs18 \CocoaLigature0 __DATE__ 
\f0\fs24 \CocoaLigature1 and
\f4\fs18 \CocoaLigature0  __TIME__
\f0\fs24 \CocoaLigature1 ) or in the prefix file and the headers it includes.  So your plist content can be defined in a header file shared between your plist and your source code.\
\
}