<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE> File Types</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="H2.Heading2"><A NAME="pgfId=5468"> </A>File Types</H1><P CLASS="T1.Text1"><A NAME="pgfId=8577"> </A>As mentioned earlier, the data associated with a file object must conform to the QuickDraw&nbsp;3D Object Metafile standard. That standard defines two general forms for the 3D data: text form and binary form. A <B CLASS="bold">text file</B> is a stream of ASCII characters with meaningful labels for each type of object contained in the file (for example, <TT CLASS="cv">NURBCurve</TT> for a NURB curve). A <B CLASS="bold">binary file</B> is a stream of raw binary data, the type of which is indicated by more cryptic object type codes (for example, <TT CLASS="cv">nrbc</TT> for a NURB curve). The text form is most useful when you're writing and debugging your application, but the binary form is usually smaller (requiring less storage space on disk or in memory) and can be read and written much faster.<A NAME="marker=5489"> </A><A NAME="marker=5490"> </A></P><P CLASS="I.Important"><A NAME="pgfId=5537"> </A>Disk-based metafile data, whether a text file or a binary file, should be contained in a file of type '<TT CLASS="cv">3DMF</TT>'. </P><P CLASS="T1.Text1"><A NAME="pgfId=5472"> </A>In addition, there are three ways to organize the data in a text or binary file object. A file object can be organized in normal mode, stream mode, or database mode.</P><P CLASS="T1.Text1"><A NAME="pgfId=8573"> </A>In <B CLASS="bold">normal mode,</B> a file object contains a <B CLASS="bold">table of contents</B> that lists all multiply-referenced objects in the file. This is usually the most compact file object organization, but it requires random access to the file object data in order to resolve references. (It might not, therefore, be the best mode to use when transferring 3D data to a remote machine on a network.)<A NAME="marker=5491"> </A><A NAME="marker=5525"> </A></P><P CLASS="T1.Text1"><A NAME="pgfId=5492"> </A>In <B CLASS="bold">stream mode,</B> a file object does not contain a table of contents and any references to objects are simply copies of the objects themselves. This may result in a larger file than normal mode, but it allows the file object to be processed sequentially, without random access.</P><P CLASS="T1.Text1"><A NAME="pgfId=8574"> </A>In <B CLASS="bold">database mode,</B> a file object contains a table of contents that lists <I CLASS="italics">every</I> object in the file, whether or not it is referenced within the file. This organization is useful if you want to determine what information a file object contains without having to read and process the entire file. This would be useful, for example, for creating a catalog of textures.<A NAME="marker=5523"> </A><A NAME="marker=5524"> </A></P><P CLASS="T1.Text1"><A NAME="pgfId=5485"> </A><A HREF="qd3dfileobj.5.htm#35505" CLASS="XRef">Figure&nbsp;1</A> shows a sample text file object organized in each of these three ways. Once again, for complete information about the types of file objects and the ways of organizing them, see the <I CLASS="italics">3D Metafile Reference</I>.</P><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>