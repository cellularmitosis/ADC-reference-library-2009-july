{	File:		PrintComments.p	Contains:		Written by: 		Copyright:	Copyright © 1991-1999 by Apple Computer, Inc., All Rights Reserved.				You may incorporate this Apple sample source code into your program(s) without				restriction. This Apple sample source code has been provided "AS IS" and the				responsibility for its operation is yours. You are not permitted to redistribute				this Apple sample source code as "Apple sample source code" after having made				changes. If you're going to re-distribute the source, we require that you make				it clear in the source that the code was descended from Apple sample source				code, but that you've made changes.	Change History (most recent first):				7/26/1999	Karl Groethe	Updated for Metrowerks Codewarror Pro 2.1				}UNIT PrintComments;	INTERFACEUSES	Types;	CONST(*	Type				Kind	Data Size	Data Type		Description								*)	TextBegin			= 150;	(*	6		TTxtPicRec		Begin text layout modifications			*)	TextEnd				= 151;	(*	0		NIL				End text layout modifications			*)	StringBegin			= 152;	(*	0		NIL				Begin segmented string					*)	StringEnd			= 153;	(*	0		NIL				End segmented string					*)	TextCenter			= 154;	(*	8		TTxtCenter		Specify center of rotation for			*) 								(*							the TextBegin comment (above)			*)	LineLayoutOff		= 155;	(*	0		NIL				Disable driver's line layout routine	*)		LineLayoutOn		= 156;	(*	0		NIL				Enable driver's line layout routine		*)		CustomLineLayout	= 157;	(*	16		LLCustom		Customize driver's line layout routine	*)	PolyBegin			= 160;	(*	0		NIL				Begin PostScript polygon				*)		PolyEnd				= 161;	(*	0		NIL				End PostScript polygon					*)		PolyIgnore			= 163;	(*	0		NIL				Ignore StdLine calls(for smoothed polys)*)		PolySmooth			= 164;	(*	1		PolyVerb		Smooth a polygon using B-Splines		*)		picPlyClo			= 165;	(*	0		NIL				Close an open polygon(connect start and	*)								(*							end points								*)	DashedLine			= 180;	(*	-		TDashedLine		Begin PostScript line dashing			*)	DashedStop			= 181;	(*	0		NIL				End PostScript line dashing				*)	SetLineWidth		= 182;	(*	4		Point			Set hi resolution line width 			*)		PostScriptBegin		= 190;	(*	0		NIL				Signal driver to ingnore Quickdraw calls*)	PostScriptEnd		= 191;	(*	0		NIL				Re-enable Quickdraw						*)	PostScriptHandle	= 192;	(*	-		Handle			Transfer a block of PostScript			*)		PostScriptFile		= 193;	(*	-		StringHandle	Transfer a file of PostScript			*)		TextIsPostScript	= 194;	(*	0		NIL				Use DrawString to send PostScript		*)	ResourcePS			= 195;	(*	8		Type/ID/Index	Transfer a resource of PostScript		*)		RotateBegin			= 200;	(*	4		TRotation		Begin hi-resolution graphics rotation	*)		RotateEnd			= 201;	(*	0		NIL				End rotation							*)	RotateCenter		= 202;	(*	8		Center			Specify center of rotation				*)	FormsPrinting		= 210;	(*	0		NIL				Specify graphics to remain resident		*)								(*							for all pages in the print job			*)	EndFormsPrinting	= 211;	(*	0		NIL				Evict the residents						*)TYPETTxtPicHdl = ^TTxtPicPtr;TTxtPicPtr = ^TTxtPicRec;TTxtPicRec = PACKED RECORD	tJus:	Byte;		(* Justification for line layout of text.								*)	tFlip:	Byte;		(* Horizontal or vertical flipping										*)	tRot:	INTEGER;	(* Text rotation (0..360) (for fractional rot., see extTTxtPicRec below)*)	tLine:	Byte;		(* Single, 1 1/2, or double line spacing								*)	tCmnt:	Byte;		(* Reserved																*)END;ExtTTxtPicHdl = ^ExtTTxtPicPtr;ExtTTxtPicPtr = ^ExtTTxtPicRec;ExtTTxtPicRec = PACKED RECORD	tJus:		Byte;	(* Justification for line layout of text								*)	tFlip:		Byte;	(* Horizontal or vertical flipping										*)	tRot:		INTEGER;(* (Ignored)															*)	tLine:		Byte;	(* Single, 1 1/2, or double line spacing								*)	tCmnt:		Byte;	(* Reserved																*)	tRotFixed:	Fixed;	(* Text rotation (0..360)												*)END;TTxtCenterHdl = ^TTxtCenterPtr;TTxtCenterPtr = ^TTxtCenter;TTxtCenter = RECORD	y, x:	Fixed;		(* Offset from current pen location to center of rotation				*)END;TPolyVerbHdl = ^TPolyVerbPtr;TPolyVerbPtr = ^TPolyVerb;TPolyVerb = PACKED RECORD	f7, f6, f5, f4, 	(* Reserved																*)	fPolyRes, 			(* TRUE = Polygon was specified with doubled points						*)	fPolyClose, 		(* TRUE = Polygon should be closed										*)	fPolyFill, 			(* TRUE = Polygon should be filled										*)	fPolyFrame:	BOOLEAN;(* TRUE = Polygon should be framed										*)END;TDashedLineHdl = ^TDashedLinePtr;TDashedLinePtr = ^TDashedLine;TDashedLine = PACKED RECORD	offset:		SignedByte;					(* Offset as specified by PostScript ???			*)	centered:	SignedByte;					(* (Ignored) ???									*)	dashed:		ARRAY [0..0] OF SignedByte;	(* Dynamic array of dash intervals					*)END;PSRsrcHdl = ^PSRsrcPtr;PSRsrcPtr = ^PSRsrc;PSRsrc = RECORD	PSType:		ResType;	(* Resource type.  (Actual resource format is 'STR ' or 'STR#')		*)	PSID:		INTEGER;	(* Resource ID.														*)	PSIndex:	INTEGER;	(* If PSType = 'STR ' then 0 otherwise index into 'STR#'.			*)END;RotationHdl = ^RotationPtr;RotationPtr = ^Rotation;Rotation = RECORD	flip:		INTEGER;	(* Horizontal/vertical flipping (0=none,1=horizontal,2=vertical)	*)	angle:		INTEGER;	(* Clockwise rotation in degrees (0..360)							*)END;ExtRotationHdl = ^ExtRotationPtr;ExtRotationPtr = ^ExtRotation;ExtRotation = RECORD	flip:		INTEGER;	(* Horizontal/vertical flipping (0=none,1=horizontal,2=vertical)	*)	angle:		INTEGER;	(* (Ignored)														*)	angleFixed:	Fixed;		(* Clockwise rotation in degrees (0..360)							*)END;END.