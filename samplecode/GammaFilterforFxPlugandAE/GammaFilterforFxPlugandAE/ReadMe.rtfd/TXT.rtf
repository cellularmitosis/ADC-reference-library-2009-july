{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf420
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red178\green0\blue0;}
\margl1440\margr1440\vieww16460\viewh21720\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs24 \cf0 In order to use this code sample, you need to have the FxPlug SDK installed, as well as the Adobe\'a8 After Effects SDK. You can download the FxPlug SDK here:\
\
<{\field{\*\fldinst{HYPERLINK "http://connect.apple.com"}}{\fldrslt 
\f1\fs18 \cf2 \ul \ulc2 \CocoaLigature0 http://connect.apple.com}}>\
\
Once you've logged in (you can get a free account if you don't already have one), you can click on "Downloads" then click on "Applications" to find the FxPlug SDK.\
\
You can download the After Effects SDK here:\
\
<{\field{\*\fldinst{HYPERLINK "http://www.adobe.com/devnet/aftereffects/"}}{\fldrslt 
\f1\fs18 \cf2 \ul \ulc2 \CocoaLigature0 http://www.adobe.com/devnet/aftereffects/}}>\
\
Because this sample relies on code that is only included with the After Effects SDK, you will need to take some steps to make things compile correctly. First, you should go into this folder within the After Effects SDK:\
\
Examples/Effect\
\
Copy the "Gamma_Table" folder, giving it a new name. Now copy the files included with this example into it, so it looks like this:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 {{\NeXTGraphic Picture 5.png \width15780 \height8000
}¬}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 \
Be sure to replace the existing Gamma_Table.xcodeproj with the one included with this example.\
\
Next, you'll need to modify the Gamma_Table.c and Gamma_Table.h files with this diff:\
\
Gamma_Table.c:\
25c25,26\
< \
---\
> #include "FxHelpers.h"\
> #include "GammaHelper.h"\
74,87c75,77\
< 	PF_ParamDef		def;\
< 	AEFX_CLR_STRUCT(def);\
< \
< 	PF_ADD_FIXED(	"Gamma", \
< 					GAMMA_MIN, \
< 					GAMMA_BIG_MAX, \
< 					GAMMA_MIN, \
< 					GAMMA_MAX, \
< 					GAMMA_DFLT,\
< 					1, \
< 					0,\
< 					0,\
< 					GAMMA_DISK_ID);\
< \
---\
>     \
>     err = (PF_Err)SetupGammaParameters (in_data);\
>     \
101,103d90\
< 	Gamma_Table		*g_tableP;\
< 	A_long			iL = 0;\
< \
105,118c92\
< 		PF_DISPOSE_HANDLE(out_data->sequence_data);\
< 	\}\
< 	out_data->sequence_data = PF_NEW_HANDLE(sizeof(Gamma_Table));\
< 	if (!out_data->sequence_data) \{\
< 		return PF_Err_INTERNAL_STRUCT_DAMAGED;\
< 	\}\
< \
< 	// generate base table\
< \
< 	g_tableP = *(Gamma_Table**)out_data->sequence_data;\
< 	g_tableP->gamma_val = (1L << 16);\
< \
< 	for (iL = 0; iL <= PF_MAX_CHAN8; iL++)\{\
< 		g_tableP->lut[iL] = (A_u_char)iL;\
---\
>         FXHFreeHandle (in_data, out_data->sequence_data);\
119a94,98\
>     \
>     out_data->sequence_data = (PF_Handle)AllocateAndInitGammaTable (in_data);\
>     if (out_data->sequence_data == NULL) \{\
>         return PF_Err_INTERNAL_STRUCT_DAMAGED;\
>     \}\
132c111\
< 		PF_DISPOSE_HANDLE(in_data->sequence_data);\
---\
>         FXHFreeHandle (in_data, in_data->sequence_data);\
152,174d130\
< // Computes the gamma-corrected pixel given the lookup table.\
< \
< static PF_Err \
< GammaFunc (	\
< 	A_long refcon, \
< 	A_long x, \
< 	A_long y, \
< 	PF_Pixel *inP, \
< 	PF_Pixel *outP)\
< \{\
< 	PF_Err		err = PF_Err_NONE;\
< 	GammaInfo	*giP = (GammaInfo*)refcon;	\
< 	\
< 	if (giP)\{\
< 		outP->alpha	= inP->alpha;\
< 		outP->red	= giP->lut[ inP->red ];\
< 		outP->green	= giP->lut[ inP->green ];\
< 		outP->blue	= giP->lut[ inP->blue ];\
< 	\} else \{\
< 		err = PF_Err_BAD_CALLBACK_PARAM;\
< 	\}\
< 	return err;\
< \}\
211,225c167,168\
< 			if (g_tableP->gamma_val != params[GAMMA_GAMMA]->u.fd.value) \{\
< 			\
< 				// if the table values are bad, regenerate table contents.\
< 				 \
< 				register double	temp, gamma;\
< \
< 				g_tableP->gamma_val	= params[GAMMA_GAMMA]->u.fd.value;\
< 				gamma				= (PF_FpLong)g_tableP->gamma_val / (double)(1L << 16);\
< 				gamma				= 1.0/gamma;\
< 				\
< 				for (xL = 0; xL <= PF_MAX_CHAN8; ++xL) \{\
< 					temp = PF_POW((PF_FpLong)xL / 255.0, gamma);\
< 					g_tableP->lut[xL] = (A_u_char)(temp * 255.0);\
< 				\}\
< 			\}\
---\
>             PF_Fixed    newGamma    = GetFixedParam (params, GAMMA_GAMMA, NULL);\
>             RegenerateTableIfNecessary (*(Gamma_Table**)out_data->sequence_data, newGamma);\
\
Gamma_Table.h:\
39,47d38\
< typedef struct \{\
< 	PF_Fixed	gamma_val;	\
< 	A_u_char	lut[256];\
< \} Gamma_Table;\
< \
< typedef struct \{				\
< 	unsigned char		*lut;\
< \} GammaInfo;\
< \
\
You should now be able to build both the After Effects plug-in and the FxPlug version of the example using the same source. The code should show you a simple way to factor out the common functionality used by both version of the plugins, allowing you to write your parameter handling and image processing code once, and have it work in both applications.\
\
If you have any questions, feel free to email me (Darrin Cardani) at <dcardani@apple.com>.\
}