Open Transport Traceroute Sample1.0b2This sample is a quick demonstration of how to implement traceroute on top of the Open Transport native APIs.  The sample is useful because it gives a good demonstration of the setting the IP TTL option and of using a "rawip" endpoint to receive and process ICMP packets.Theory of OperationTraceroute exploits two well supported features of the Internet Control Message Protocol (ICMP) protocol.  The first is that, whenever a router kills a packet because the Time To Live (TTL) has expired, the router is required to send an ICMP time exceeded packet back to the source.  The second is that, whenever a host gets a packet addressed to a port on which no one is listening, the host is required to send an ICMP port unreachable packet back to the source.Traceroute works by sending small UDP datagrams to the destination machine with increasing TTLs.  This causes each router encountered to generate the ICMP time exceeded, which allows you to determine the address of each router along the way.  The process terminates when you get an ICMP port unreachable (which means the final host attempted to deliver the packet but no one was listening) or when some user configurable limit on the TTL has been reached.Anyone interested in more details about the traceroute concept should consult a TCP/IP reference.Implementation DetailsThe code is actually very easy.  The big simplifying assumption, is that everything is run in synchronous mode.  The only remaining difficulties are:• setting the TTL option on outgoing UDP datagrams (see DoNegotiateIP_TTLOption),• clearing incoming T_UDERR errors on the UDP endpoint (see SendUDPWithTTL),• receiving and interpreting ICMP packets (see WaitAndPrintICMPs).The code was written with CodeWarrior 9 and tested on multiple machines running a variety of versions of Open Transport.CaveatsThe sample is not a complete traceroute implementation.  It lacks in the following areas:• Matching ICMP response to their corresponding original UDP packets.• Issuing multiple traces for each step, just in case one gets lost in the network.• Timing responses.• User interface.• Dealing with extraordinary conditions, like IP options in ICMP packets.• Other things that I'm not aware of because I'm not a TCP/IP guru.• The ability to traceroute anywhere except 130.43.2.2 (ie “apple.com”)  (–:Credits and Version HistoryI’d like to express my thanks to that developer (you know who you are) who goaded me into writing this sample by saying that it couldn’t be done.1.0b1 was the first released version.1.0b2 fixes a bug where I was testing the ICMP type byte twice rather than testing the type and code bytes.Share and EnjoyQuinn "The Eskimo!"Apple Developer Technical SupportNetworking, Communications, Hardware11 Feb 1997