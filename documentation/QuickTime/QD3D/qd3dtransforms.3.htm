<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE> Spaces</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="H2.Heading2"><A NAME="pgfId=3115"> </A>Spaces</H1><P CLASS="T1.Text1"><A NAME="pgfId=3118"> </A><A NAME="marker=3116"> </A><A NAME="marker=3117"> </A>A <B CLASS="bold">coordinate system</B> (or <B CLASS="bold">space</B>) is any system of assigning planar or spatial positions to objects. In general, QuickDraw&nbsp;3D operates with rectilinear or <B CLASS="bold">Cartesian coordinate systems,</B><A NAME="marker=3122"> </A> in which the position of a point in a plane or in space is determined by projecting the point onto the <B CLASS="bold">coordinate axes,</B><A NAME="marker=3123"> </A> which are mutually perpendicular lines that intersect at a point called the <I CLASS="italics">origin</I>. By convention, the <B CLASS="bold">origin</B><A NAME="marker=3124"> </A> is the planar point (0,&nbsp;0) or the spatial point (0,&nbsp;0,&nbsp;0). <A HREF="qd3dintroduction.b.htm#10501" CLASS="XRef">Figure&nbsp;3</A> shows a Cartesian coordinate system that is <B CLASS="bold">right-handed</B> (that is, if the thumb of the right hand points in the direction of the positive <I CLASS="italics">x</I> axis and the index finger points in the direction of the positive <I CLASS="italics">y</I> axis, then the middle finger points in the direction of the positive <I CLASS="italics">z</I> axis).<A NAME="marker=3128"> </A></P><P CLASS="Fg.Figure"><A NAME="pgfId=3133"> </A>Figure&nbsp;3<A NAME="10501"> </A>A right-handed Cartesian coordinate system</P><DIV><IMG SRC="qd3dtransforms-2.gif"></DIV><P CLASS="Note"><A NAME="pgfId=3134"> </A>You can, for certain purposes, specify positions using other types of coordinate systems, such as the <B CLASS="bold">polar coordinate system</B> (a system of assigning planar positions to objects in terms of their distances <I CLASS="italics">r</I> from the origin along a ray that forms a given angle  with a fixed coordinate line) or the <B CLASS="bold">spherical coordinate system</B> (a system of assigning spatial positions to objects in terms of their distances <I CLASS="italics">r</I> from the origin along a ray that forms a given angle  with a fixed coordinate line and another angle  with another fixed coordinate line). QuickDraw&nbsp;3D provides routines you can use to convert among these three types of coordinate systems. See the chapter <A HREF="qd3dmathfunc.htm#12941" CLASS="XRef">&quot;Mathematical Utilities&quot;</A> for details. Unless noted differently, this book always uses Cartesian coordinate systems. <A NAME="marker=3144"> </A><A NAME="marker=3145"> </A></P><P CLASS="T1.Text1"><A NAME="pgfId=2162"> </A>QuickDraw&nbsp;3D, like virtually all other 3D graphics systems, defines several distinct coordinate systems and maintains transforms that it uses to convert one coordinate system into another.</P><P CLASS="T1.Text1"><A NAME="pgfId=2182"> </A><A NAME="marker=2181"> </A>Because it's often useful to define an object once and then to create multiple copies of that object for placement at different positions and orientations, QuickDraw&nbsp;3D supports a <B CLASS="bold">local coordinate system</B> for each object you define. An object's local coordinate system is simply the coordinate system in which it is specified (that is, that determines the values you specify in the relevant data structure). Any given object can be defined using any of infinitely many local coordinate systems. Usually, you'll pick a local coordinate system whose origin coincides with some part of the object. For instance, it's quite natural to define a box using a local coordinate system whose origin is at the box's origin, and whose axes coincide with the box's axes.</P><P CLASS="Note"><A NAME="pgfId=2189"> </A>A local coordinate system is sometimes called an <B CLASS="bold">object coordinate system</B> or a <B CLASS="bold">modeling coordinate system,</B> and the space it defines is the <B CLASS="bold">object space</B> or <B CLASS="bold">modeling space.</B> </P><P CLASS="T1.Text1"><A NAME="pgfId=2216"> </A>The <B CLASS="bold">world coordinate system</B> (or <B CLASS="bold">world space</B>) defines the locations of all geometric objects as they exist at rendering or picking time, with all applicable transforms acting on them. It's important to note that world space is relevant only within a submitting loop, because the transforms that relocate or reorient an object must be applied to the object to determine its position and orientation in world coordinates.<A NAME="marker=2217"> </A></P><P CLASS="Note"><A NAME="pgfId=2218"> </A>The world coordinate system is sometimes called the <B CLASS="bold">global coordinate system</B> or the <B CLASS="bold">application coordinate system,</B> and the space it defines is the <B CLASS="bold">global space</B> or <B CLASS="bold">application space.</B> </P><P CLASS="T1.Text1"><A NAME="pgfId=1871"> </A>You can create copies of an object and place them at different locations by applying different transforms to each copy. A transform changes an object's position or orientation in world coordinates, but not its local coordinates. In other words, if you use the function <TT CLASS="cv">Q3Box_GetOrigin</TT> with two copies of a single box, the function always returns the same origin for each box, whether or not transforms have been applied to one or both of the copies.</P><P CLASS="T1.Text1"><A NAME="pgfId=1872"> </A>The relationship between an object's local coordinate system and the world coordinate system is specified by that object's <B CLASS="bold">local-to-world transform.</B> For objects that have no transforms applied to them at rendering time, the local-to-world transform can be represented by the identity matrix, in which case the local coordinate system of that object and the world coordinate system coincide. If one or more transforms is applied to the object at rendering time, the world space location of the object is determined by taking its local space position and applying the transforms to it.<A NAME="marker=1873"> </A><A NAME="marker=1874"> </A></P><P CLASS="T1.Text1"><A NAME="pgfId=1875"> </A>A world coordinate system defines the relative positions and sizes of geometric objects. When an object is rendered in a view, the view's camera specifies yet another coordinate system, the <B CLASS="bold">camera coordinate system</B> (or <B CLASS="bold">camera space</B>). A&nbsp;camera coordinate system is defined by the camera placement structure associated with the camera, which is defined like this:<A NAME="marker=1876"> </A></P><CODE CLASS="Cv.Code"><A NAME="pgfId=5708"> </A>typedef struct TQ3CameraPlacement {<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3Point3D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cameraLocation;<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3Point3D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pointOfInterest;<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3Vector3D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;upVector;<BR>} TQ3CameraPlacement;<BR></CODE><P CLASS="Note"><A NAME="pgfId=1881"> </A>See the chapter <A HREF="qd3dcameras.htm#14486" CLASS="XRef">&quot;Camera Objects&quot;</A> for complete information about the camera placement structure. </P><P CLASS="T1.Text1"><A NAME="pgfId=1885"> </A>The <TT CLASS="cv">cameraLocation</TT> field specifies the origin of the camera coordinate system. The <TT CLASS="cv">pointOfInterest</TT> field specifies the <I CLASS="italics">z</I> axis of the camera coordinate system, and the <TT CLASS="cv">upVector</TT> field specifies the <I CLASS="italics">y</I> axis of the camera coordinate system. The <I CLASS="italics">x</I> axis of the camera coordinate system is determined by the left-hand rule. <A HREF="qd3dtransforms.3.htm#14686" CLASS="XRef">Figure&nbsp;4</A> shows a camera coordinate system and its relation to the world coordinate system. In this figure, the camera is set to take an isometric view of the box whose origin is at the origin of the world coordinate system.</P><P CLASS="Fg.Figure"><A NAME="pgfId=1893"> </A>Figure&nbsp;4<A NAME="14686"> </A>A camera coordinate system</P><DIV><IMG SRC="qd3dtransforms-3.gif"></DIV><P CLASS="T1.Text1"><A NAME="pgfId=2245"> </A>As you know, a camera specifies a method of projecting a three-dimensional model onto a two-dimensional plane, called the <B CLASS="bold">view plane.</B> The camera, the view plane, and the hither and yon clipping planes together define the part of the model that is projected onto that view plane. As you can see in <A HREF="qd3dcameras.6.htm#35934" CLASS="XRef">Figure&nbsp;9-7</A>, these objects define a rectangular frustum known as the <B CLASS="bold">viewing box.</B> When perspective camera is used, the camera, the view plane, and the hither and yon clipping planes define a pyramidal frustum known as the <B CLASS="bold">viewing frustum</B> (see <A HREF="qd3dcameras.5.htm#18639" CLASS="XRef">Figure&nbsp;9-5</A>). Because a camera and its camera coordinate system determine a unique view frustum, camera space is also called <B CLASS="bold">frustum space.</B><A NAME="marker=2249"> </A><A NAME="marker=2250"> </A></P><P CLASS="T1.Text1"><A NAME="pgfId=1900"> </A>The final step in creating an image of a model is to map the two-dimensional image projected onto the view plane into the draw context associated with a view. In general, the draw context specifies a window on a screen or other display device that is to contain all or part of the view plane image. Accordingly, QuickDraw&nbsp;3D maintains, for each draw context, a <B CLASS="bold">window coordinate system</B> (or <B CLASS="bold">window space</B>) that defines the position of objects in the draw context. <A HREF="qd3dtransforms.3.htm#27869" CLASS="XRef">Figure&nbsp;5</A> shows a window coordinate system.<A NAME="marker=1907"> </A></P><P CLASS="Fg.Figure"><A NAME="pgfId=1912"> </A>Figure&nbsp;5<A NAME="27869"> </A>A window coordinate system</P><DIV><IMG SRC="qd3dtransforms-4.gif"></DIV><P CLASS="Note"><A NAME="pgfId=1913"> </A>A window coordinate system is sometimes called a <B CLASS="bold">screen coordinate system</B> or a <B CLASS="bold">draw context coordinate system,</B> and the space it defines is the <B CLASS="bold">screen space</B> or <B CLASS="bold">draw context space.</B> </P><P CLASS="T1.Text1"><A NAME="pgfId=1917"> </A>In addition to the local-to-world transform (which defines the relationship between an object's local coordinate system and the world coordinate system), QuickDraw&nbsp;3D also maintains a <B CLASS="bold">world-to-frustum transform</B> (which defines the relationship between the world coordinate system and the frustum coordinate system) and a <B CLASS="bold">frustum-to-window transform</B> (which defines the relationship between a frustum coordinate system and a window coordinate system). See <A HREF="qd3dtransforms.3.htm#31663" CLASS="XRef">Figure&nbsp;6</A>. You can, if necessary, get a matrix representation of these three transforms. See the chapter <A HREF="qd3dviews.htm#42288" CLASS="XRef">&quot;View Objects&quot;</A> for details.<A NAME="marker=2336"> </A><A NAME="marker=2344"> </A></P><P CLASS="T1.Text1"><A NAME="pgfId=2282"> </A>The world-to-frustum transform is actually the product of two transforms specified by matrices, the view orientation matrix and the view mapping matrix. The <B CLASS="bold">view orientation matrix</B> rotates and translates the view's camera so that it is pointing down the negative <I CLASS="italics">z</I> axis. The <B CLASS="bold">view mapping matrix</B> transforms the viewing frustum into a standard rectangular solid. This standard rectangular solid is a box containing <I CLASS="italics">x</I> values from -1 to 1, <I CLASS="italics">y</I> values from -1 to 1, and <I CLASS="italics">z</I> values from 0 to -1. The far clipping plane is the plane defined by the equation <I CLASS="italics">z</I>&nbsp;=&nbsp;- 1, and the near clipping plane is the plane defined by the equation <I CLASS="italics">z</I>&nbsp;=&nbsp;0.<A NAME="view orientation matrices;view mapping matrices"> </A></P><P CLASS="T1.Text1"><A NAME="pgfId=2299"> </A>With a perspective camera, the view mapping matrix performs most of the work of projection. The objects transformed by the world-to-frustum transform are still 3D, but it's easy to get the 2D projection onto the view plane by simply dropping the <I CLASS="italics">z</I> coordinate of each rendered point.<A NAME="marker=2354"> </A></P><P CLASS="Fg.Figure"><A NAME="pgfId=3222"> </A>Figure&nbsp;6<A NAME="31663"> </A>View state transformations</P><DIV><IMG SRC="qd3dtransforms-5.gif"></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>