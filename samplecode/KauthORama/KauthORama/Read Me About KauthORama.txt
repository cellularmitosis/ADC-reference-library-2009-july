Read Me About KauthORama
========================
1.2

KauthORama is a sample that demonstrates the use of the Kernel Authorization (Kauth) subsystem introduced in Mac OS X 10.4 Tiger.  KauthORama allows you to register a listener for any scope.  The listener has no effect on authorization decisions, but it prints a record of each authorization request so that you can see how Kauth interacts with high-level operations, like listing directories or copying files.

KauthORama requires Mac OS X 10.4 Tiger.

Packing List
------------
The sample contains the following items:

o Read Me About KauthORama.txt -- This file.
o KauthORama.c -- C source code for the kernel extension.
o Info.plist -- Property list for the kernel extension.
o KauthORama.xcodeproj -- An Xcode 2.4 project for the kernel extension.

Using the Sample
----------------
To use the sample, first install the kernel extension.

$ sudo cp -R KauthORama.kext /KauthORama.kext 
Password: ********
$ sudo chown -R root:wheel /KauthORama.kext 
$ sudo kextload -t /KauthORama.kext 
kextload: extension /KauthORama.kext appears to be valid
kextload: /KauthORama.kext loaded successfully

To confirm that it is installed, look at the last few entries in the system log.  You should see a startup message from the sample.

$ tail -5 /var/log/system.log
[...]
May 16 11:38:14 guy-smiley kernel[0]: KauthORama_start: Hello Cruel World!

You can also dump the sysctl tree to confirm that the KauthORama node is present.

$ sysctl -a | grep Kauth
kern.com_apple_dts_kext_KauthORama: 

Once the sample is loaded, you have to configure it.  For this example we're going to use KauthORama to monitor file operations within a specific directory.  To prevent our output being lost in the general background noise, we do all of our operations within the "KauthTest" directory in the root directory.  So we start by creating the target directory.

$ mkdir /KauthTest

Then we configure KauthORama using sysctl.

$ sudo sysctl -w kern.com_apple_dts_kext_KauthORama="add com.apple.kauth.fileop /KauthTest"
kern.com_apple_dts_kext_KauthORama:  -> add com.apple.kauth.fileop /KauthTest

The value of the kern.com_apple_dts_kext_KauthORama sysctl variable is a string that represents KauthORama's configuration.  In this case the string says to "install a listener for the com.apple.kauth.fileop scope and dump out any information that occurs within the /KauthTest directory".

To test this, make a copy of the "echo" command in the "/KauthTest" directory and then execute it.

$ cp /bin/echo /KauthTest/NewEcho
$ /KauthTest/NewEcho 'Hello Cruel World!'
Hello Cruel World!

If you dump the system log again, you'll see a bunch of entries.  I've included the output from my tests below; I've stripped off the various system log prefixes (the date and time, and so on) to make things clearer.

scope=com.apple.kauth.fileop, action=KAUTH_FILEOP_OPEN, uid=501, vnode=0x1323084, path=/KauthTest/NewEcho

scope=com.apple.kauth.fileop, action=KAUTH_FILEOP_OPEN, uid=501, vnode=0x1323084, path=/KauthTest/NewEcho

scope=com.apple.kauth.fileop, action=KAUTH_FILEOP_CLOSE, uid=501, vnode=0x1323084, path=/KauthTest/NewEcho, dirty=false

scope=com.apple.kauth.fileop, action=KAUTH_FILEOP_CLOSE, uid=501, vnode=0x1323084, path=/KauthTest/NewEcho, dirty=true

scope=com.apple.kauth.fileop, action=KAUTH_FILEOP_OPEN, uid=0, vnode=0x1323084, path=/KauthTest/NewEcho

scope=com.apple.kauth.fileop, action=KAUTH_FILEOP_CLOSE, uid=0, vnode=0x1323084, path=/KauthTest/NewEcho, dirty=false

scope=com.apple.kauth.fileop, action=KAUTH_FILEOP_OPEN, uid=501, vnode=0x1323084, path=/KauthTest/NewEcho

scope=com.apple.kauth.fileop, action=KAUTH_FILEOP_CLOSE, uid=501, vnode=0x1323084, path=/KauthTest/NewEcho, dirty=false

scope=com.apple.kauth.fileop, action=KAUTH_FILEOP_EXEC, uid=501, vnode=0x1323084, path=/KauthTest/NewEcho

As you can see, copying the file involved opening and closing it a bunch of times.  The fourth entry is particularly interesting because you can see that the file was dirty when it was closed (that is, the file had been modified).  The last entry is also interesting because it shows the KAUTH_FILEOP_EXEC operation generated by running the "NewEcho" command.

Building the Sample
-------------------
The sample was built using Xcode 2.4 on Mac OS X 10.4.8 Tiger.  You should be able to just open the project and choose Build from the Build menu.  This will build "KauthORama.kext" in the "Build" directory.

How it Works
------------
For a detailed discussion of Kauth, see DTS Technote 2127 "Kernel Authorization".

<http://developer.apple.com/technotes/tn2005/tn2127.html>

When you load KauthORama, it installs a sysctl oid (a node in the sysctl tree) called "kern.com_apple_dts_kext_KauthORama".  When you modify that oid, the SysctlHandler routine calls ConfigureKauth to interpret the new configuration string.  If the string is an "add" command, it installs a scope listener for the specified Kauth scope.  When an action is authorized within the scope, the kernel calls Kauth's scope listener.  This prints the action and its parameters, and then returns KAUTH_RESULT_DEFER to indicate that it has no information about whether this operation should be allowed.

Caveats
-------
In general, writing kernel code is hard.  Writing a Kauth listener is especially hard because it's intimately tied into critical kernel subsystems.   DTS Technote 2127 "Kernel Authorization" describes the Kauth technology in detail.  I strongly recommend that you read this technote before starting any Kauth development.

<http://developer.apple.com/technotes/tn2004/tn2127.html>

KauthORama was coded for simplicity, not efficiency.  A production Kauth listener should be much more careful about its impact on system performance.

KauthORama contains a workaround for a recently discovered kernel bug.  To learn more about this, look at the PrintWarning routine in "KauthORama.c".

Credits and Version History
---------------------------
If you find any problems with this sample, mail <dts@apple.com> and I'll try to fix them up.

1.0 (May 2005) was the first shipping version.

1.1 (Jul 2005) was updated to include an Xcode 2.1 project to produce universal binaries.  There were no code changes required for it to run correctly on the Developer Transition Systems.  However, I did modify the code slightly to eliminate some new warnings produced by GCC 4.0.

1.2 (Jan 2007) added a workaround to the kernel bug described in the "Caveats" section.  I also tweaked the project a little to make it easier to update, and to bring in into line with my current coding standards.

Share and Enjoy.

Apple Developer Technical Support
Networking, Communications, Hardware

2 Jan 2007

$Log: Read\040Me\040About\040KauthORama.txt,v $
Revision 1.4  2007/01/02 16:58:08         
Update for version 1.2.

Revision 1.3  2005/07/21 23:34:58         
Updated for version 1.1.

Revision 1.2  2005/06/21 12:43:53         
Updated link to technote.

Revision 1.1  2005/05/16 11:07:00         
First checked in.

