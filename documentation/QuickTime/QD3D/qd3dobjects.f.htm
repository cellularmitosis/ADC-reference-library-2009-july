<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Managing Shared Objects</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=4416"> </A>Managing Shared Objects</H1><P CLASS="T1.Text1"><A NAME="pgfId=4421"> </A><A NAME="marker=4417"> </A>QuickDraw&nbsp;3D provides routines that you can use to get a reference to a shared object or to get the type of a <A NAME="marker=17710"> </A>shared object.</P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4422"> </A>Q3Shared_GetReference</H2><P CLASS="T1.Text1"><A NAME="pgfId=4424"> </A><A NAME="marker=4423"> </A><A NAME="marker=2142"> </A>You can use the <TT CLASS="cv">Q3Shared_GetReference</TT> function to get a reference to a shared object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21372"> </A>TQ3SharedObject Q3Shared_GetReference (TQ3SharedObject sharedObject);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21374"> </A><TT CLASS="cv">sharedObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=9684"> </A>A shared object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4427"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4428"> </A>The <TT CLASS="cv">Q3Shared_GetReference</TT> function returns, as its function result, a reference to the shared object specified by the <TT CLASS="cv">sharedObject</TT> parameter. You can use this function to prevent QuickDraw&nbsp;3D from deleting an object twice.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=15642"> </A>ERRORS</H3><P CLASS="T1.Text1"><A NAME="pgfId=15643"> </A><TT CLASS="cv">kQ3ErrorNULLParameter kQ3ErrorInvalidObjectParameter</TT></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=9691"> </A>Q3Shared_IsReferenced</H2><P CLASS="T1.Text1"><A NAME="pgfId=9732"> </A>You can use the <TT CLASS="cv">Q3Shared_IsReferenced</TT> function to determine whether a shared object has more than one reference to it.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21388"> </A>TQ3Boolean Q3Shared_IsReferenced (TQ3SharedObject sharedObject);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21390"> </A><TT CLASS="cv">sharedObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=9738"> </A>A shared object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=9718"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=9721"> </A>The <TT CLASS="cv">Q3Shared_IsReferenced</TT> function returns, as its function result, a Boolean value that indicates whether the shared object specified by the <TT CLASS="cv">sharedObject</TT> parameter has more than one reference to it (<TT CLASS="cv">kQ3True</TT>) or has only one reference to it (<TT CLASS="cv">kQ3False</TT>).</P><P CLASS="T1.Text1"><A NAME="pgfId=9700"> </A>The <TT CLASS="cv">Q3Shared_IsReferenced</TT> function is intended for use by an application or other code that needs to determine whether it has the only existing reference to a shared object.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=9757"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=9758"> </A>You should never call <TT CLASS="cv">Q3Shared_IsReferenced</TT> as follows:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=21401"> </A>while (Q3Shared_IsReferenced(mySharedObject)) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;Q3Object_Dispose(mySharedObject);<BR>}<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=9771"> </A>This code will cause your application to crash.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=15648"> </A>ERRORS</H3><P CLASS="T1.Text1"><A NAME="pgfId=15649"> </A><TT CLASS="cv">kQ3ErrorNULLParameter kQ3ErrorInvalidObjectParameter</TT></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4432"> </A>Q3Shared_GetType</H2><P CLASS="T1.Text1"><A NAME="pgfId=4434"> </A><A NAME="marker=4433"> </A><A NAME="marker=2154"> </A>You can use the <TT CLASS="cv">Q3Shared_GetType</TT> function to get the type of a shared object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21408"> </A>TQ3ObjectType Q3Shared_GetType (TQ3SharedObject sharedObject);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21410"> </A><TT CLASS="cv">sharedObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4436"> </A>A shared object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4437"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4438"> </A>The <TT CLASS="cv">Q3Shared_GetType</TT> function returns, as its function result, the type identifier of the shared object specified by the <TT CLASS="cv">sharedObject</TT> parameter. If successful, <TT CLASS="cv">Q3Shared_GetType</TT> returns one of these constants:<A NAME="marker=4439"> </A></P><CODE CLASS="Cv.Code"><A NAME="pgfId=21421"> </A>kQ3SharedTypeAttachment<BR>kQ3SharedTypeControllerState<BR>kQ3SharedTypeDrawContext<BR>kQ3SharedTypeFile<BR>kQ3SharedTypeReference<BR>kQ3SharedTypeRenderer<BR>kQ3SharedTypeSet<BR>kQ3SharedTypeShape<BR>kQ3SharedTypeShapePart<BR>kQ3SharedTypeStorage<BR>kQ3SharedTypeString<BR>kQ3SharedTypeTexture<BR>kQ3SharedTypeTracker<BR>kQ3SharedTypeViewHints<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=4441"> </A>If the type cannot be determined or is invalid, <TT CLASS="cv">Q3Shared_GetType</TT> returns the value <TT CLASS="cv">kQ3ObjectTypeInvalid</TT>.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=15654"> </A>ERRORS</H3><P CLASS="T1.Text1"><A NAME="pgfId=15655"> </A><TT CLASS="cv">kQ3ErrorNULLParameter kQ3ErrorInvalidObjectParameter</TT></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=9821"> </A>Q3Shared_GetEditIndex</H2><P CLASS="T1.Text1"><A NAME="pgfId=9826"> </A>You can use the <TT CLASS="cv">Q3Shared_GetEditIndex</TT> function to get the edit index for a shared object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21430"> </A>unsigned long Q3Shared_GetEditIndex (TQ3SharedObject sharedObject);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21432"> </A><TT CLASS="cv">sharedObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=9888"> </A>A shared object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=9844"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=9847"> </A>The <TT CLASS="cv">Q3Shared_GetEditIndex</TT> function returns, as its function result, the current edit index of the shared object specified by the <TT CLASS="cv">sharedObject</TT> parameter. An <B CLASS="bold">edit index</B><A NAME="marker=17711"> </A> is a unique number associated with a shared object that changes each time the object is edited. You can use the edit index to determine whether an object you are caching has changed since the object was cached, using code such as the following:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=21443"> </A>struct -&gt; editIndex = Q3Shared_GetEditIndex(foo);<BR>struct -&gt; object = Q3Shared_GetReference(foo);<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=15689"> </A>Later you can determine if the object has been edited:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=21447"> </A>if (struct-&gt;editIndex !=<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3Shared_GetEditIndex(struct-&gt;object)) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Has been edited -- update or re-create caches. */<BR>} else {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Not edited */<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR></CODE></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=9912"> </A>SEE ALSO</H3><P CLASS="T1.Text1"><A NAME="pgfId=9913"> </A>Use the <TT CLASS="cv">Q3Shared_Edited</TT> function to manually change an object's edit index.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=15660"> </A>ERRORS</H3><P CLASS="T1.Text1"><A NAME="pgfId=15674"> </A><TT CLASS="cv">kQ3ErrorNULLParameter kQ3ErrorInvalidObjectParameter kQ3ErrorInvalidObjectType</TT></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=15670"> </A>Q3Shared_Edited</H2><P CLASS="T1.Text1"><A NAME="pgfId=15671"> </A>You can use the <TT CLASS="cv">Q3Shared_Edited</TT> function to change a shared object's edit index.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21457"> </A>TQ3Status Q3Shared_Edited (TQ3SharedObject sharedObject);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21459"> </A><TT CLASS="cv">sharedObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=9890"> </A>A shared object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=9877"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=9880"> </A>The <TT CLASS="cv">Q3Shared_Edited</TT> function changes the edit index of the shared object specified by the <TT CLASS="cv">sharedObject</TT> parameter. This function is designed for use by shared plug-in objects; those objects should call <TT CLASS="cv">Q3Shared_Edited</TT> whenever their private data changes.<A NAME="marker=4442"> </A></P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=15719"> </A>ERRORS</H3><P CLASS="T1.Text1"><A NAME="pgfId=15720"> </A><TT CLASS="cv">kQ3ErrorNULLParameter kQ3ErrorInvalidObjectParameter</TT></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>