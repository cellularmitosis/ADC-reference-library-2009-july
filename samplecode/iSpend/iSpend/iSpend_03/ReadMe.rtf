{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww18740\viewh16480\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\b\fs36 \cf0 iSpend -- Version 3
\f1\b0\fs24 \
\
This milestone demonstrates the use of several Cocoa features.  This milestone shows you how to add NSDatePicker and NSViewAnimation to your application, both new to Tiger.  It also illustrates how to enhance sorting support in a table view and how to add undo support, both using bindings.\
\

\f0\b\fs28 NSDatePicker
\fs24 \
\

\f1\b0 * The BankTransactionView and StockTransactionView in 
\f0\b MyDocument.nib
\f1\b0  have been modified to use NSDatePickers rather than NSTextFields to display dates.  The "Date" NSDatePicker in BankTransactionView and the "Sale Date" NSDatePicker in StockTransactionView are bound to TransactionsController.selection.date, which is the same binding that was used by the NSTextFields they replaced.  \
\
* A "Choose Date" utility window has also been added to contain a Graphical style NSDatePicker.  A button has been added to the right of the "Date" and "Sale Date"  date pickers and given an icon depicting a small calendar.  The target/action of the button is connected  to orderFront: on the "Choose Date" panel.  This Graphics style NSDatePicker is also bound to TransactionsController.selection.date.  This binding allows the user to update the date of a transaction by using either style of NSDatePicker.\
\
Files modified: MyDocument.nib\
\

\f0\b\fs28 Sorting\
\

\f1\b0\fs24 This section shows how to use bindings to improve the sorting support provided by NSArrayController.\
\
* Two instance variables have been added to TransactionsController in 
\f0\b TransactionsController.h
\f1\b0 .  A TransactionsController(Sorting) category has been added with method declarations to support sorting.\
\
* 
\f0\b TransactionsController_Sorting.m 
\f1\b0 implements the sorting support.  \
* bind:toObject:withKeyPath:options: is overridden in order to register the TransactionsController instance as an observer of the keyPath to which its contentArray is bound.  This causes observeValueForKeyPath:ofObject:change:context: to be invoked whenever one or more transactions are added or removed, with the context we specified (@"TransactionsController.transactions").  If transactions have been added, a call to rearrangeObjects is scheduled (but deferred to coalesce calls).  updateObservationForOldTransactions:newTransactions: is called to stop observing key paths in transactions that have been removed, and to start observing key paths in transactions that have been added.  The key paths observed correspond to the keys for TransactionsController's current sort descriptors.  This in turn causes observeValueForKeyPath:ofObject:change:context: to be invoked with the context we specify ("TransactionsController.sort"), whenever a value for one of the observed (sorted) keyPaths changes in a transaction.\
\
Files modified: TransactionsController.h\
Files added: TransactionsController_Sorting.m\

\f0\b\fs28 \
Undo\
\

\f1\b0\fs24 This section shows how to use bindings to implement invocation-based undo on the transactions array in the document, and how to use simple undo for the values of each transaction.\
\
* An ivar has been added to Transaction.h, and method declarations have been added to 
\f0\b MyDocument.h
\f1\b0  and 
\f0\b Transaction.h
\f1\b0 .\

\f0\b\fs28 \

\f1\b0\fs24 * observeValueForKeyPath:ofObject:change:context: in
\f0\b  MyDocument.m 
\f1\b0 is modified to prepare invocation-based undo for adding or removing transactions.  MyDocument is set up as an observer of the transactions keyPath, which causes observeValueForKeyPath... to be invoked whenever one or more transactions are added or removed.  We get the array of removed transactions from the change dictionary and prepare an invocation-based undo to add those transactions back to the transactions array at their current indexes.  We also get the array of added transactions and prepare an invocation-based undo to remove those transactions from the transactions array.  We also call setDocument:self on each added transaction so that each transaction can find the document's undoManager.\
* setOpeningBalance: is modified to prepare an invocation-based undo to restore the previous balance.\
\
* the setter accessors in 
\f0\b Transaction.m 
\f1\b0 are modified to use simple or invocation-based undo to restore fields to their previous values.\

\f0\b\fs28 \

\f1\b0\fs24 Files modified: MyDocument.h, MyDocument.m, Transaction.h, Transaction.m\
\

\f0\b\fs28 NSViewAnimation\
\

\f1\b0\fs24 * An ivar has been added to 
\f0\b ExpandableViewController.h\

\f1\b0 * updateView in 
\f0\b ExpandableViewController.m 
\f1\b0 has been modified to use NSViewAnimation to fade out a disappearing view, to resize the window, and to fade in an appearing view.  The view shown can change when a disclosure triangle is toggled, or when the transaction type property of the current transaction changes.  View and window frame calculations are done so that the view and window appear anchored in the upper left.\

\f0\b\fs28 \

\f1\b0\fs24 Files modified: ExpandableViewController.h, ExpandableViewController.m\
}