Building QuickTime Sample CodeThis Read Me gives a general description of these samples, together with instructions for installing the QuickTime 4 SDK headers and libraries, and for building the samples. For specific information about each sample, look for a Read Me file that comes with the sample.About the QuickTime 4 Sample CodeThe QuickTime 4 sample code includes a number of individual applications and QuickTime components that illustrate how to utilize various capabilities of QuickTime, QuickTime Streaming  and QuickTime VR.  The sample code is intended to illustrate ways of using the QuickTime APIs correctly. To make the code easier to read, robust error handling has been sacrificed. In writing your own applications, you will need to provide proper handling of errors.QuickTime is designed to provide multi-platform support for developers. Most source code that uses QuickTime written for the Macintosh should compile and execute correctly under Windows (and vice versa). The sample code provided in this area is the same for both platforms. The exception is when the sample has no corollary on the other platform. For example, there are no MDI or SDI versions of SimpleEdit for a Macintosh.Installing the Header Files and LibrariesQuickTime 4 provides a single set of Interfaces and Libraries for both MacOS and Windows programming. After you've downloaded the Interfaces and Libraries, you should place them in a location that can be accessed by your development environment's compiler. We recommend that you place the header files into the appropriate directory, either QTDevMac or QTDevWin, and follow the recommendations outlined below.The QuickTime Interfaces and Libraries are available at:<http://www.apple.com/quicktime/developers/qtsdk.html>Please keep these points in mind as you begin working with the QuickTime header files:(1) On Macintosh systems, the header files included in the QuickTime 4 SDK augment the Universal Headers, version 3.2. On Windows systems, a complete set of header files is included in the SDK. On either system, you must (1) make sure that the compiler finds the QuickTime header files before it finds any existing header files, or (2) replace your existing header files by the new QuickTime header files.You can accomplish option (1) by placing the QuickTime header files in the file access path before any existing header files. This is the strategy used in the QuickTime 4 SDK sample code. You can accomplish (2) by putting the QuickTime header files into the location currently occupied by your existing header files.(2) Note that a very few MacOS header files have been renamed (principally to avoid name space conflicts with Windows header files). For instance, the file Windows.h (containing Window Manager stuff) is now named MacWindows.h.(3) You must either rebuild any precompiled headers you are using, or discontinue using those precompiled headers. Consult the CodeWarrior documentation (or the documentation for your development environment) for information on using precompiled headers. The sample code in the QuickTime SDK does not rely on any precompiled headers.(4) You should not need to rebuild any libraries, even if they depend on precompiled headers.(5) If you install a new version of CodeWarrior and have previously replaced the CW headers with the QuickTime revised headers, you will need to re-replace the CW headers with the QT headers. Similarly, you will need to rebuild any precompiled headers your project may be using.The libraries provided with the QuickTime 4 SDK are platform-specific. You should link MacOS PowerPC applications and components using the library QuickTimeLib. If you are using the QuickTime VR APIs, you should also link against the library QuickTimeVRLib. If you are using QuickDraw 3D, you should also link against the library QuickDraw3DLib. If you are using QuickTime Streaming, you should also link against the library QTStreamLib.You should link Windows applications and components using the qtmlclient.lib library. If you are using the QuickTime VR APIs, you should also link against the library QTVR.LIB. If you are using QuickDraw 3D, you should also link against the library qd3d.lib. If you are using QuickTime Streaming, you should also link against the library QTSClient.lib.Note: the names of the development libraries are subject to change.Building Samples on the MacOSAll the MacOS samples can be built using the Metrowerks CodeWarrior Integrated Development Environment (IDE), version 3.1 or later. Project files (usually with names ending in .mcp) are found in appropriate locations. These project files are fully configured with references to the source files, header files, and libraries necessary to build applications or components that will execute on the MacOS. (You should also be able to build the samples using earlier or later versions of the CodeWarrior IDE or using other development environments, but this has not been extensively verified.)Before building a MacOS project, you might need to revise the file access paths that are contained in the project file. Once you've decided where to install the QuickTime header files and libraries, you'll need to make sure that the project can find those files. Open the project settings dialog box (using a menu command in the IDE's Edit menu) and ensure that the paths to the QuickTime header files and the QuickTime libraries are in the project's access paths.Building Samples on WindowsAll of the Windows samples can be built using Microsoft Visual C++, version 5.0 or later. Project workspace files (with names ending .dsw) are found in appropriate locations. These files are fully configured with references to the source files, header files, and libraries necessary to build applications or codecs that will execute on Windows. Before building a Windows project, you might need to revise the file paths contained in a project workspace file. Consult the documentation provided with the Visual C++ development environment for instructions on doing this.Currently, many of the Windows samples can also be built using the Metrowerks CodeWarrior Integrated Developement Environment (IDE), version 3.1 or later. Macintosh and MacOS are trademarks of Apple Computer, Inc. Microsoft, Visual C++, and Windows are registered trademarks of Microsoft Corporation.