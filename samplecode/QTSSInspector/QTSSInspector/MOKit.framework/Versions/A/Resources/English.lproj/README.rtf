{\rtf1\mac\ansicpg10000\cocoartf100
{\fonttbl\f0\froman\fcharset77 Times-Roman;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\froman\fcharset77 Times-Bold;
\f3\froman\fcharset77 Times-Italic;}
{\colortbl;\red255\green255\blue255;}
\vieww12020\viewh9100\viewkind0
\pard\ql\qnatural

\f0\fs24 \cf0 Copyright \'a91996-2001 by Mike Ferris.  All Rights Reserved.\
\
\pard\li760\ql\qnatural

\f1\b\fs52 \cf0 MOKit 2.6\
\pard\li1460\ql\qnatural

\fs80 \cf0 \
\pard\li1200\fi-1020\ql\qnatural

\fs28 \cf0 Overview\
\pard\li1200\fi-1020\ql\qnatural

\fs14 \cf0 \
\pard\tx3600\tx3980\tx4340\li1500\ql\qnatural

\f0\b0\fs28 \cf0 Be sure to check out the README_Installing and FrameworkIssues files.  They have important info to keep in mind when building or installing the kit.\
\pard\li1200\fi-1020\ql\qnatural

\f1\b\fs14 \cf0 \
\pard\tx3600\tx3980\tx4340\li1500\ql\qnatural

\f0\b0\fs28 \cf0 In addition to the MOKit framework itself, MOKit includes an InterfaceBuilder palette with a MORegexFormatter on it.  There is also a test program for MORegularExpression which is basically a repackaging of the test suite that came with the regular expression library that the class is based on.\
\pard\li1200\fi-1020\ql\qnatural

\f1\b\fs14 \cf0 \
\pard\tx3600\tx3980\tx4340\li1500\ql\qnatural

\f0\b0\fs28 \cf0 You'll have to check out the headers for details about the APIs of the classes and how to use them.  There's no reference documentation at this time.\
\pard\li1200\fi-1020\ql\qnatural

\f1\b\fs14 \cf0 \
\pard\tx3600\tx3980\tx4340\li1500\ql\qnatural

\f0\b0\fs28 \cf0 The source distribution does include a document describing the "Advanced Regular Expression" syntax that MORegularExpression is based on.\
\pard\tx3600\tx3980\tx4340\li1500\ql\qnatural

\fs56 \cf0 \
\pard\li1200\fi-1020\ql\qnatural

\f1\b\fs28 \cf0 Features\
\pard\li1200\fi-1020\ql\qnatural

\fs14 \cf0 \
\pard\tx3600\tx3980\tx4340\li1500\ql\qnatural

\f0\b0\fs28 \cf0 This section briefly describes the targets of the MOKit_2 project.\
\pard\tx3600\tx3980\tx4340\li1500\ql\qnatural

\fs56 \cf0 \
\pard\li1200\fi-660\ql\qnatural

\f1\b\fs24 \cf0 MOKit (framework)\
\pard\li1200\fi-1020\ql\qnatural

\fs14 \cf0 \
\pard\tx3600\tx3980\tx4340\li1500\ql\qnatural

\f0\b0\fs28 \cf0 This is the point of the project.  The framework contains the reusable classes that anything else in this project merely supports.\
\pard\li1200\fi-1020\ql\qnatural

\f1\b\fs14 \cf0 \
\pard\tx3600\tx3980\tx4340\li1500\ql\qnatural

\f0\b0\fs28 \cf0 As well as containing the classes, this framework can serve as an example of how to construct a project to build a redistributable framework.\
\pard\li1200\fi-1020\ql\qnatural

\f1\b\fs14 \cf0 \
\pard\tx3600\tx3980\tx4340\li1500\ql\qnatural

\f0\b0\fs28 \cf0 The actual classes provided in the framework are briefly described below.  In addition to the classes there are a couple categories on Foundation objects and a function or two.  See the headers for details.\
\pard\li1200\fi-1020\ql\qnatural

\f1\b\fs14 \cf0 \
\pard\tx2320\tx3740\tx4140\li2320\ql\qnatural

\f2\fs28 \cf0 MORegularExpression
\f0\b0  encapsulates the notion of a regular expression.  Once initialized from a regular expression string, it can be used to match NSStrings.  You can see if a candidate string matches the regular expression, and, if it does, you can extract subexpression matches from the candidate string.  Starting in MOKit 2.6, MORegularExpression is based on Henry Spencer's Unicode based Regular Expression library.  Full source for the original package is provided.  Not only does this new library deal directly with Unicode, removing a big problem with all previous versions of MOKit, but it also adds a whole host of features and syntax for regular expressions.  One that affects the API is that you can now create a MORegularExpression that will match case-insensitively.\
\pard\li1200\fi-1020\ql\qnatural

\f1\b\fs14 \cf0 \
\pard\tx2320\tx3740\tx4140\li2320\ql\qnatural

\f2\fs28 \cf0 MORegexFormatter
\f0\b0  is an NSFormatter subclass that does validation by matching candidate strings against a set of MORegularExpressions.  Candidates must match at least one of the expressions to be valid.  This formatter also allows reformatting of the candidate based on subexpression matching and substitution.\
\pard\li1200\fi-1020\ql\qnatural

\f1\b\fs14 \cf0 \
\pard\tx2320\tx3740\tx4140\li2320\ql\qnatural

\f2\fs28 \cf0 MORegularExpression
\f0\b0  encapsulates the notion of a regular expression.  Once initialized from a regular expression string, it can be used to match NSStrings.  You can see if a candidate string matches the regular expression, and, if it does, you can extract subexpression matches from the candidate string.  MORegularExpression is based on the Unicode regexp library by Henry Spencer.  Full source for the original package is provided.\
\pard\li1200\fi-1020\ql\qnatural

\f1\b\fs14 \cf0 \
\pard\tx2320\tx3740\tx4140\li2320\ql\qnatural

\f2\fs28 \cf0 MOCompletionManager and MOCompletionStrategy
\f0\b0  are the basis for a extensible escape completion system.  I am not entirely satisfied with the general suitability of these APIs, but the idea is that if you want to do escape completion you create a manager and give it one or more instances of concrete subclasses of the strategy.  Then you ask the manager to do completions for you.  The API seems a bit too coupled to the notion of paths right now...\
\pard\li1200\fi-1020\ql\qnatural

\f1\b\fs14 \cf0 \
\pard\tx2320\tx3740\tx4140\li2320\ql\qnatural

\f2\fs28 \cf0 MOFileCompletionStrategy
\f0\b0  although, as a general architecture, the completion stuff is perhaps less than ideal, this concrete strategy works well enough and implements the type of completion that you tend to want most of the time, namely completing paths in the file system.  This strategy and a manager are easy to plug onto a text field to give you path completion.  See TextExtras' Open Quickly panel code for an example of how it's used.  It's also used in the Shell demo app.\
\pard\tx3600\tx3980\tx4340\li1500\ql\qnatural

\fs56 \cf0 \
\pard\li1200\fi-660\ql\qnatural

\f1\b\fs24 \cf0 FormatterPalette (IB palette)\
\pard\li1200\fi-1020\ql\qnatural

\fs14 \cf0 \
\pard\tx3600\tx3980\tx4340\li1500\ql\qnatural

\f0\b0\fs28 \cf0 This is an Interface Builder palette containing an MORegexFormatter.  You can drop one of these on a cell.  Once you do that, the cell will have a 
\f3\i Formatter
\f0\i0  option in the Inspector popup menu.  This option will show an inspector which allows you to configure the regular expressions to use for the formatter and what, if any, reformatting should be done on the value.\
\pard\tx3600\tx3980\tx4340\li1500\ql\qnatural

\fs56 \cf0 \
\pard\li1200\fi-660\ql\qnatural

\f1\b\fs24 \cf0 RegexTest (tool)\
\pard\li1200\fi-1020\ql\qnatural

\fs14 \cf0 \
\pard\tx3600\tx3980\tx4340\li1500\ql\qnatural

\f0\b0\fs28 \cf0 This tool is a validation test for MORegularExpression.  The test input was adapted from the test suite included with the original source (from a previous version of the regexp library, not the current one).\
}
