<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Configuration Methods</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH2.RoutineHd2"><A NAME="pgfId=11947"> </A><A NAME="37873"> </A>Configuration Methods</H1><P CLASS="T1.Text1"><A NAME="pgfId=11948"> </A>This section describes renderer configuration methods, all of which are optional.</P><DIV><H3 CLASS="RoH.RoutineHeading"><A NAME="pgfId=12769"> </A>Q3XMethodTypeRendererIsInteractive</H3><P CLASS="T1.Text1"><A NAME="pgfId=12767"> </A>The Q3XMethodTypeRendererIsInteractive renderer support functionality is optional. If it is supplied, it should report whether or not the renderer is interactive.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=20302"> </A>#define kQ3XMethodTypeRendererIsInteractive Q3_METHOD_TYPE('i','s','i','n')<BR></CODE><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=12804"> </A>DESCRIPTION</H4><P CLASS="T1.Text1"><A NAME="pgfId=12808"> </A>There is no actual method required for kQ3XMethodTypeRendererIsInteractive. The metahandler just returns <TT CLASS="cv">(TQ3XFunctionPointer)kQ3True</TT> if the renderer is intended to be used in interactive settings and <TT CLASS="cv">(TQ3XFunctionPointer)kQ3False</TT> otherwise. </P><P CLASS="T1.Text1"><A NAME="pgfId=12809"> </A>If neither value is returned, the renderer is assumed to be noninteractive. </P></DIV></DIV><DIV><H3 CLASS="RoH.RoutineHeading"><A NAME="pgfId=11954"> </A>TQ3XRendererModalConfigureMethod</H3><P CLASS="T1.Text1"><A NAME="pgfId=12048"> </A>The TQ3XRendererModalConfigureMethod renderer support functionality is optional. If it is supplied, it should display a modal dialog to let the user edit the renderer settings found in the renderer's private data. </P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=20308"> </A>#define kQ3XMethodTypeRendererModalConfigure <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3_METHOD_TYPE('r','d','m','c')<BR></CODE><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=20314"> </A>typedef TQ3Status (*TQ3XRendererModalConfigureMethod)(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3RendererObject&nbsp;&nbsp;&nbsp;&nbsp;renderer,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3DialogAnchor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dialogAnchor,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*canceled,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*rendererPrivate);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20318"> </A>renderer</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=11990"> </A>A renderer object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20328"> </A>dialogAnchor</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=11991"> </A>Platform-specific data passed by the client to support movable modal dialogs (described below).</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20337"> </A>canceled</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12029"> </A>Returns a boolean value to indicate that the user canceled the dialog.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20346"> </A>rendererPrivate</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12107"> </A> 	A pointer to structure of size <TT CLASS="cv">instanceSize</TT>, passed into <TT CLASS="cv">Q3ObjectHierarchy_RegisterClass</TT>, and initialized in your <TT CLASS="cv">kQ3MethodTypeObjectNew</TT> method.</DD></DL COMPACT><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=12133"> </A>DESCRIPTION</H4><P CLASS="T1.Text1"><A NAME="pgfId=12134"> </A>The renderer calls TQ3XRendererModalConfigureMethod for events not handled by the normal settings dialog; this is needed to support movable modal dialogs.</P><P CLASS="T1.Text1"><A NAME="pgfId=12148"> </A>The dialogAnchor parameter is platform-specific. With the MacOS it is a callback to the calling application's event handler, which must return <TT CLASS="cv">kQ3True</TT> if it  handles the event passed to the callback and <TT CLASS="cv">kQ3False</TT> if not.  An application that doesn't want to support a movable modal configure dialog should pass <TT CLASS="cv">NULL</TT> for the <TT CLASS="cv">clientEventHandler</TT> field of <TT CLASS="cv">TQ3DialogAnchor</TT> and should implement a nonmovable dialog. </P><P CLASS="T1.Text1"><A NAME="pgfId=12165"> </A>Modal dialogs in windows applications are always movable. With Windows, therefore, dialogAnchor is the handle of the owning window, typically the application's main window. </P></DIV></DIV><DIV><H3 CLASS="RoH.RoutineHeading"><A NAME="pgfId=12408"> </A>TQ3XRendererGetNickNameStringMethod</H3><P CLASS="T1.Text1"><A NAME="pgfId=12409"> </A>The TQ3XRendererGetNickNameStringMethod renderer support functionality is optional. If it is supplied, it lets an application collect the name of the renderer for display in user interface items such as menus. Such a name may be localized or may be more user-friendly than the name string provided at registration.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=20358"> </A>#define kQ3XMethodTypeRendererGetNickNameString <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3_METHOD_TYPE ('r','d','y','u')<BR></CODE><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=20364"> </A>typedef TQ3Status (TQ3XRendererGetNickNameStringMethod)(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned char&nbsp;&nbsp;&nbsp;&nbsp;*dataBuffer,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long&nbsp;&nbsp;&nbsp;&nbsp;bufferSize,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long&nbsp;&nbsp;&nbsp;&nbsp;*actualDataSize);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20368"> </A>dataBuffer</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12005"> </A>Data buffer to hold the renderer's name.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20378"> </A>bufferSize</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12245"> </A>The actual size of the memory block pointed to by <TT CLASS="cv">dataBuffer</TT>.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20387"> </A>actualDataSize</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12252"> </A> 	On return, the actual number of bytes written to the buffer; or if <TT CLASS="cv">dataBuffer</TT> is <TT CLASS="cv">NULL</TT>, the required size of <TT CLASS="cv">dataBuffer</TT>.</DD></DL COMPACT><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=12008"> </A>DESCRIPTION</H4><P CLASS="T1.Text1"><A NAME="pgfId=12257"> </A>An application uses TQ3XRendererGetNickNameStringMethod to get a user-identifiable name of a renderer. If <TT CLASS="cv">dataBuffer</TT> is <TT CLASS="cv">NULL</TT>, <TT CLASS="cv">actualDataSize</TT> returns the required size in bytes of a data buffer large enough to store the renderer's name. </P></DIV><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=12838"> </A>EXAMPLE</H4><P CLASS="T1.Text1"><A NAME="pgfId=12844"> </A>The following is example code for getting the name strings for all the currently-registered plug-in renderers. </P><CODE CLASS="Cv.Code"><A NAME="pgfId=20399"> </A>void Menu_Init(<BR>&nbsp;&nbsp;&nbsp;&nbsp;void)<BR>{<BR>&nbsp;&nbsp;&nbsp;&nbsp;Handle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menuBar;<BR>&nbsp;&nbsp;&nbsp;&nbsp;MenuHandle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menu;<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3SubClassData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subClassData;<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3ObjectType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*classPointer;<BR>&nbsp;&nbsp;&nbsp;&nbsp;short&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i;<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=20403"> </A>&nbsp;&nbsp;&nbsp;&nbsp;if (!(menuBar = GetNewMBar(kMenuBar))) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SysBeep(1);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ExitToShell();<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=20407"> </A>&nbsp;&nbsp;&nbsp;&nbsp;SetMenuBar(menuBar);<BR>&nbsp;&nbsp;&nbsp;&nbsp;DisposeHandle(menuBar);<BR>&nbsp;&nbsp;&nbsp;&nbsp;DrawMenuBar();<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=20411"> </A>&nbsp;&nbsp;&nbsp;&nbsp;AddResMenu(GetMHandle(kMenu_Apple), 'DRVR');<BR>&nbsp;&nbsp;&nbsp;&nbsp;InsertMenu(GetMenu(...));<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=20415"> </A>&nbsp;&nbsp;&nbsp;&nbsp;menu = GetMHandle(kMenu_Renderer);<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=20419"> </A>&nbsp;&nbsp;&nbsp;&nbsp;Q3ObjectHierarchy_GetSubClassData(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kQ3SharedTypeRenderer, &amp;subClassData);<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=20423"> </A>&nbsp;&nbsp;&nbsp;&nbsp;classPointer = subClassData.classTypes;<BR>&nbsp;&nbsp;&nbsp;&nbsp;i = subClassData.numClasses;<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=20427"> </A>&nbsp;&nbsp;&nbsp;&nbsp;while (i--) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ObjectClassNameString&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;objectClassName;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3RendererClass_GetNickNameString(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*classPointer, objectClassName);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AppendMenu(menu, c2pstr(objectClassName));<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gRendererCount++;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;classPointer++;<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=20431"> </A>&nbsp;&nbsp;&nbsp;&nbsp;Q3ObjectHierarchy_EmptySubClassData(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&amp;subClassData);<BR>}<BR></CODE></DIV></DIV><DIV><H3 CLASS="RoH.RoutineHeading"><A NAME="pgfId=12919"> </A>TQ3XRendererGetConfigurationDataMethod</H3><P CLASS="T1.Text1"><A NAME="pgfId=12423"> </A>The <TT CLASS="cv">TQ3XRendererGetConfigurationDataMethod</TT> renderer support functionality is optional. If it is supplied, it lets an application collect private configuration data from the renderer, which it will then save. The application may save the data in a preference file, in a registry key (in the Windows environment), or in a style template. The application will normally tag the data with the renderer's object name.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=20435"> </A>#define kQ3XMethodTypeRendererGetConfigurationData<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3_METHOD_TYPE('r','d','g','p')<BR></CODE><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=20441"> </A>typedef TQ3Status (*TQ3XRendererGetConfigurationDataMethod)(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3RendererObject&nbsp;&nbsp;&nbsp;&nbsp;renderer,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned char&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*dataBuffer,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bufferSize,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*actualDataSize,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*rendererPrivate);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20445"> </A>renderer</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12550"> </A>A renderer object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20455"> </A>dataBuffer</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12560"> </A>Buffer to hold the renderer's configuration data.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20464"> </A>bufferSize</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12530"> </A>The actual size of the memory block pointed to by <TT CLASS="cv">dataBuffer</TT>.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20473"> </A>actualDataSize</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12532"> </A> 	On return, the actual number of bytes written to the buffer; if <TT CLASS="cv">dataBuffer</TT> is <TT CLASS="cv">NULL</TT>, it is the required size of the buffer.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20483"> </A>rendererPrivate</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12554"> </A> 	A pointer to structure of size <TT CLASS="cv">instanceSize</TT>, passed into <TT CLASS="cv">Q3ObjectHierarchy_RegisterClass</TT>, and initialized in your <TT CLASS="cv">kQ3MethodTypeObjectNew</TT> method.</DD></DL COMPACT><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=12017"> </A>DESCRIPTION</H4><P CLASS="T1.Text1"><A NAME="pgfId=12018"> </A>The renderer calls TQ3XRendererGetConfigurationDataMethod to access configuration data from a renderer's private data space. If <TT CLASS="cv">dataBuffer</TT> is <TT CLASS="cv">NULL</TT>, <TT CLASS="cv">actualDataSize</TT> returns the required size in bytes of a data buffer large enough to store the private data.</P></DIV></DIV><DIV><H3 CLASS="RoH.RoutineHeading"><A NAME="pgfId=12020"> </A>TQ3XRendererSetConfigurationDataMethod</H3><P CLASS="T1.Text1"><A NAME="pgfId=12479"> </A>The <TT CLASS="cv">TQ3XRendererSetConfigurationDataMethod</TT> renderer support functionality is optional. If it is supplied, it lets an application pass private configuration data that it previously obtained via <TT CLASS="cv">Q3Renderer_GetConfigurationData</TT>.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=20495"> </A>#define kQ3XMethodTypeRendererSetConfigurationData<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3_METHOD_TYPE('r','d','s','p')<BR></CODE><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=20501"> </A>typedef TQ3Status (*TQ3XRendererSetConfigurationDataMethod)(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3RendererObject&nbsp;&nbsp;&nbsp;&nbsp;renderer,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned char&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*dataBuffer,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bufferSize,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*rendererPrivate);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20505"> </A>renderer</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12552"> </A>A renderer object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20515"> </A>dataBuffer</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12566"> </A>Buffer to hold the renderer's configuration data.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20524"> </A>bufferSize</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12523"> </A>The actual size of the memory block pointed to by <TT CLASS="cv">dataBuffer</TT>.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20533"> </A>rendererPrivate</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12556"> </A> 	A pointer to structure of size <TT CLASS="cv">instanceSize</TT>, passed into <TT CLASS="cv">Q3ObjectHierarchy_RegisterClass</TT>, and initialized in your <TT CLASS="cv">kQ3MethodTypeObjectNew</TT> method.</DD></DL COMPACT><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=12026"> </A>DESCRIPTION</H4><P CLASS="T1.Text1"><A NAME="pgfId=12027"> </A>The renderer calls TQ3XRendererSetConfigurationDataMethod to place previously obtained renderer configuration data into a renderer's private data space.</P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>