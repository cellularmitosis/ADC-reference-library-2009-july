<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Managing Matrices</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=3857"> </A>Managing Matrices</H1><P CLASS="T1.Text1"><A NAME="pgfId=3862"> </A><A NAME="marker=3858"> </A>QuickDraw&nbsp;3D provides routines that you can use to perform standard operations on 3-by-3 and 4-by-4 matrices. Each routine performs some operation on one or more source matrices and returns a pointer to the destination matrix in the <TT CLASS="cv">result</TT> parameter. Any of the source or destination matrices may be the same matrix. The source matrices are unchanged, unless one of them is also specified as the destination matrix.</P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3863"> </A>Q3Matrix3x3_Copy</H2><P CLASS="T1.Text1"><A NAME="pgfId=3865"> </A><A NAME="marker=3864"> </A><A NAME="marker=1556"> </A>You can use the <TT CLASS="cv">Q3Matrix3x3_Copy</TT> function to get a copy of a 3-by-3 matrix.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9687"> </A>TQ3Matrix3x3 *Q3Matrix3x3_Copy (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix3x3 *matrix3x3, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Matrix3x3 *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9689"> </A><TT CLASS="cv">matrix3x3</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3867"> </A>A 3-by-3 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9698"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3868"> </A>On exit, a copy of <TT CLASS="cv">matrix3x3</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3869"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3870"> </A>The <TT CLASS="cv">Q3Matrix3x3_Copy</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, a copy of the matrix <TT CLASS="cv">matrix3x3</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3871"> </A>Q3Matrix4x4_Copy</H2><P CLASS="T1.Text1"><A NAME="pgfId=3872"> </A><A NAME="marker=1565"> </A>You can use the <TT CLASS="cv">Q3Matrix4x4_Copy</TT> function to get a copy of a 4-by-4 matrix.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9709"> </A>TQ3Matrix4x4 *Q3Matrix4x4_Copy (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix4x4 *matrix4x4, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Matrix4x4 *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9711"> </A><TT CLASS="cv">matrix4x4</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3874"> </A>A 4-by-4 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9720"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3875"> </A>On exit, a copy of <TT CLASS="cv">matrix4x4</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3876"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3877"> </A>The <TT CLASS="cv">Q3Matrix4x4_Copy</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, a copy of the matrix <TT CLASS="cv">matrix4x4</TT>.<A NAME="marker=3878"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3879"> </A>Q3Matrix3x3_SetIdentity</H2><P CLASS="T1.Text1"><A NAME="pgfId=3881"> </A><A NAME="marker=3880"> </A><A NAME="marker=1576"> </A>You can use the <TT CLASS="cv">Q3Matrix3x3_SetIdentity</TT> function to set a 3-by-3 matrix to the identity matrix.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9731"> </A>TQ3Matrix3x3 *Q3Matrix3x3_SetIdentity (TQ3Matrix3x3 *matrix3x3);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9733"> </A><TT CLASS="cv">matrix3x3</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3883"> </A>On exit, the 3-by-3 identity matrix.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3884"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3885"> </A>The <TT CLASS="cv">Q3Matrix3x3_SetIdentity</TT> function returns, as its function result and in the <TT CLASS="cv">matrix3x3</TT> parameter, the 3-by-3 identity matrix.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3886"> </A>Q3Matrix4x4_SetIdentity</H2><P CLASS="T1.Text1"><A NAME="pgfId=3887"> </A><A NAME="marker=1584"> </A>You can use the <TT CLASS="cv">Q3Matrix4x4_SetIdentity</TT> function to set a 4-by-4 matrix to the identity matrix.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9744"> </A>TQ3Matrix4x4 *Q3Matrix4x4_SetIdentity (TQ3Matrix4x4 *matrix4x4);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9746"> </A><TT CLASS="cv">matrix4x4</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3889"> </A>On exit, the 4-by-4 identity matrix.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3890"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3891"> </A>The <TT CLASS="cv">Q3Matrix4x4_SetIdentity</TT> function returns, as its function result and in the <TT CLASS="cv">matrix4x4</TT> parameter, the 4-by-4 identity matrix.<A NAME="marker=3892"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3893"> </A>Q3Matrix3x3_Transpose</H2><P CLASS="T1.Text1"><A NAME="pgfId=3895"> </A><A NAME="marker=3894"> </A><A NAME="marker=1594"> </A>You can use the <TT CLASS="cv">Q3Matrix3x3_Transpose</TT> function to transpose a 3-by-3 matrix.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9757"> </A>TQ3Matrix3x3 *Q3Matrix3x3_Transpose (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix3x3 *matrix3x3, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Matrix3x3 *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9759"> </A><TT CLASS="cv">matrix3x3</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3897"> </A>A 3-by-3 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9768"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3898"> </A>On exit, the transpose of <TT CLASS="cv">matrix3x3</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3899"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3900"> </A>The <TT CLASS="cv">Q3Matrix3x3_Transpose</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, the transpose of the matrix <TT CLASS="cv">matrix3x3</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3901"> </A>Q3Matrix4x4_Transpose</H2><P CLASS="T1.Text1"><A NAME="pgfId=3902"> </A><A NAME="marker=1603"> </A>You can use the <TT CLASS="cv">Q3Matrix4x4_Transpose</TT> function to transpose a 4-by-4 matrix.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9779"> </A>TQ3Matrix4x4 *Q3Matrix4x4_Transpose (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix4x4 *matrix4x4, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Matrix4x4 *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9781"> </A><TT CLASS="cv">matrix4x4</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3904"> </A>A 4-by-4 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9790"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3905"> </A>On exit, the transpose of <TT CLASS="cv">matrix4x4</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3906"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3907"> </A>The <TT CLASS="cv">Q3Matrix4x4_Transpose</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, the transpose of the matrix <TT CLASS="cv">matrix4x4</TT>.<A NAME="marker=3908"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3909"> </A>Q3Matrix3x3_Invert</H2><P CLASS="T1.Text1"><A NAME="pgfId=3911"> </A><A NAME="marker=3910"> </A><A NAME="marker=1614"> </A>You can use the <TT CLASS="cv">Q3Matrix3x3_Invert</TT> function to invert a 3-by-3 matrix.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9801"> </A>TQ3Matrix3x3 *Q3Matrix3x3_Invert (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix3x3 *matrix3x3, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Matrix3x3 *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9803"> </A><TT CLASS="cv">matrix3x3</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3913"> </A>A 3-by-3 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9812"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3914"> </A>On exit, the inverse of <TT CLASS="cv">matrix3x3</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3915"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3916"> </A>The <TT CLASS="cv">Q3Matrix3x3_Invert</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, the inverse of the matrix <TT CLASS="cv">matrix3x3</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3917"> </A>Q3Matrix4x4_Invert</H2><P CLASS="T1.Text1"><A NAME="pgfId=3918"> </A><A NAME="marker=1623"> </A>You can use the <TT CLASS="cv">Q3Matrix4x4_Invert</TT> function to invert a 4-by-4 matrix.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9823"> </A>TQ3Matrix4x4 *Q3Matrix4x4_Invert (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix4x4 *matrix4x4, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Matrix4x4 *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9825"> </A><TT CLASS="cv">matrix4x4</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3920"> </A>A 4-by-4 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9834"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3921"> </A>On exit, the inverse of <TT CLASS="cv">matrix4x4</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3922"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3923"> </A>The <TT CLASS="cv">Q3Matrix4x4_Invert</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, the inverse of the matrix <TT CLASS="cv">matrix4x4</TT>.<A NAME="marker=3924"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3925"> </A>Q3Matrix3x3_Adjoint</H2><P CLASS="T1.Text1"><A NAME="pgfId=3927"> </A><A NAME="marker=3926"> </A><A NAME="marker=1634"> </A>You can use the <TT CLASS="cv">Q3Matrix3x3_Adjoint</TT> function to adjoin a 3-by-3 matrix.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9845"> </A>TQ3Matrix3x3 *Q3Matrix3x3_Adjoint (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix3x3 *matrix3x3, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Matrix3x3 *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9847"> </A><TT CLASS="cv">matrix3x3</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3929"> </A>A 3-by-3 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9856"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3930"> </A>On exit, the adjoint of <TT CLASS="cv">matrix3x3</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3931"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3932"> </A>The <TT CLASS="cv">Q3Matrix3x3_Adjoint</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, the adjoint of the matrix <TT CLASS="cv">matrix3x3</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3933"> </A>Q3Matrix3x3_Multiply</H2><P CLASS="T1.Text1"><A NAME="pgfId=3935"> </A><A NAME="marker=3934"> </A><A NAME="marker=1644"> </A>You can use the <TT CLASS="cv">Q3Matrix3x3_Multiply</TT> function to multiply two 3-by-3 matrices.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9867"> </A>TQ3Matrix3x3 *Q3Matrix3x3_Multiply (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix3x3 *matrixA, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix3x3 *matrixB, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Matrix3x3 *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9869"> </A><TT CLASS="cv">matrixA</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3937"> </A>A 3-by-3 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9878"> </A><TT CLASS="cv">matrixB</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3938"> </A>A 3-by-3 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9887"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3939"> </A>On exit, the product of <TT CLASS="cv">matrixA</TT> and <TT CLASS="cv">matrixB</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3940"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3941"> </A>The <TT CLASS="cv">Q3Matrix3x3_Multiply</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, the product of the two 3-by-3 matrices <TT CLASS="cv">matrixA</TT> and <TT CLASS="cv">matrixB</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3942"> </A>Q3Matrix4x4_Multiply</H2><P CLASS="T1.Text1"><A NAME="pgfId=3943"> </A><A NAME="marker=1654"> </A>You can use the <TT CLASS="cv">Q3Matrix4x4_Multiply</TT> function to multiply two 4-by-4 matrices.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9898"> </A>TQ3Matrix4x4 *Q3Matrix4x4_Multiply (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix4x4 *matrixA, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix4x4 *matrixB, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Matrix4x4 *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9900"> </A><TT CLASS="cv">matrixA</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3945"> </A>A 4-by-4 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9909"> </A><TT CLASS="cv">matrixB</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3946"> </A>A 4-by-4 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9918"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3947"> </A>On exit, the product of <TT CLASS="cv">matrixA</TT> and <TT CLASS="cv">matrixB</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3948"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3949"> </A>The <TT CLASS="cv">Q3Matrix4x4_Multiply</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, the product of the two 4-by-4 matrices <TT CLASS="cv">matrixA</TT> and <TT CLASS="cv">matrixB</TT>.<A NAME="marker=3950"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3951"> </A>Q3Matrix3x3_Determinant</H2><P CLASS="T1.Text1"><A NAME="pgfId=3953"> </A><A NAME="marker=3952"> </A><A NAME="marker=1666"> </A>You can use the <TT CLASS="cv">Q3Matrix3x3_Determinant</TT> function to get the determinant of a 3-by-3 matrix.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9929"> </A>float Q3Matrix3x3_Determinant (const TQ3Matrix3x3 *matrix3x3);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9931"> </A><TT CLASS="cv">matrix3x3</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3955"> </A>A 3-by-3 matrix.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3956"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3957"> </A>The <TT CLASS="cv">Q3Matrix3x3_Determinant</TT> function returns, as its function result, the determinant of the matrix <TT CLASS="cv">matrix3x3</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3958"> </A>Q3Matrix4x4_Determinant</H2><P CLASS="T1.Text1"><A NAME="pgfId=3959"> </A><A NAME="marker=1674"> </A>You can use the <TT CLASS="cv">Q3Matrix4x4_Determinant</TT> function to get the determinant of a 4-by-4 matrix.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9942"> </A>float Q3Matrix4x4_Determinant (const TQ3Matrix4x4 *matrix4x4);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9944"> </A><TT CLASS="cv">matrix4x4</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3961"> </A>A 4-by-4 matrix.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3962"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3963"> </A>The <TT CLASS="cv">Q3Matrix4x4_Determinant</TT> function returns, as its function result, the determinant of the matrix <TT CLASS="cv">matrix4x4</TT>.<A NAME="marker=3964"> </A><A NAME="marker=3965"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>