<!-- legacy work start --><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"        "http://www.w3.org/TR/html4/loose.dtd"><!-- legacy work end --><HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><TITLE> Generating Speech From a String (deprecated)</title><!-- legacy work start -->        <META NAME="Generator" CONTENT="manual">        <META http-equiv="content-type" CONTENT="text/html;charset=utf-8">        <META NAME = "Copyright" CONTENT="Copyright 2007 Apple Inc. All Rights Reserved.">        <META NAME="IndexTitle" CONTENT="Sound Input Manager (Not Recommended)">        <meta name="xcode-display" content="render">        <LINK REL="stylesheet" TYPE="text/css" HREF="../../../Resources/CSS/frameset_styles.css"> <!-- before submitting, globally replace ".." with "developer.apple.com" -->        <script type="text/javascript" language="JavaScript" src="../../../Resources/JavaScript/page.js"></script><!-- legacy work end --></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><!-- QTnavbar start --><P><I>Inside Macintosh: Sound</I><P>| <A target="doc" HREF="imintrosound.11.htm">Previous</A> | <A target="doc" HREF="imintrosound.1.htm">Chapter contents</A> | <A target="doc" HREF="imintrosound.htm">Chapter top</A> | <A target="doc" HREF="imintrosound.a.htm">Section top</A> | <A target="doc" HREF="imintrosound.13.htm">Next</a> | <!-- QTnavbar end --><!-- legacy work start --><script type="text/javascript"> placeWatermark()</script><div style="width:100%; position:fixed;"><div align="center" id="watermark" style="position: relative; margin-left:auto; margin-right:auto; z-index:20; width:500px;"><div class="legacybox" style="position: relative;"><h1>Legacy Document<span class=closebutton><a href="javascript:closeWatermark()"><img src="../../../Resources/Images/closebutton.png" width="14" height="14" border="0" align="top" alt="close button"></a></span></h1><p><b>Important:</b><i>Sound Input Manager</i> is deprecated as of Mac OS X v10.5. For new audio development in Mac OS X, use Core Audio. See the <a href="http://developer.apple.com/referencelibrary/MusicAudio/" target="_top">Audio</a> page in the ADC Reference Library.</p></div></div></div><!-- legacy work end --><H1 CLASS="H2.Heading2"><A NAME="pgfId=1125"> </A><A NAME="16917"> </A>Generating Speech From a String</H1><P CLASS="T0.Text0"><A NAME="pgfId=1126"> </A>It is easy to have the Speech Manager generate speech from a string stored as a variable of type <TT CLASS="cv">Str255</TT>. The <TT CLASS="cv">SpeakString</TT> function takes one parameter, the string to be spoken. <TT CLASS="cv">SpeakString</TT> automatically allocates a speech channel, uses that channel to produce speech, and then disposes of the speech channel when speaking is complete. Speech generation is asynchronous, but because <TT CLASS="cv">SpeakString</TT> copies the string you pass it into an internal buffer, you are free to release the memory you allocated for the string as soon as <TT CLASS="cv">SpeakString</TT> returns.</P><P CLASS="T1.Text1"><A NAME="pgfId=807"> </A><A target="doc" HREF="imintrosound.12.htm#35250" CLASS="XRef">Listing 0-8</A> show how you can use the <TT CLASS="cv">SpeakString</TT> function to convert a string stored in a resource of type <TT CLASS="cv">'STR#'</TT> into speech.</P><P CLASS="L.Listing"><A NAME="pgfId=808"> </A>Listing&nbsp;8 <A NAME="35250"> </A>Using <TT CLASS="cv">SpeakString</TT> to generate speech from a string</P><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=4457"> </A>PROCEDURE MySpeakStringResource (myStrListID: Integer; myIndex: Integer);<BR>VAR<BR>&nbsp;&nbsp;&nbsp;&nbsp;myString:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str255;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{the string to speak}<BR>&nbsp;&nbsp;&nbsp;&nbsp;myErr:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OSErr;<BR>BEGIN<BR>&nbsp;&nbsp;&nbsp;&nbsp;GetIndString(myString, myStrListID, myIndex);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{load the string}<BR>&nbsp;&nbsp;&nbsp;&nbsp;myErr := SpeakString(myString);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{start speaking}<BR>&nbsp;&nbsp;&nbsp;&nbsp;IF myErr &lt;&gt; noErr THEN<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoError(myErr);<BR>END;<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=1130"> </A><A NAME="marker=4459"> </A>The <TT CLASS="cv">MySpeakStringResource</TT> procedure defined in <A target="doc" HREF="imintrosound.12.htm#35250" CLASS="XRef">Listing 0-8</A> takes as parameters the resource ID of the <TT CLASS="cv">'STR#'</TT> resource containing the string and the index of the string&nbsp;within that resource. <TT CLASS="cv">MySpeakStringResource</TT> passes these values to the <TT CLASS="cv">GetIndString</TT> procedure, which loads the string from the resource file into memory. <TT CLASS="cv">MySpeakStringResource</TT> then calls the <TT CLASS="cv">SpeakString</TT> function to convert the string into speech; if an error occurs, it calls an application-defined error-handling procedure.</P><P CLASS="T1.Text1"><A NAME="pgfId=1131"> </A>The speech that the <TT CLASS="cv">SpeakString</TT> function generates is asynchronous; that is, control returns to your application before the function finishes speaking the string. If you would like to generate speech synchronously, you can use <TT CLASS="cv">SpeakString</TT> in conjunction with the <TT CLASS="cv">SpeechBusy</TT> function, which returns the number of active speech channels, including the speech channel created by the <TT CLASS="cv">SpeakString</TT> function. <A NAME="marker=477"> </A></P><P CLASS="T1.Text1"><A NAME="pgfId=1132"> </A><A target="doc" HREF="imintrosound.12.htm#39200" CLASS="XRef">Listing 0-9</A> illustrates how you can use <TT CLASS="cv">SpeechBusy</TT> and <TT CLASS="cv">SpeakString</TT> to generate speech synchronously.</P><P CLASS="L.Listing"><A NAME="pgfId=1133"> </A>Listing&nbsp;9 <A NAME="39200"> </A>Generating speech synchronously</P><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=4463"> </A>PROCEDURE MySpeakStringResourceSync (myStrListID: Integer; myIndex: Integer);<BR>VAR<BR>&nbsp;&nbsp;&nbsp;&nbsp;activeChannels: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{number of active speech channels}<BR>BEGIN<BR>&nbsp;&nbsp;&nbsp;&nbsp;activeChannels := SpeechBusy;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{find number of active channels}<BR>&nbsp;&nbsp;&nbsp;&nbsp;MySpeakStringResource(myStrListID, myIndex);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{speak the string}<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;{Wait until channel is no longer processing speech.}<BR>&nbsp;&nbsp;&nbsp;&nbsp;REPEAT<BR>&nbsp;&nbsp;&nbsp;&nbsp;UNTIL SpeechBusy = activeChannels;<BR>END;<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=769"> </A><A NAME="marker=4465"> </A>The <TT CLASS="cv">MySpeakStringResourceSync</TT> procedure defined in <A target="doc" HREF="imintrosound.12.htm#39200" CLASS="XRef">Listing 0-9</A> uses the <TT CLASS="cv">MySpeakStringResource</TT> procedure defined in <A target="doc" HREF="imintrosound.12.htm#35250" CLASS="XRef">Listing 0-8</A> to speak a string. However, before calling <TT CLASS="cv">MySpeakStringResource</TT>, <TT CLASS="cv">MySpeakStringResourceSync</TT> calls the <TT CLASS="cv">SpeechBusy</TT> function to determine how many speech channels are active. After the speech has begun, the <TT CLASS="cv">MySpeakStringResourceSync</TT> function does not return until the number of speech channels active again falls to this level.</P><P CLASS="Note"><A NAME="pgfId=938"> </A>Ordinarily, you should play speech asynchronously, to allow the user to perform other activities while speech is being generated. You might play speech synchronously if other activities performed by your application should not occur while speech is being generated. </P><P CLASS="T1.Text1"><A NAME="pgfId=1137"> </A><A NAME="marker=490"> </A>You can use the <TT CLASS="cv">SpeakString</TT> function to stop speech being generated by a prior call to&nbsp;<TT CLASS="cv">SpeakString</TT>. You might do this, for example, if the user switches to another application or closes a document associated with speech being generated. To stop speech, simply pass a zero-length string to the <TT CLASS="cv">SpeakString</TT> function (or if you are programming in C, pass <TT CLASS="cv">NULL</TT>).</P><P CLASS="T1.Text1"><A NAME="pgfId=1138"> </A><A target="doc" HREF="imintrosound.12.htm#18527" CLASS="XRef">Listing 0-10</A> shows how your application can stop speech generated by a call to the <TT CLASS="cv">SpeakString</TT> function.</P><P CLASS="L.Listing"><A NAME="pgfId=1139"> </A>Listing&nbsp;10 <A NAME="18527"> </A>Stopping speech generated by <TT CLASS="cv">SpeakString</TT></P><CODE CLASS="Cv.Code"><A NAME="pgfId=4469"> </A>PROCEDURE MyStopSpeech;<BR>VAR<BR>&nbsp;&nbsp;&nbsp;&nbsp;myString:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str255;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{an empty string}<BR>&nbsp;&nbsp;&nbsp;&nbsp;myErr:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OSErr;<BR>BEGIN<BR>&nbsp;&nbsp;&nbsp;&nbsp;myString[0] := Char(0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{set length of string to 0}<BR>&nbsp;&nbsp;&nbsp;&nbsp;myErr := SpeakString(myString);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{stop previous speech}<BR>&nbsp;&nbsp;&nbsp;&nbsp;IF myErr &lt;&gt; noErr THEN<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoError(myErr);<BR>END;<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=1141"> </A><A NAME="marker=4471"> </A>The MyStopSpeech procedure defined in <A target="doc" HREF="imintrosound.12.htm#18527" CLASS="XRef">Listing 0-10</A> sets the length byte of a string to 0 before calling the SpeakString function. To execute this code in some development systems, you need to ensure that range checking is disabled. Consult your development system's documentation for details on enabling and disabling range checking.<A NAME="marker=498"> </A></P><hr>&#169; 1999 Apple Computer, Inc.<!-- QTnavbar start --><P><I>Inside Macintosh: Sound</I><P>| <A target="doc" HREF="imintrosound.11.htm">Previous</A> | <A target="doc" HREF="imintrosound.1.htm">Chapter contents</A> | <A target="doc" HREF="imintrosound.htm">Chapter top</A> | <A target="doc" HREF="imintrosound.a.htm">Section top</A> | <A target="doc" HREF="imintrosound.13.htm">Next</a> | <!-- QTnavbar end --><!-- legacy work start --><script type="text/javascript"> placeWatermark()</script><div style="width:100%; position:fixed;"><div align="center" id="watermark" style="position: relative; margin-left:auto; margin-right:auto; z-index:20; width:500px;"><div class="legacybox" style="position: relative;"><h1>Legacy Document<span class=closebutton><a href="javascript:closeWatermark()"><img src="../../../Resources/Images/closebutton.png" width="14" height="14" border="0" align="top" alt="close button"></a></span></h1><p><b>Important:</b><i>Sound Input Manager</i> is deprecated as of Mac OS X v10.5. For new audio development in Mac OS X, use Core Audio. See the <a href="http://developer.apple.com/referencelibrary/MusicAudio/" target="_top">Audio</a> page in the ADC Reference Library.</p></div></div></div><!-- legacy work end --><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>