<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Edit Tracking</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=7499"> </A>Edit Tracking</H1><P CLASS="T1.Text1"><A NAME="pgfId=8051"> </A>The EditTracking feature is designed to allow users to keep track of whether an object that contains custom elements or attributes (including unknown elements or attributes) has been edited.</P><P CLASS="T1.Text1"><A NAME="pgfId=8072"> </A>Here's an example of applying this feature. ObjA is created and written out by application AppA, which registers custom attribute type CusAttA. ObjA contains some attributes of type CusAttA. Assume that ObjA is a geometry and attributes of type CusAttA are per-vertex attributes that depend on the overall geometry of the object. Suppose now that ObjA is read by AppB, which does not register attribute type CusAttA. This means that when AppB reads in ObjA, every attribute of type CusAttA is read in as an unknown object. Suppose that AppB edits the geometry of ObjA, resulting in object ObjB. Since AppB doesn't know about attributes of type CusAttA, it cannot edit them so that they conform properly to the edited geometry. This means that in ObjB, geometry and attributes of type CusAttA may be incompatible. To track this possibility, when AppB writes ObjB into a metafile the EditTracking feature will add a special subobject of type <TT CLASS="cv">edited</TT> to ObjB. </P><P CLASS="T1.Text1"><A NAME="pgfId=8043"> </A>Suppose now that the user is back working in AppA and reads in ObjB. AppA recognizes attributes of type CusAttA, so they will be read in as known and will have their effect during rendering. During reading AppA also reads in the <TT CLASS="cv">edited</TT> subobject. This automatically marks object ObjB in such a way that the call <TT CLASS="cv">Q3Shared_GetEditTrackingState</TT> made on ObjB returns 1, signifying that the object contains a custom attribute (or element) which was edited after having been read in. In this case, there is a risk of incorrect rendering. If this condition is not satisfied, <TT CLASS="cv">Q3Shared_GetEditTrackingState</TT> returns 0. </P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=8156"> </A>Q3Shared_GetEditTrackingState</H2><P CLASS="T1.Text1"><A NAME="pgfId=8157"> </A>You can use the <TT CLASS="cv">Q3Shared_GetEditTrackingState</TT> function to determine if an object contains a custom attribute or element that was edited after having been read in.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=14156"> </A>unsigned long Q3Shared_GetEditTrackingState(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3SharedObject sharedObject);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=14158"> </A>sharedObject</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=8159"> </A>An object shared by two or more metafiles.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=8162"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=8163"> </A>The Q3Shared_GetEditTrackingState function returns 1 if object sharedObject contains a custom attribute or element that was edited after having been read in; otherwise it returns 0.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=8223"> </A>Q3Shared_ClearEditTracking</H2><P CLASS="T1.Text1"><A NAME="pgfId=8224"> </A>You can use the <TT CLASS="cv">Q3Shared_ClearEditTracking</TT> function to clear the marker read by <TT CLASS="cv">Q3Shared_GetEditTrackingState</TT>.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=14169"> </A>TQ3Status Q3Shared_ClearEditTracking(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3SharedObject sharedObject);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=14171"> </A>sharedObject</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=8226"> </A>An object shared by two or more metafiles.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=8227"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=8228"> </A>You can call the <TT CLASS="cv">Q3Shared_ClearEditTracking</TT> function on an object if you wish to guarantee that an <TT CLASS="cv">edited</TT> subobject will not be written to the metafile or that an object that has been read in will return 0 from <TT CLASS="cv">Q3Shared_GetEditTrackingState</TT>.</P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>