<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Manipulating Draw Contexts</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=33620"> </A><A NAME="21284"> </A>Manipulating Draw Contexts</H1><P CLASS="T1.Text1"><A NAME="pgfId=41317"> </A><A NAME="marker=51917"> </A>QuickDraw&nbsp;3D RAVE provides routines that you can use to manipulate draw contexts. For example, you can use the <TT CLASS="cv">QASetInt</TT> routine to set an integer-valued state variable associated with a draw context.</P><P CLASS="I.Important"><A NAME="pgfId=41329"> </A>These functions are currently implemented as C language macros that call the methods of the drawing engine. Your application should use these macros for all draw context manipulation. </P><P CLASS="T1.Text1"><A NAME="pgfId=41352"> </A>See the section <A HREF="qd3dravedriver.46.htm#17804" CLASS="XRef">&quot;Application-Defined Routines&quot;</A> for complete information on the draw context methods invoked by these macros.</P><P CLASS="Note"><A NAME="pgfId=41361"> </A>There is one macro for each method whose address is stored in a draw context structure (of type <TT CLASS="cv">TQADrawContext</TT>). </P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=45934"> </A>QAGetFloat</H2><P CLASS="T1.Text1"><A NAME="pgfId=53929"> </A><A NAME="marker=53928"> </A>You can use the <TT CLASS="cv">QAGetFloat</TT> function to get a floating-point value of a draw context state variable.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=67828"> </A>#define QAGetFloat(drawContext,tag) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;getFloat (drawContext,tag)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=67830"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=53931"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=67839"> </A><TT CLASS="cv">tag</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45938"> </A>A state variable tag.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=45939"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=46666"> </A>The <TT CLASS="cv">QAGetFloat</TT> function returns, as its function result, the floating-point value of the draw context state variable specified by the <TT CLASS="cv">drawContext</TT> and <TT CLASS="cv">tag</TT> parameters. If the specified tag is not recognized or supported by that draw context, <TT CLASS="cv">QAGetFloat</TT> returns the value 0.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=46667"> </A>QASetFloat</H2><P CLASS="T1.Text1"><A NAME="pgfId=45942"> </A><A NAME="marker=51806"> </A>You can use the <TT CLASS="cv">QASetFloat</TT> function to set a floating-point value for a draw context state variable.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=67850"> </A>#define QASetFloat(drawContext,tag,newValue) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;setFloat (drawContext,tag,newValue)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=67852"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45944"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=67861"> </A><TT CLASS="cv">tag</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45945"> </A>A state variable tag.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=67870"> </A><TT CLASS="cv">newValue</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45946"> </A>The new value of the specified state variable.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=45947"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=45948"> </A>The <TT CLASS="cv">QASetFloat</TT> function sets the value of the draw context state variable specified by the <TT CLASS="cv">drawContext</TT> and <TT CLASS="cv">tag</TT> parameters to the floating-point value specified by the <TT CLASS="cv">newValue</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=45950"> </A>QAGetInt</H2><P CLASS="T1.Text1"><A NAME="pgfId=46598"> </A><A NAME="marker=51796"> </A>You can use the <TT CLASS="cv">QAGetInt</TT> function to get a long integer value of a draw context state variable.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=67881"> </A>#define QAGetInt(drawContext,tag) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;getInt (drawContext,tag)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=67883"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46600"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=67892"> </A><TT CLASS="cv">tag</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45954"> </A>A state variable tag.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=45955"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=45956"> </A>The <TT CLASS="cv">QAGetInt</TT> function returns, as its function result, the long integer value of the draw context state variable specified by the <TT CLASS="cv">drawContext</TT> and <TT CLASS="cv">tag</TT> parameters. If the specified tag is not recognized or supported by that draw context, <TT CLASS="cv">QAGetInt</TT> returns the value 0.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=45957"> </A>QASetInt</H2><P CLASS="T1.Text1"><A NAME="pgfId=45958"> </A><A NAME="marker=51791"> </A>You can use the <TT CLASS="cv">QASetInt</TT> function to set a long integer value for a draw context state variable.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=67903"> </A>#define QASetInt(drawContext,tag,newValue) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;setInt (drawContext,tag,newValue)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=67905"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45960"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=67914"> </A><TT CLASS="cv">tag</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45961"> </A>A state variable tag.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=67923"> </A><TT CLASS="cv">newValue</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45962"> </A>The new value of the specified state variable.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=45963"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=45964"> </A>The <TT CLASS="cv">QASetInt</TT> function sets the value of the draw context state variable specified by the <TT CLASS="cv">drawContext</TT> and <TT CLASS="cv">tag</TT> parameters to the long integer value specified by the <TT CLASS="cv">newValue</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=45966"> </A>QAGetPtr</H2><P CLASS="T1.Text1"><A NAME="pgfId=45967"> </A><A NAME="marker=51786"> </A>You can use the <TT CLASS="cv">QAGetPtr</TT> function to get a pointer value of a draw context state variable.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=67934"> </A>#define QAGetPtr(drawContext,tag) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;getPtr (drawContext,tag)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=67936"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45969"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=67945"> </A><TT CLASS="cv">tag</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45970"> </A>A state variable tag.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=45971"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=45972"> </A>The <TT CLASS="cv">QAGetPtr</TT> function returns, as its function result, the pointer value of the draw context state variable specified by the <TT CLASS="cv">drawContext</TT> and <TT CLASS="cv">tag</TT> parameters. If the specified tag is not recognized or supported by that draw context, <TT CLASS="cv">QAGetPtr</TT> returns the value 0.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=45973"> </A>QASetPtr</H2><P CLASS="T1.Text1"><A NAME="pgfId=45974"> </A><A NAME="marker=51781"> </A>You can use the <TT CLASS="cv">QASetPtr</TT> function to set a pointer value for a draw context state variable.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=67956"> </A>#define QASetPtr(drawContext,tag,newValue) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;setPtr (drawContext,tag,newValue)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=67958"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45976"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=67967"> </A><TT CLASS="cv">tag</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45977"> </A>A state variable tag.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=67976"> </A><TT CLASS="cv">newValue</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45978"> </A>The new value of the specified state variable.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=45979"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=45980"> </A>The <TT CLASS="cv">QASetPtr</TT> function sets the value of the draw context state variable specified by the <TT CLASS="cv">drawContext</TT> and <TT CLASS="cv">tag</TT> parameters to the pointer value specified by the <TT CLASS="cv">newValue</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=45982"> </A>QADrawPoint</H2><P CLASS="T1.Text1"><A NAME="pgfId=45983"> </A><A NAME="marker=51776"> </A>You can use the <TT CLASS="cv">QADrawPoint</TT> function to draw a point.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=67987"> </A>#define QADrawPoint(drawContext,v) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;drawPoint (drawContext,v)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=67989"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45985"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=67998"> </A><TT CLASS="cv">v</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45986"> </A>A Gouraud vertex.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=45987"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=45988"> </A>The <TT CLASS="cv">QADrawPoint</TT> function draws the single point specified by the <TT CLASS="cv">v</TT> parameter to the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter. The size of the point is determined by the <TT CLASS="cv">kQATag_Width</TT> state variable of the draw context.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=45989"> </A>QADrawLine</H2><P CLASS="T1.Text1"><A NAME="pgfId=45990"> </A><A NAME="marker=51771"> </A>You can use the <TT CLASS="cv">QADrawLine</TT> function to draw a line between two points.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=68009"> </A>#define QADrawLine(drawContext,v0,v1) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;drawLine (drawContext,v0,v1)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68011"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45992"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68020"> </A><TT CLASS="cv">v0</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45993"> </A>A Gouraud vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68029"> </A><TT CLASS="cv">v1</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=45994"> </A>A Gouraud vertex.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=45995"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=45996"> </A>The <TT CLASS="cv">QADrawLine</TT> function draws the line specified by the <TT CLASS="cv">v0</TT> and <TT CLASS="cv">v1</TT> parameters to the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter. The size of the line is determined by the <TT CLASS="cv">kQATag_Width</TT> state variable of the draw context. If the specified vertices have different colors, the line color is interpolated smoothly between the two vertex colors.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=45997"> </A>QADrawTriGouraud</H2><P CLASS="T1.Text1"><A NAME="pgfId=45998"> </A><A NAME="marker=51766"> </A>You can use the <TT CLASS="cv">QADrawTriGouraud</TT> function to draw Gouraud-shaded triangles.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=68040"> </A>#define QADrawTriGouraud(drawContext,v0,v1,v2,flags) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;drawTriGouraud (drawContext,v0,v1,v2,flags)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68042"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46000"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68051"> </A><TT CLASS="cv">v0</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46001"> </A>A Gouraud vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68060"> </A><TT CLASS="cv">v1</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46002"> </A>A Gouraud vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68069"> </A><TT CLASS="cv">v2</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46003"> </A>A Gouraud vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68078"> </A><TT CLASS="cv">flags</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46006"> </A>A set of triangle flags. See <A HREF="qd3dravedriver.2c.htm#40215" CLASS="XRef">&quot;Triangle Flags Masks&quot;</A> for a complete description of the available flags.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=46008"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=46009"> </A>The <TT CLASS="cv">QADrawTriGouraud</TT> function draws the Gouraud-shaded triangle determined by the three points specified by the <TT CLASS="cv">v0</TT>, <TT CLASS="cv">v1</TT>, and <TT CLASS="cv">v2</TT> parameters into the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter. Features of the triangle are determined by the <TT CLASS="cv">flags</TT> parameter. Currently, this parameter is used to specify an orientation for the triangle.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=46010"> </A>QADrawTriTexture</H2><P CLASS="T1.Text1"><A NAME="pgfId=46011"> </A><A NAME="marker=51761"> </A>You can use the <TT CLASS="cv">QADrawTriTexture</TT> function to draw texture-mapped triangles.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=68089"> </A>#define QADrawTriTexture(drawContext,v0,v1,v2,flags) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;drawTriTexture (drawContext,v0,v1,v2,flags)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68091"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46013"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68100"> </A><TT CLASS="cv">v0</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46014"> </A>A texture vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68109"> </A><TT CLASS="cv">v1</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46015"> </A>A texture vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68118"> </A><TT CLASS="cv">v2</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46016"> </A>A texture vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68127"> </A><TT CLASS="cv">flags</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46019"> </A>A set of triangle flags. See <A HREF="qd3dravedriver.2c.htm#40215" CLASS="XRef">&quot;Triangle Flags Masks&quot;</A> for a complete description of the available flags.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=46021"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=46022"> </A>The <TT CLASS="cv">QADrawTriTexture</TT> function draws the texture-mapped triangle determined by the three points specified by the <TT CLASS="cv">v0</TT>, <TT CLASS="cv">v1</TT>, and <TT CLASS="cv">v2</TT> parameters into the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter. The texture used for the mapping is determined by the value of the <TT CLASS="cv">kQATag_Texture</TT> state variable. Features of the triangle are determined by the <TT CLASS="cv">flags</TT> parameter. Currently, this parameter is used to specify an orientation for the triangle.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=46023"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=46735"> </A>The <TT CLASS="cv">QADrawTriTexture</TT> function is optional and must be supported only by drawing engines that support texture mapping.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=55958"> </A>QASubmitVerticesGouraud</H2><P CLASS="T1.Text1"><A NAME="pgfId=55960"> </A><A NAME="marker=58006"> </A><A NAME="marker=55959"> </A>You can use the <TT CLASS="cv">QASubmitVerticesGouraud</TT> function to submit Gouraud vertices.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=68138"> </A>#define QASubmitVerticesGouraud(drawContext,nVertices,vertices) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;submitVerticesGouraud(drawContext,nVertices,vertices)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68140"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=55962"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68149"> </A><TT CLASS="cv">nVertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=55963"> </A>The number of Gouraud vertices pointed to by the <TT CLASS="cv">vertices</TT> parameter.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68158"> </A><TT CLASS="cv">vertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=55964"> </A>A pointer to an array of Gouraud vertices.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=55995"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=55996"> </A>The <TT CLASS="cv">QASubmitVerticesGouraud</TT> function submits the list of vertices pointed to by the <TT CLASS="cv">vertices</TT> parameter to the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter. The vertices define a triangle mesh. Note, however, that <TT CLASS="cv">QASubmitVerticesGouraud</TT> does not draw the specified mesh, but simply defines the mesh for a subsequent call to QADrawTriMeshGouraud.</P><P CLASS="T1.Text1"><A NAME="pgfId=56057"> </A>Your application is responsible for managing the memory occupied by the Gouraud vertices. <TT CLASS="cv">QASubmitVerticesGouraud</TT> does not copy the vertex data pointed to by the <TT CLASS="cv">vertices</TT> parameter. Accordingly, you must not dispose of or reuse that memory until you've finished drawing the triangle mesh defined by <TT CLASS="cv">QASubmitVerticesGouraud</TT>.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=55997"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=56095"> </A>If a drawing engine does not support triangle meshes, QuickDraw&nbsp;3D RAVE decomposes a triangle mesh into individual triangles. As a result, you can always use the <TT CLASS="cv">QASubmitVerticesGouraud</TT> function to submit a triangle mesh.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=56106"> </A>QASubmitVerticesTexture</H2><P CLASS="T1.Text1"><A NAME="pgfId=56108"> </A><A NAME="marker=56107"> </A>You can use the <TT CLASS="cv">QASubmitVerticesTexture</TT> function to submit texture vertices.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=68169"> </A>#define QASubmitVerticesTexture(drawContext,nVertices,vertices) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;submitVerticesTexture(drawContext,nVertices,vertices)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68171"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=56110"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68180"> </A><TT CLASS="cv">nVertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=56111"> </A>The number of texture vertices pointed to by the <TT CLASS="cv">vertices</TT> parameter.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68189"> </A><TT CLASS="cv">vertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=56112"> </A>A pointer to an array of texture vertices.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=56113"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=56114"> </A>The <TT CLASS="cv">QASubmitVerticesTexture</TT> function submits the list of vertices pointed to by the <TT CLASS="cv">vertices</TT> parameter to the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter. The vertices define a triangle mesh. Note, however, that <TT CLASS="cv">QASubmitVerticesTexture</TT> does not draw the specified mesh, but simply defines the mesh for a subsequent call to <TT CLASS="cv">QADrawTriMeshTexture</TT>.</P><P CLASS="T1.Text1"><A NAME="pgfId=56115"> </A>Your application is responsible for managing the memory occupied by the texture vertices. <TT CLASS="cv">QASubmitVerticesTexture</TT> does not copy the vertex data pointed to by the <TT CLASS="cv">vertices</TT> parameter. Accordingly, you must not dispose of or reuse that memory until you've finished drawing the triangle mesh defined by <TT CLASS="cv">QASubmitVerticesTexture</TT>.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=56116"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=56164"> </A>The <TT CLASS="cv">QASubmitVerticesTexture</TT> function is optional and must be supported only by drawing engines that support texture mapping.</P><P CLASS="T1.Text1"><A NAME="pgfId=56120"> </A>If a drawing engine does not support triangle meshes, QuickDraw&nbsp;3D RAVE decomposes a triangle mesh into individual triangles.<A NAME="marker=58007"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=56176"> </A>QADrawTriMeshGouraud</H2><P CLASS="T1.Text1"><A NAME="pgfId=56178"> </A><A NAME="marker=58008"> </A><A NAME="marker=56177"> </A>You can use the <TT CLASS="cv">QADrawTriMeshGouraud</TT> function to draw a triangle mesh with Gouraud shading.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=68200"> </A>#define QADrawTriMeshGouraud(drawContext,nTriangle,triangles) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;drawTriMeshGouraud (drawContext,nTriangle,triangles)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68202"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=56261"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68211"> </A><TT CLASS="cv">nTriangle</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=56262"> </A>The number of indexed triangles pointed to by the <TT CLASS="cv">triangles</TT> parameter.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68220"> </A><TT CLASS="cv">triangles</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=56182"> </A>A pointer to an array of indexed triangles. See <A HREF="qd3dravedriver.3e.htm#38704" CLASS="XRef">&quot;Indexed Triangle Structure&quot;</A> for a description of indexed triangles.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=56183"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=56184"> </A>The <TT CLASS="cv">QADrawTriMeshGouraud</TT> function draws, with Gouraud shading, the triangle mesh specified by the <TT CLASS="cv">triangles</TT> parameter into the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter. Each triangle in the mesh is defined by a <TT CLASS="cv">TQAIndexedTriangle</TT> data structure, which contains three indices into the array of Gouraud vertices previously submitted to the draw context by a call to the <TT CLASS="cv">QASubmitVerticesGouraud</TT> function.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=56186"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=56302"> </A><TT CLASS="cv">QADrawTriMeshGouraud</TT> operates only on a triangle mesh previously submitted using the <TT CLASS="cv">QASubmitVerticesGouraud</TT> function. Use <TT CLASS="cv">QADrawTriMeshTexture</TT> to draw a triangle mesh submitted using the <TT CLASS="cv">QASubmitVerticesTexture</TT> function.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=56459"> </A>QADrawTriMeshTexture</H2><P CLASS="T1.Text1"><A NAME="pgfId=56461"> </A><A NAME="marker=56460"> </A>You can use the <TT CLASS="cv">QADrawTriMeshTexture</TT> function to draw a texture-mapped triangle mesh.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=68231"> </A>#define QADrawTriMeshTexture(drawContext,nTriangle,triangles) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;drawTriMeshTexture (drawContext,nTriangle,triangles)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68233"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=56463"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68242"> </A><TT CLASS="cv">nTriangle</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=56464"> </A>The number of indexed triangles pointed to by the <TT CLASS="cv">triangles</TT> parameter.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68251"> </A><TT CLASS="cv">triangles</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=56467"> </A>A pointer to an array of indexed triangles. See <A HREF="qd3dravedriver.3e.htm#38704" CLASS="XRef">&quot;Indexed Triangle Structure&quot;</A> for a description of indexed triangles.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=56469"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=56470"> </A>The <TT CLASS="cv">QADrawTriMeshTexture</TT> function draws the texture-mapped triangle mesh specified by the <TT CLASS="cv">triangles</TT> parameter into the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter. Each triangle in the mesh is defined by a <TT CLASS="cv">TQAIndexedTriangle</TT> data structure, which contains three indices into the array of texture vertices previously submitted to the draw context by a call to the <TT CLASS="cv">QASubmitVerticesTexture</TT> function.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=56471"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=56503"> </A><TT CLASS="cv">QADrawTriMeshTexture</TT> operates only on a triangle mesh previously submitted using the <TT CLASS="cv">QASubmitVerticesTexture</TT> function. Use <TT CLASS="cv">QADrawTriMeshGouraud</TT> to draw a triangle mesh submitted using the <TT CLASS="cv">QASubmitVerticesGouraud</TT> function.</P><P CLASS="T1.Text1"><A NAME="pgfId=56518"> </A>The <TT CLASS="cv">QADrawTriMeshTexture</TT> function is optional and must be supported only by drawing engines that support texture mapping.<A NAME="marker=58009"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=46734"> </A>QADrawVGouraud</H2><P CLASS="T1.Text1"><A NAME="pgfId=46024"> </A><A NAME="marker=51756"> </A>You can use the <TT CLASS="cv">QADrawVGouraud</TT> function to draw Gouraud-shaded objects defined by vertices.</P><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=68262"> </A>#define QADrawVGouraud(drawContext,nVertices,vertexMode,vertices,flags) \<BR>&nbsp;(drawContext)-&gt;drawVGouraud(drawContext,nVertices,vertexMode,vertices,flags)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68264"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46026"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68273"> </A><TT CLASS="cv">nVertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46027"> </A>The number of vertices contained in the <TT CLASS="cv">vertices</TT> array.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68282"> </A><TT CLASS="cv">vertexMode</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46031"> </A>A vertex mode. See <A HREF="qd3dravedriver.27.htm#27703" CLASS="XRef">&quot;Vertex Modes&quot;</A> for a description of the available vertex modes.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68291"> </A><TT CLASS="cv">vertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46032"> </A>An array of Gouraud vertices.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68300"> </A><TT CLASS="cv">flags</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46035"> </A>An array of triangle flags, or the value <TT CLASS="cv">NULL</TT>. See <A HREF="qd3dravedriver.2c.htm#40215" CLASS="XRef">&quot;Triangle Flags Masks&quot;</A> for a description of the available triangle flags. This parameter is valid only if the <TT CLASS="cv">vertexMode</TT> parameter contains the value <TT CLASS="cv">kQAVertexMode_Tri</TT>, <TT CLASS="cv">kQAVertexMode_Strip</TT>, or <TT CLASS="cv">kQAVertexMode_Fan</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=46037"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=46038"> </A>The <TT CLASS="cv">QADrawVGouraud</TT> function draws the vertices in the array specified by the <TT CLASS="cv">vertices</TT> parameter into the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter, according to the vertex modes flag specified by the <TT CLASS="cv">vertexMode</TT> parameter. For instance, if the value of the <TT CLASS="cv">vertexMode</TT> parameter is <TT CLASS="cv">kQAVertexMode_Polyline</TT>, then the vertices in that array are interpreted as defining a polyline (a set of connected line segments). Gouraud shading is applied to whatever objects are drawn.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=46759"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=46760"> </A>The <TT CLASS="cv">QADrawVGouraud</TT> function is optional and must be supported only by drawing engines that do not want calls to <TT CLASS="cv">QADrawVGouraud</TT> to be replaced by calls to the <TT CLASS="cv">QADrawPoint</TT>, <TT CLASS="cv">QADrawLine</TT>, or <TT CLASS="cv">QADrawTriGouraud</TT> functions.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=46039"> </A>QADrawVTexture</H2><P CLASS="T1.Text1"><A NAME="pgfId=46040"> </A><A NAME="marker=51751"> </A>You can use the <TT CLASS="cv">QADrawVTexture</TT> function to draw texture-mapped objects defined by vertices.</P><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=68311"> </A>#define QADrawVTexture(drawContext,nVertices,vertexMode,vertices,flags) \<BR>&nbsp;(drawContext)-&gt;drawVTexture(drawContext,nVertices,vertexMode,vertices,flags)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68313"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46042"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68322"> </A><TT CLASS="cv">nVertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46043"> </A>The number of vertices contained in the <TT CLASS="cv">vertices</TT> array.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68331"> </A><TT CLASS="cv">vertexMode</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46047"> </A>A vertex mode. See <A HREF="qd3dravedriver.27.htm#27703" CLASS="XRef">&quot;Vertex Modes&quot;</A> for a description of the available vertex modes.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68340"> </A><TT CLASS="cv">vertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46048"> </A>An array of texture vertices.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68349"> </A><TT CLASS="cv">flags</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46051"> </A>An array of triangle flags, or the value <TT CLASS="cv">NULL</TT>. See <A HREF="qd3dravedriver.2c.htm#40215" CLASS="XRef">&quot;Triangle Flags Masks&quot;</A> for a description of the available triangle flags. This parameter is valid only if the <TT CLASS="cv">vertexMode</TT> parameter contains the value <TT CLASS="cv">kQAVertexMode_Tri</TT>, <TT CLASS="cv">kQAVertexMode_Strip</TT>, or <TT CLASS="cv">kQAVertexMode_Fan</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=46053"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=46054"> </A>The <TT CLASS="cv">QADrawVTexture</TT> function draws the vertices in the array specified by the <TT CLASS="cv">vertices</TT> parameter into the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter, according to the vertex modes flag specified by the <TT CLASS="cv">vertexMode</TT> parameter. For instance, if the value of the <TT CLASS="cv">vertexMode</TT> parameter is <TT CLASS="cv">kQAVertexMode_Polyline</TT>, then the vertices in that array are interpreted as defining a polyline (a set of connected line segments). Texture mapping (using the texture determined by the value of the <TT CLASS="cv">kQATag_Texture</TT> state variable) is applied to whatever objects are drawn.</P><P CLASS="I.Important"><A NAME="pgfId=46055"> </A>The vertex modes <TT CLASS="cv">kQAVertexMode_Point</TT> and <TT CLASS="cv">kQAVertexMode_Line</TT> are supported only by drawing engines that support the <TT CLASS="cv">kQAOptional_OpenGL</TT> feature. All other drawing engines should ignore requests to texture map points or lines. </P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=46810"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=46811"> </A>The <TT CLASS="cv">QADrawVTexture</TT> function is optional and must be supported only by drawing engines that support texture mapping and do not want calls to <TT CLASS="cv">QADrawVTexture</TT> to be replaced by calls to the <TT CLASS="cv">QADrawPoint</TT>, <TT CLASS="cv">QADrawLine</TT>, or <TT CLASS="cv">QADrawTriTexture</TT> methods.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=46059"> </A>QADrawBitmap</H2><P CLASS="T1.Text1"><A NAME="pgfId=46060"> </A><A NAME="marker=51746"> </A>You can use the <TT CLASS="cv">QADrawBitmap</TT> function to draw bitmaps into a draw context.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=68360"> </A>#define QADrawBitmap(drawContext,v,bitmap) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;drawBitmap (drawContext,v,bitmap)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68362"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46062"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68371"> </A><TT CLASS="cv">v</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46063"> </A>A Gouraud vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68380"> </A><TT CLASS="cv">bitmap</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46064"> </A>A pointer to a bitmap (returned by a previous call to <TT CLASS="cv">QABitmapNew</TT>).</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=46065"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=46066"> </A>The <TT CLASS="cv">QADrawBitmap</TT> function draws the bitmap specified by the <TT CLASS="cv">bitmap</TT> parameter into the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter, with the upper-left corner of the bitmap located at the point specified by the <TT CLASS="cv">v</TT> parameter. The <TT CLASS="cv">v</TT> parameter can contain negative values in its <TT CLASS="cv">x</TT> or <TT CLASS="cv">y</TT> fields, so you can position upper-left corner of the bitmap outside the draw context rectangle. This allows you to move the bitmap smoothly off any edge of the draw context.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=46067"> </A>QARenderStart</H2><P CLASS="T1.Text1"><A NAME="pgfId=46068"> </A><A NAME="marker=51741"> </A>You can use the <TT CLASS="cv">QARenderStart</TT> function to initialize a draw context before an engine performs any rendering into that context.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=68391"> </A>#define QARenderStart(drawContext,dirtyRect,initialContext) \<BR>(drawContext)-&gt;renderStart (drawContext,dirtyRect,initialContext)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68393"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46070"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68402"> </A><TT CLASS="cv">dirtyRect</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46071"> </A>The minimum area of the specified draw context to clear, or the value <TT CLASS="cv">NULL</TT>.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68411"> </A><TT CLASS="cv">initialContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46072"> </A> A previously cached draw context, or the value <TT CLASS="cv">NULL</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=46073"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=46074"> </A>The <TT CLASS="cv">QARenderStart</TT> function performs any operations necessary to initialize the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter. This includes clearing the z buffer and the color buffers of the draw context. If the value of the <TT CLASS="cv">initialContext</TT> parameter is <TT CLASS="cv">NULL</TT>, then <TT CLASS="cv">QARenderStart</TT> clears the z buffer to 1.0 and sets the color buffers to the values of the <TT CLASS="cv">kQATag_ColorBG_a</TT>, <TT CLASS="cv">kQATag_ColorBG_r</TT>, <TT CLASS="cv">kQATag_ColorBG_g</TT>, and <TT CLASS="cv">kQATag_ColorBG_b</TT> draw context state variables. If, however, the value of the <TT CLASS="cv">initialContext</TT> parameter is not <TT CLASS="cv">NULL</TT>, then <TT CLASS="cv">QARenderStart</TT> uses the previously cached draw context specified by that parameter to initialize the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter.</P><P CLASS="T1.Text1"><A NAME="pgfId=46075"> </A>The <TT CLASS="cv">dirtyRect</TT> parameter indicates the minimum area, in local coordinates of the draw context, of the specified draw context to clear on initialization. If the value of the <TT CLASS="cv">dirtyRect</TT> parameter is <TT CLASS="cv">NULL</TT>, the entire draw context is cleared. If the value of the <TT CLASS="cv">dirtyRect</TT> parameter is not <TT CLASS="cv">NULL</TT>, it indicates the rectangle in the draw context to clear. Some drawing engines may exhibit improved performance when an area that is smaller than the entire draw context rectangle is passed. However, the interpretation of the <TT CLASS="cv">dirtyRect</TT> parameter is dependent on the drawing engine, which may choose to initialize the entire draw context. As a result, you should not use this parameter as a means to avoid clearing all of a draw context or to perform incremental rendering. Instead, you should use the <TT CLASS="cv">initialContext</TT> parameter to achieve such effects.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=46076"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=46077"> </A>You should call <TT CLASS="cv">QARenderStart</TT> before performing any rendering operations in the specified draw context, and you should call either <TT CLASS="cv">QARenderEnd</TT> to signal the end of rendering operations or <TT CLASS="cv">QARenderAbort</TT> to cancel rendering operations. However, when a drawing engine is performing OpenGL rendering, the <TT CLASS="cv">QARenderStart</TT> function operates just like the OpenGL function <TT CLASS="cv">glClear</TT>. In OpenGL mode, it is not necessary that a call to <TT CLASS="cv">QARenderStart</TT> always be balanced by a matching call to <TT CLASS="cv">QARenderEnd</TT>, and drawing commands may occur at any time.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=46078"> </A>SEE ALSO</H3><P CLASS="T1.Text1"><A NAME="pgfId=46082"> </A>See <A HREF="qd3dravedriver.a.htm#15321" CLASS="XRef">&quot;Using a Draw Context as a Cache&quot;</A> for information on creating a draw context cache (that is, a draw context you can use as the initial context specified in the <TT CLASS="cv">initialContext</TT> parameter).</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=46083"> </A>QARenderEnd</H2><P CLASS="T1.Text1"><A NAME="pgfId=46084"> </A><A NAME="marker=51736"> </A>You can use the <TT CLASS="cv">QARenderEnd</TT> function to signal the end of any rendering into a draw context.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=68423"> </A>#define QARenderEnd(drawContext,modifiedRect) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;renderEnd (drawContext,modifiedRect)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68425"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46086"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68434"> </A><TT CLASS="cv">modifiedRect</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46087"> </A>The minimum area of the back buffer of the specified draw context to display, or the value <TT CLASS="cv">NULL</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=46088"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=46089"> </A>The <TT CLASS="cv">QARenderEnd</TT> function performs any operations necessary to display an image rendered into the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter. If the draw context is double buffered, <TT CLASS="cv">QARenderEnd</TT> displays the back buffer. If the draw context is single buffered, <TT CLASS="cv">QARenderEnd</TT> calls <TT CLASS="cv">QAFlush</TT>.</P><P CLASS="T1.Text1"><A NAME="pgfId=46090"> </A>The <TT CLASS="cv">modifiedRect</TT> parameter indicates the minimum area of the back buffer of the specified draw context that should be displayed. If the value of the <TT CLASS="cv">modifiedRect</TT> parameter is <TT CLASS="cv">NULL</TT>, the entire back buffer is displayed. If the value of the <TT CLASS="cv">modifiedRect</TT> parameter is not <TT CLASS="cv">NULL</TT>, it indicates the rectangle in the back buffer to display. Some drawing engines may exhibit improved performance when an area that is smaller than the entire draw context rectangle is passed (to avoid unnecessary pixel copying). However, the interpretation of the <TT CLASS="cv">modifiedRect</TT> parameter is dependent on the drawing engine, which may choose to draw the entire back buffer.</P><P CLASS="T1.Text1"><A NAME="pgfId=46091"> </A>The <TT CLASS="cv">QARenderEnd</TT> function returns a result code (of type <TT CLASS="cv">TQAError</TT>) indicating whether any errors have occurred since the previous call to <TT CLASS="cv">QARenderStart</TT>. If all rendering commands completed successfully, the value <TT CLASS="cv">kQANoErr</TT> is returned. If any other value is returned, you should assume that the rendered image is incorrect.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=46092"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=46093"> </A>You should call <TT CLASS="cv">QARenderStart</TT> before performing any rendering operations in the specified draw context, and you should call either <TT CLASS="cv">QARenderEnd</TT> to signal the end of rendering operations or <TT CLASS="cv">QARenderAbort</TT> to cancel rendering operations. Once you have called <TT CLASS="cv">QARenderEnd</TT>, you should not submit any drawing requests until you have called <TT CLASS="cv">QARenderStart</TT> again.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=46094"> </A>QARenderAbort</H2><P CLASS="T1.Text1"><A NAME="pgfId=56545"> </A><A NAME="marker=56544"> </A>You can use the <TT CLASS="cv">QARenderAbort</TT> function to cancel any asynchronous drawing requests for a draw context.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=68445"> </A>#define QARenderAbort(drawContext) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;renderAbort (drawContext)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68447"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=56547"> </A>A draw context.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=46098"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=46099"> </A>The <TT CLASS="cv">QARenderAbort</TT> function immediately stops the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter from processing any asynchronous drawing commands it is currently processing and causes it to discard any queued commands.</P><P CLASS="T1.Text1"><A NAME="pgfId=47034"> </A>The <TT CLASS="cv">QARenderAbort</TT> function returns a result code (of type <TT CLASS="cv">TQAError</TT>) indicating whether any errors have occurred since the previous call to <TT CLASS="cv">QARenderStart</TT>. If all rendering commands completed successfully, the value <TT CLASS="cv">kQANoErr</TT> is returned. If any other value is returned, you should assume that the rendered image is incorrect.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=46101"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=46102"> </A>You should call either <TT CLASS="cv">QARenderEnd</TT> or <TT CLASS="cv">QARenderAbort</TT>, but not both.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=46104"> </A><A NAME="13899"> </A>QAFlush</H2><P CLASS="T1.Text1"><A NAME="pgfId=46105"> </A><A NAME="marker=51726"> </A>You can use the <TT CLASS="cv">QAFlush</TT> function to flush a draw context.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=68458"> </A>#define QAFlush(drawContext) (drawContext)-&gt;flush (drawContext)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68460"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46107"> </A>A draw context.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=46108"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=46109"> </A>The <TT CLASS="cv">QAFlush</TT> function causes the drawing engine associated with the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter to begin rendering all drawing commands that are queued in a buffer awaiting processing. QuickDraw&nbsp;3D RAVE allows a drawing engine to buffer as many drawing commands as desired. Accordingly, the successful completion of a drawing command (such as <TT CLASS="cv">QADrawPoint</TT>) does not guarantee that the specified object is visible on the screen. You can call <TT CLASS="cv">QAFlush</TT> to have a drawing engine start processing queued commands. Note, however, that <TT CLASS="cv">QAFlush</TT> is not a blocking call--that is, the successful completion of <TT CLASS="cv">QAFlush</TT> does not guarantee that all buffered commands have been processed. Calling <TT CLASS="cv">QAFlush</TT> guarantees only that all queued commands will eventually be processed.</P><P CLASS="T1.Text1"><A NAME="pgfId=46113"> </A>Typically, you should occasionally call <TT CLASS="cv">QAFlush</TT> to update the screen image during a lengthy set of rendering operations in a single-buffered draw context. <TT CLASS="cv">QAFlush</TT> has no visible effect when called on a double-buffered draw context, but it does initiate rendering to the back buffer.</P><P CLASS="T1.Text1"><A NAME="pgfId=47081"> </A>The <TT CLASS="cv">TQAFlush</TT> function returns a result code (of type <TT CLASS="cv">TQAError</TT>) indicating whether any errors have occurred since the previous call to <TT CLASS="cv">QARenderStart</TT>. If all rendering commands completed successfully, the value <TT CLASS="cv">kQANoErr</TT> is returned. If any other value is returned, you should assume that the rendered image is incorrect.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=46115"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=46116"> </A>The <TT CLASS="cv">QARenderEnd</TT> function automatically calls <TT CLASS="cv">QAFlush</TT>.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=46117"> </A>SEE ALSO</H3><P CLASS="T1.Text1"><A NAME="pgfId=46118"> </A>To ensure that all buffered commands have been processed, you can call <TT CLASS="cv">QASync</TT> instead of <TT CLASS="cv">QAFlush</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=46119"> </A>QASync</H2><P CLASS="T1.Text1"><A NAME="pgfId=46120"> </A><A NAME="marker=51721"> </A>You can use the <TT CLASS="cv">QASync</TT> function to synchronize a draw context.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=68471"> </A>#define QASync(drawContext) (drawContext)-&gt;sync (drawContext)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68473"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=46122"> </A>A draw context.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=46123"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=46124"> </A>The <TT CLASS="cv">QASync</TT> function operates just like the <TT CLASS="cv">QAFlush</TT> function, except that it waits until all queued drawing commands have been processed before returning. See the description of <TT CLASS="cv">QAFlush</TT> <A HREF="qd3dravedriver.44.htm#13899" CLASS="XRef">[link]</A> for complete details.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=56598"> </A>QAGetNoticeMethod</H2><P CLASS="T1.Text1"><A NAME="pgfId=56629"> </A><A NAME="marker=57767"> </A><A NAME="marker=56628"> </A>You can use the <TT CLASS="cv">QAGetNoticeMethod</TT> function to get the notice method of a draw context.</P><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=68484"> </A>#define QAGetNoticeMethod(drawContext, method, completionCallBack, refCon) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;getNoticeMethod (drawContext, method, completionCallBack, refCon)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68486"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=56645"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68495"> </A><TT CLASS="cv">method</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=56656"> </A>A method selector. See <A HREF="qd3dravedriver.32.htm#30293" CLASS="XRef">&quot;Notice Method Selectors&quot;</A> for a description of the available method selectors.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68504"> </A><TT CLASS="cv">completionCallBack</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=56657"> </A> On exit, a pointer to the current draw context notice method of the specified type.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68514"> </A><TT CLASS="cv">refCon</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=56658"> </A>On exit, the reference constant of the specified notice method.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=56666"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=56667"> </A>The <TT CLASS="cv">QAGetNoticeMethod</TT> function returns, in the <TT CLASS="cv">completionCallBack</TT> parameter, a pointer to the current notice method of the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter that has the type specified by the <TT CLASS="cv">method</TT> parameter. <TT CLASS="cv">QAGetNoticeMethod</TT> also returns, in the <TT CLASS="cv">refCon</TT> parameter, the reference constant associated with that notice method.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=56785"> </A>SEE ALSO</H3><P CLASS="T1.Text1"><A NAME="pgfId=56786"> </A>Use <TT CLASS="cv">QASetNoticeMethod</TT> (next) to set the notice method for a draw context.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=56794"> </A>QASetNoticeMethod</H2><P CLASS="T1.Text1"><A NAME="pgfId=56796"> </A><A NAME="marker=56795"> </A>You can use the <TT CLASS="cv">QASetNoticeMethod</TT> function to set the notice method of a draw context.</P><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=68525"> </A>#define QASetNoticeMethod(drawContext, method, completionCallBack, refCon) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;(drawContext)-&gt;setNoticeMethod (drawContext, method, completionCallBack, refCon)<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68527"> </A><TT CLASS="cv">drawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=56798"> </A>A draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68536"> </A><TT CLASS="cv">method</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=56802"> </A>A method selector. See <A HREF="qd3dravedriver.32.htm#30293" CLASS="XRef">&quot;Notice Method Selectors&quot;</A> for a description of the available method selectors.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68545"> </A><TT CLASS="cv">completionCallBack</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=56803"> </A> A pointer to the desired draw context notice method of the specified type. See <A HREF="qd3dravedriver.4c.htm#19385" CLASS="XRef">&quot;Notice Methods&quot;</A> for information about notice methods.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=68555"> </A><TT CLASS="cv">refCon</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=56804"> </A>A reference constant for the specified notice method. This value is passed unchanged to the notice method when it is called.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=56805"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=56806"> </A>The <TT CLASS="cv">QASetNoticeMethod</TT> function sets the notice method of type <TT CLASS="cv">method</TT> of the draw context specified by the <TT CLASS="cv">drawContext</TT> parameter to the function pointed to by the <TT CLASS="cv">completionCallBack</TT> parameter. <TT CLASS="cv">QASetNoticeMethod</TT> also sets the reference constant of that method to the value specified by the <TT CLASS="cv">refCon</TT> parameter.<A NAME="marker=56592"> </A><A NAME="marker=57768"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>