<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><TITLE> QuickTime Concepts</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><!-- QTnavbar start --><P><I>QuickTime API Documentation</I><P><A target="doc" HREF="xxIntroductions.3.htm">Previous</A> | <A target="doc" HREF="xxIntroductions.2.htm">Chapter Top</A> | <A target="doc" HREF="xxIntroductions.1.htm">Chapter Contents</A> | <A target="doc" HREF="xxIntroductions.5.htm">Next</A> | <!-- QTnavbar end --><H1 CLASS="H2.Heading2"><A NAME="pgfId=45996"> </A><A NAME="marker=45995"> </A>QuickTime Concepts</H1><P CLASS="T1.Text1"><A NAME="pgfId=45997"> </A>To use QuickTime, you need to understand some concepts that are related to time-based data: atoms, media structures, components, time management, and sprites. They are briefly explained in this section.</P><DIV><H2 CLASS="H3.Heading3"><A NAME="pgfId=45999"> </A><A NAME="marker=45998"> </A>Atoms</H2><P CLASS="T1.Text1"><A NAME="pgfId=46000"> </A>QT atoms are basic containers that QuickTime uses to construct hierarchical data structures. A newly created QT atom is like the root of a tree. Each subsequent QT atom is contained in it and contains either data or other atoms. If a QT atom contains other atoms, it is called a <A NAME="marker=46001"> </A>parent atom and the atoms it contains are called its <A NAME="marker=46002"> </A>child atoms. If a QT atom contains data, it is called a <A NAME="marker=46003"> </A>leaf atom. Applications and other kinds of software can also use the QT atom architecture to store data. For further information about QT atoms, see &quot;Movie Toolbox: Fundamentals.&quot;</P></DIV><DIV><H2 CLASS="H3.Heading3"><A NAME="pgfId=46005"> </A><A NAME="marker=46004"> </A>Media Structures</H2><P CLASS="T1.Text1"><A NAME="pgfId=46006"> </A>Traditional video consists of a continuous stream of data. A QuickTime movie can be similarly constructed, but it need not be: a QuickTime movie may consist of streams of data taken from different sources, such as analog video, still images stored on CD-ROM, and MIDI music. The movie is not the medium; it is the organizing principle.</P><P CLASS="T1.Text1"><A NAME="pgfId=46008"> </A>QuickTime movies usually consist of several <B CLASS="bold">tracks.</B><A NAME="marker=46007"> </A> A track does not contain movie data; it contains only references to data that are stored elsewhere as images, sounds, or other media types. These data references constitute the track's <B CLASS="bold">media structure.</B> Each track contains a single media structure and an <A NAME="marker=46009"> </A>edit list that arranges the media structure into a time sequence. Media structures and edit lists are implemented as QT atoms.</P></DIV><DIV><H2 CLASS="H3.Heading3"><A NAME="pgfId=46012"> </A><A NAME="32718"> </A><A NAME="marker=46011"> </A>Components</H2><P CLASS="T1.Text1"><A NAME="pgfId=46013"> </A>QuickTime supports plug-in components that free applications from needing to know about all the technologies and devices that QuickTime works with. Many QuickTime services, such as image compression and decompression, are provided by components. A <B CLASS="bold">component</B> contains code, which can be made available globally to the whole system or locally to a particular application. Each QuickTime component implements a defined set of features and presents specific interfaces to the technology it supports and to its client applications. Applications are thereby isolated from the details of implementing and managing various technologies.</P><P CLASS="T1.Text1"><A NAME="pgfId=46014"> </A>QuickTime is supplied with about 180 built-in components. It also contains an API that lets you create new components. For example, you could create a component to support a special data encryption algorithm. Multiple applications could then perform encryption by connecting to your component instead of having to implement the algorithm themselves.</P><P CLASS="T1.Text1"><A NAME="pgfId=46016"> </A>Applications gain access to components by calling the system-level <A NAME="marker=46015"> </A>Component Manager. The Component Manager lets you define and register types of components and communicate with components using a standard interface. Once an application is connected to a component, it calls the component directly. When you create a new component class you define a standard function-level interface for that type. This means that a variety of applications can access your component with confidence that it will work.</P><P CLASS="T1.Text1"><A NAME="pgfId=46017"> </A>The Component Manager and the process of building new components are described in &quot;Component Manager.&quot;</P></DIV><DIV><H2 CLASS="H3.Heading3"><A NAME="pgfId=46019"> </A><A NAME="marker=46018"> </A>Time Management</H2><P CLASS="T1.Text1"><A NAME="pgfId=46020"> </A>Time management is an important and sometimes complex part of the implementation of QuickTime movies. For many movies, the correct play rate is the rate at which human actions appear natural and objects fall with normal acceleration. But what is the play rate of a movie that shows spreadsheet data charted over time or a map of the earth that recapitulates continental drift? This problem is deepened by the differing clock speeds of various platforms and the need to decompress data in real time, all of which affect time scales.</P><P CLASS="T1.Text1"><A NAME="pgfId=46022"> </A>To manage the time dimension of movies, QuickTime defines <B CLASS="bold">time coordinate systems,</B><A NAME="marker=46021"> </A> which anchor movies and their media data structures to a common temporal reality, the second. A time coordinate system contains a <B CLASS="bold">time scale</B><A NAME="marker=46023"> </A> that provides the translation between real time and the apparent time in a movie. Time scales are marked in <B CLASS="bold">time units.</B><A NAME="marker=46024"> </A> The number of units that pass per second quantifies the scale--that is, a time scale of 26 means that 26 units pass per second and each time unit is 1/26 of a second. A time coordinate system also contains a <B CLASS="bold">duration,</B><A NAME="marker=46025"> </A> which is the length of a movie or a media structure in terms of the number of time units it contains. A particular point in a movie can then be identified by the number of time units elapsed to that point. Each track in a movie contains a time offset and a duration, which determine when the track begins playing and for how long.</P><P CLASS="T1.Text1"><A NAME="pgfId=46026"> </A>Each media structure has its own time scale, which determines its number of samples per second. The Movie Toolbox maps each type of media data from the movie's time coordinate system to the media structure's time coordinate system.</P><P CLASS="T1.Text1"><A NAME="pgfId=46027"> </A>Time bases and time coordinate systems are described in &quot;Movie Toolbox: Time and Space.&quot;</P></DIV><DIV><H2 CLASS="H3.Heading3"><A NAME="pgfId=46029"> </A><A NAME="marker=46028"> </A>Sprites</H2><P CLASS="T1.Text1"><A NAME="pgfId=46030"> </A>A sprite is an animated graphic created by QuickTime. With traditional video animation, you describe a frame by specifying the color of each pixel. With sprite animation you describe a frame by specifying the images that appear at various locations.</P><P CLASS="T1.Text1"><A NAME="pgfId=46031"> </A>Each sprite has properties that describe its location and appearance at a given time. During an animation sequence, the application modifies the sprite's properties to cause it to change its appearance and move around the screen. Sprites may be mixed with still-image graphics to produce a wide variety of effects while using relatively little memory.</P><P CLASS="T1.Text1"><A NAME="pgfId=46032"> </A>Sprites are described in &quot;Movie Toolbox: Sprite Toolbox.&quot;</P></DIV><hr>&#169; 1997 Apple Computer, Inc.<!-- QTnavbar start --><P><I>QuickTime API Documentation</I><P><A target="doc" HREF="xxIntroductions.3.htm">Previous</A> | <A target="doc" HREF="xxIntroductions.2.htm">Chapter Top</A> | <A target="doc" HREF="xxIntroductions.1.htm">Chapter Contents</A> | <A target="doc" HREF="xxIntroductions.5.htm">Next</A> | <!-- QTnavbar end --><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>