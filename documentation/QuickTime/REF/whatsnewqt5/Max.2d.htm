<HTML><head><script language="JavaScript" src="../../RM/frametest.js"></script><TITLE> XML Event-Based Parsing</TITLE><script language=javascript> window.parent.focus(); </script></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><!-- QTnavbar start --><P><I>What's New in QuickTime 5</I><P>| <A HREF="Max.2c.htm">Previous</A> | <A HREF="Max.1.htm">Chapter Contents</A> | <A HREF="Max.htm">Chapter Top</A> | <A HREF="Max.2e.htm">Next</A> |</P></DIV><!-- QTnavbar end --><H1 CLASS="H1.Heading1"><A NAME="pgfId=93784"> </A><A NAME="18502"> </A>XML Event-Based Parsing</H1><P CLASS="T1.Text1"><A NAME="pgfId=93786"> </A>QuickTime&nbsp;5 now includes an <A NAME="marker=93785"> </A>XML parsing component. In addition to tree-based XML parsing, it supports event-based XML parsing. This is supported through callbacks to the client. </P><P CLASS="T1.Text1"><A NAME="pgfId=93787"> </A>Event-based parsing uses much less memory than the tree-based parser. Basically, it does a callback anytime something interesting happens. To invoke this, you pass the <TT CLASS="cv">xmlParseFlagEventParseOnly</TT> flag to <TT CLASS="cv">XMLParseDataRef()</TT> or <TT CLASS="cv">XMLParseFile()</TT>. The <TT CLASS="cv">XMLDoc</TT> parameter should be set to NULL in this case. The handlers (which need not all be set) are defined as follows:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=97181"> </A>ComponentResult startDocumentHandler(long refcon);<BR>ComponentResult endDocumentHandler(long refcon);<BR>ComponentResult startElementHandler(const char *name, const char **atts, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long refcon);<BR>ComponentResult endElementHandler(const char *name, long refcon);<BR>ComponentResult charDataHandler(const char *charData, long refcon);<BR>ComponentResult commentHandler(const char *comment, long refcon);<BR>ComponentResult preprocessHandler(const char *name, const char **atts, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long refcon);</code><br><P CLASS="T1.Text1"><A NAME="pgfId=93789"> </A>The following APIs set the callbacks along with the common refcon shared among the callbacks:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=97185"> </A>pascal ComponentResult XMLParseSetEventParseRefCon(ComponentInstance <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aParser, long refcon);</code><br><CODE CLASS="Cv.Code"><A NAME="pgfId=97189"> </A>pascal ComponentResult XMLParseSetStartDocumentHandler(ComponentInstance <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aParser, StartDocumentHandlerUPP <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startDocument);</code><br><CODE CLASS="Cv.Code"><A NAME="pgfId=97193"> </A>pascal ComponentResult XMLParseSetEndDocumentHandler(ComponentInstance <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aParser, EndDocumentHandlerUPP endDocument);</code><br><CODE CLASS="Cv.Code"><A NAME="pgfId=97197"> </A>pascal ComponentResult XMLParseSetStartElementHandler(ComponentInstance <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aParser, StartElementHandlerUPP startElement);</code><br><CODE CLASS="Cv.Code"><A NAME="pgfId=97201"> </A>pascal ComponentResult XMLParseSetEndElementHandler(ComponentInstance <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aParser, EndElementHandlerUPP endElement);</code><br><CODE CLASS="Cv.Code"><A NAME="pgfId=97205"> </A>pascal ComponentResult XMLParseSetCharDataHandler(ComponentInstance <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aParser, CharDataHandlerUPP charData);</code><br><CODE CLASS="Cv.Code"><A NAME="pgfId=97209"> </A>pascal ComponentResult XMLParseSetPreprocessInstructionHandler(ComponentInstance aParser, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PreprocessInstructionHandlerUPP <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;preprocessInstruction);</code><br><CODE CLASS="Cv.Code"><A NAME="pgfId=97213"> </A>pascal ComponentResult XMLParseSetCommentHandler(ComponentInstance <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aParser, CommentHandlerUPP comment);</code><br><P CLASS="T1.Text1"><A NAME="pgfId=93752"> </A>It is the client's responsibility to create and free any UPPs it sets. Also, the <TT CLASS="cv">atts</TT> parameter returned in the start element and preprocess handlers is a character string array that contains the attribute name followed by the attribute value. The list ends with a null terminator.</P><hr>&#169; 2001 Apple Computer, Inc.<!-- QTnavbar start --><P><I>What's New in QuickTime 5</I><P>| <A HREF="Max.2c.htm">Previous</A> | <A HREF="Max.1.htm">Chapter Contents</A> | <A HREF="Max.htm">Chapter Top</A> | <A HREF="Max.2e.htm">Next</A> |</P></DIV><!-- QTnavbar end --></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>