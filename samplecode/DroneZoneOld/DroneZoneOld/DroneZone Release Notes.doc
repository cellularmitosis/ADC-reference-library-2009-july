Drone Zone 2.0b1 Release Notes------------------------------DroneZone is a QD3D application which was designed to use SoundSprocket to demonstrate 3Dsound. It also became a good demonstration of InputSprocket, especially in this latest version. The DrawSprocket code is currently disabled, and should not be used as a DrawSprocket reference (SprocketInvaders is a much better choice for sample code to learnDrawSprocket). The QD3D code in DroneZone was written for QD3D 1.0, and until the code is updated, also should not be used as the foundation of a real project.This is not 'official' sample code. It has not been extensively tested. It is codewritten by the sprockets engineers, expressly to demonstrate the sprockets. The InputSprocketcode in this version is solid, and was specifically designed to be similar to a flightsimso that those who are working on a project with flight-sim like controls can use the InputSprocket code almost verbatim.You will need to download InputSprocket 1.2.1 in order to build this project.Whats New---------(1) Full set of flight sim controls added, as an example of how to implement rudders     and throttles with both keyboard and axis input. The rudders have a keyboard key    to shift the rudder left, a key to center, and a key to shift right (as most     flightsims work). The throttle has a increment and decrement throttle, in addition    to a set throttle to max and a set throttle to min. It would be easy to add button    needs so that 1,2-9,0 on the keyboard could be mapped to 10%-100% throttle.    (2) The firing of the gun was changed so that you can hold the trigger down to fire    repeatedly. There is a constant for how often the gun fires.(2) Uses new InputSprocket.r file to setup defaults for keyboards easily. For anyone	who developed using InputSprocket, this should be a great timesaver.(3) made the flight model more like real space (its currently not tuned 'right', but	the ISp stuff is functional, and thats what matters). There is a friction constant	which is currently turned on, which makes flight more like what a pilot would 	expect. If you turn it off, it will be much easier to get pointed in a completely	different direction than your velocity vector.(4) started adding additional displays which can be toggled (velocity, throttle) --     they are implemented, but don't seem to be working correctly(5) Updated for latest Universal and QD3D headers(6) Added a global to disable sound. It does not handle turning on or off however,    so, like the other options, is still effectively a compile-time option.