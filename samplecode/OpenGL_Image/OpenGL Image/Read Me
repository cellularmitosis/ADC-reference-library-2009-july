OpenGL ImageAn example showing the high performance display of 2-D images using OpenGL.  This sample demonstrates the fastest graphics paths on the Mac OS and shows, in detail, how they can be used by developers for outstanding 2-D performance.Features- Support for New advanced texturing features in Mac OS x 10.1+- Support for all types of QuickTime still images- Multiple windows/images- Live rotation and dragging- Infinite zoom- Single or tiled textures to store images- Overlapped textures for correct image filtering and magnification- Driven by Carbon events- Selectable automatic rotation via Carbon timer- Selectable display of image information and stats- Selectable display of polygon grid- Selectable display of texel grid- Carbon nib application for both Mac OS X and Mac OS 9- Bundled application for both Mac OS 9 and Mac OS X- Builds with CodeWarrior and Project Builder on Mac OS 9 and Mac OS XVersion 1.19/26/2001Version 1.1: Mac OS X 10.1 releaseThis version adds support for advanced texturing features of Mac OS X 10.1.  These include Non-Power Of Two (NPOT) textures via the Texture Rectangle extension, use of application texture storage (texel buffers) by OpenGL via the Client Storage extension, and re-mapping of client memory to AGP memory for direct texturing from client texel buffers.The test application is designed to exercise and demonstrate all the various texturing and display options without regard to recommended usage which may result in invalid image display.These advance texturing options are available to all developers with Mac OS X 10.1.Basic Use Information:Non-Power Of Two (NPOT) textures: Use the Texture Rectangle extension available in the OpenGL framework on Mac OS X 10.1.  Note, you must enable this capability and use GL_TEXTURE_RECTANGLE_EXT as your texture target.  Also, the extension supports only even texels per row texture buffers.  Lastly, one should query the GPU for the maximum texture size limitations when using NPOT textures with glGetIntegerv and the GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT constant and stay below this maximum when using NPOT textures. Opengl_Image_Utilities.c for specific implementation details.Client Storage:This extension eliminates at least one texture copy, but the application must keep a copy of the texture for OpenGL updates (i.e., OpenGL does not cache an internal copy).  This is very useful for applications which by design keep a texture copy.  To use this the application should use glPixelStorei (GL_UNPACK_CLIENT_STORAGE_APPLE, 1).  See Opengl_Image_Utilities.c for specific implementation details.AGP Texturing:To fully enable AGP texturing applications should use POT textures, client storage and then set the texture priority to 0.0.  This hint will signal the OpenGL engine to map textures into AGP space (without copying) and texture directly from the client texture storage if possible.  Note, it is critical for the application to maintain it's copy of the texture and not delete it as long as the OpenGL engine maybe using it.  See Opengl_Image_Utilities.c for specific implementation details especially for proper texture deletion handling.  It is not recommended using AGP texturing with tiled textures or textures where the unpack row length is not the same as the actual texture width.Further documentation to follow but this should get developers rolling.Version 1.0: Initial releaseThis sample shows how to display images using OpenGL on Mac OS X and Mac OS 9.  It uses QuickTime to load still images from any of the types support by the QuickTime Decompression Manager.  It then uploads the images as OpenGL textures by either scaling the image to a power of 2 texture size or segmenting the image into multiple textures, which can be loaded separately.  Additionally, the code shows how to create textures, which overlap each other to allow correct magnification filtering, resulting in smooth and correct image display.Techniques for handling multiple windows/images are shown, along with high performance live dragging and rotation.  Images can infinitely zoomed in or out, using OpenGL to scale the image on the fly.  An auto-rotation feature is implemented to show the integration of a Carbon timer in a multiple window real-time environment.Lastly, image/display information, polygon and texel grids can be displayed to show the techniques used to draw/composite the images.The Bundled Application:The application contained in the sample is a bundled application that will run on Mac OS X and Mac OS 9. If one opens the package they will see a alias to the Mac OS 9 application at the package top level.  This must be maintained and should be recreated if removed (or application will not launch on Mac OS 9).  At a lower level one will find a MacOS folder, with the Mac OS X application, and a MacOSClassic folder, with the Mac OS 9 application.  The CodeWarrior project is set to automatically put the executable in the package.  On the project Builder side, one must move the executable from inside the package created by Project Builder (in the build folder) to the package, at the top level of the sample, if changes are made on the Mac OS X side.  Note, Project Builder will build and debug the application just fine but this will be the application in the build folder.  Once building and debugging is complete move the executable to package at the top level of the sample.Interface Builder can be used to edit the nib files.  The files that are in The Project Builder project are the ones in the English.lproj folder.  Once these are updated they will automatically be used by Project builder for the Mac OS X package but this folder will need to moved manually to the resources folder in the package Contents for the package itself to be updated.This seems confusing but in reality is a very simple procedure allowing separate executables for Mac OS X and Mac OS 9.  This can simplify your development process and allow your Mac OS X Carbon application to directly access all Mac OS X Mach-O based services.Note: Under CodeWarrior you will have to change the access path for the OpenGL SDK with valid a one for your local environment.Requirements: Carbon SetupGL sample. aglString sample, Mac OS X and Project Builder or CWPro 6+; -or- Mac OS 9 and Carbon SDK 1.3.1+, OpenGL SDK, and Universal Interfaces 3.3+ or DrawSprocket SDK