<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Drawing State Methods</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH2.RoutineHd2"><A NAME="pgfId=10714"> </A><A NAME="22083"> </A>Drawing State Methods</H1><P CLASS="T1.Text1"><A NAME="pgfId=10715"> </A>This section describes renderer support methods for the drawing state in a view.</P><DIV><H3 CLASS="RoH.RoutineHeading"><A NAME="pgfId=10759"> </A>TQ3XRendererStartFrameMethod</H3><P CLASS="T1.Text1"><A NAME="pgfId=10986"> </A>The TQ3XRendererStartFrameMethod functionality is required in a renderer.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=20800"> </A>#define kQ3XMethodTypeRendererStartFrame<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3_METHOD_TYPE('r','d','c','l')<BR></CODE><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=20806"> </A>typedef TQ3Status (*TQ3XRendererStartFrameMethod)(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ViewObject&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*rendererPrivate,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3DrawContextObject&nbsp;&nbsp;&nbsp;&nbsp;drawContext);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20810"> </A>view</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10762"> </A>The current view being rendered to.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20820"> </A>rendererPrivate</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10763"> </A> 	A pointer to structure of size <TT CLASS="cv">instanceSize</TT>, passed into <TT CLASS="cv">Q3ObjectHierarchy_RegisterClass</TT>, and initialized in your <TT CLASS="cv">kQ3MethodTypeObjectNew</TT> method.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20830"> </A>drawContext</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10764"> </A>A draw context object.</DD></DL COMPACT><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=10765"> </A>DESCRIPTION</H4><P CLASS="T1.Text1"><A NAME="pgfId=10766"> </A>The kQ3XMethodTypeRendererStartFrame method type returns a function pointer of type TQ3XRendererStartFrameMethod.</P><P CLASS="T1.Text1"><A NAME="pgfId=10911"> </A>TQ3XRendererStartFrameMethod is first called from <TT CLASS="cv">Q3View_StartRendering</TT>. It should perform these tasks:</P><UL><LI CLASS="B1.Bullet1"><A NAME="pgfId=10912"> </A>initialize any renderer states to their default values</LI><LI CLASS="B1.Bullet1"><A NAME="pgfId=10913"> </A>extract all useful data from the <TT CLASS="cv">drawContext</TT> object</LI><LI CLASS="B1.Bullet1"><A NAME="pgfId=10914"> </A>if the renderer passed in <TT CLASS="cv">kQ3RendererFlagClearBuffer</TT> at registration, it should also clear the draw context.</LI><LI CLASS="B1.Bullet1"><A NAME="pgfId=10915"> </A>clear the <TT CLASS="cv">drawContext</TT> object</LI></UL><P CLASS="T1.Text1"><A NAME="pgfId=10916"> </A>When clearing the <TT CLASS="cv">drawContext</TT> object, the renderer may opt to use any one of these procedures:</P><UL><LI CLASS="B1.Bullet1"><A NAME="pgfId=10917"> </A>not clear anything (for example, if it already touches every pixel)</LI><LI CLASS="B1.Bullet1"><A NAME="pgfId=10918"> </A>clear with its own routine, or</LI><LI CLASS="B1.Bullet1"><A NAME="pgfId=10919"> </A>use the draw context default clear method by calling <TT CLASS="cv">Q3DrawContext_Clear</TT>. <TT CLASS="cv">Q3DrawContext_Clear</TT> takes advantage of any hardware in the system that is available for clearing the drawing context.</LI></UL><P CLASS="T1.Text1"><A NAME="pgfId=10920"> </A>TQ3XRendererStartFrameMethod also signals the beginning of receiving default submit commands from the view. The renderer will receive updates for the default view state via its update methods before <TT CLASS="cv">StartScene</TT> is called. Renderer submit and update methods are discussed on <A HREF="qd3drenderers.19.htm#21930" CLASS="XRef">[link]</A>.</P></DIV></DIV><DIV><H3 CLASS="RoH.RoutineHeading"><A NAME="pgfId=10768"> </A>TQ3XRendererStartPassMethod</H3><P CLASS="T1.Text1"><A NAME="pgfId=11040"> </A>The TQ3XRendererStartPassMethod functionality is required in a renderer.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=20841"> </A>#define kQ3XMethodTypeRendererStartPass<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3_METHOD_TYPE('r','d','s','t')<BR></CODE><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=20847"> </A>typedef TQ3Status (*TQ3XRendererStartPassMethod)(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ViewObject&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*rendererPrivate,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3CameraObject&nbsp;&nbsp;&nbsp;&nbsp;camera,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GroupObject&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lightGroup);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20851"> </A>view</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10771"> </A>The current view being rendered to.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20861"> </A>rendererPrivate</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10772"> </A> 	A pointer to structure of size <TT CLASS="cv">instanceSize</TT>, passed into <TT CLASS="cv">Q3ObjectHierarchy_RegisterClass</TT>, and initialized in your <TT CLASS="cv">kQ3MethodTypeObjectNew</TT> method.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20871"> </A>camera</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=11032"> </A>A camera object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20880"> </A>lightGroup</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=11034"> </A>A light group object.</DD></DL COMPACT><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=10774"> </A>DESCRIPTION</H4><P CLASS="T1.Text1"><A NAME="pgfId=10775"> </A>The kQ3XMethodTypeRendererStartPass method type returns a function pointer of type TQ3XRendererStartPassMethod.</P><P CLASS="T1.Text1"><A NAME="pgfId=11011"> </A>TQ3XRendererStartPassMethod is called during <TT CLASS="cv">Q3View_StartRendering</TT> after the <TT CLASS="cv">StartFrame</TT> command. It should perform these tasks:</P><UL><LI CLASS="B1.Bullet1"><A NAME="pgfId=11012"> </A>collect camera and light information</LI><LI CLASS="B1.Bullet1"><A NAME="pgfId=11013"> </A>prepare any additional states before object submit calls are made</LI></UL><P CLASS="T1.Text1"><A NAME="pgfId=11014"> </A>If the renderer supports deferred camera transformation, <TT CLASS="cv">camera</TT> represents the main camera that will be submitted somewhere in the hierarchy. Its value is never <TT CLASS="cv">NULL</TT>. If your renderer does not support deferred camera transformation, <TT CLASS="cv">camera</TT> represents the transformed camera.</P><P CLASS="T1.Text1"><A NAME="pgfId=11015"> </A>If the renderer supports deferred light transformation, the value of <TT CLASS="cv">lightGroup</TT> will be <TT CLASS="cv">NULL</TT> and it will be submitted to your light draw methods instead.</P><P CLASS="T1.Text1"><A NAME="pgfId=11016"> </A>Calling TQ3XRendererStartPassMethod signals the end of the default update state and the start of submit commands from the user to the view.</P></DIV></DIV><DIV><H3 CLASS="RoH.RoutineHeading"><A NAME="pgfId=10777"> </A>TQ3XRendererFlushFrameMethod</H3><P CLASS="T1.Text1"><A NAME="pgfId=11104"> </A>The TQ3XRendererFlushFrameMethod functionality is optional and is implemented only by asynchronous renderers.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=20891"> </A>#define kQ3XMethodTypeRendererFlushFrame<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3_METHOD_TYPE('r','d','f','l')<BR></CODE><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=20897"> </A>typedef TQ3Status (*TQ3XRendererFlushFrameMethod)(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ViewObject&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*rendererPrivate,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3DrawContextObject&nbsp;&nbsp;&nbsp;&nbsp;drawContext);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20901"> </A>view</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10780"> </A>The current view being rendered to.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20911"> </A>rendererPrivate</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10781"> </A> 	A pointer to structure of size <TT CLASS="cv">instanceSize</TT>, passed into <TT CLASS="cv">Q3ObjectHierarchy_RegisterClass</TT>, and initialized in your <TT CLASS="cv">kQ3MethodTypeObjectNew</TT> method.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20921"> </A>drawContext</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=11323"> </A>A draw context object.</DD></DL COMPACT><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=10783"> </A>DESCRIPTION</H4><P CLASS="T1.Text1"><A NAME="pgfId=10784"> </A>The kQ3XMethodTypeRendererFlushFrame method type returns a function pointer of type TQ3XRendererFlushFrameMethod.</P><P CLASS="T1.Text1"><A NAME="pgfId=11096"> </A>TQ3XRendererFlushFrameMethod is called between the <TT CLASS="cv">StartScene</TT> and <TT CLASS="cv">EndScene</TT> methods. It is called when the user wishes to flush any asynchronous drawing tasks that draw to the <TT CLASS="cv">drawContext</TT> object, but does not want to block asynchronous drawing altogether. As a result, an image should eventually appear asynchronously. In asynchronous rendering, this call is <B CLASS="bold">non-blocking.</B></P><P CLASS="T1.Text1"><A NAME="pgfId=11099"> </A>An interactive renderer should ensure that all received geometries are drawn in the image. If it controls the hardware, it should force the hardware to generate an image.</P><P CLASS="T1.Text1"><A NAME="pgfId=11101"> </A>A deferred renderer should exhibit similar behavior, though this is not a requirement.  A deferred renderer should spawn a process that generates a partial image from the currently accumulated drawing state. </P><P CLASS="T1.Text1"><A NAME="pgfId=11102"> </A>Implementing TQ3XRendererFlushFrameMethod is not recommended for computation-intensive renderers such as ray-tracers.</P></DIV></DIV><DIV><H3 CLASS="RoH.RoutineHeading"><A NAME="pgfId=10786"> </A>TQ3XRendererEndPassMethod</H3><P CLASS="T1.Text1"><A NAME="pgfId=11191"> </A>The TQ3XRendererEndPassMethod functionality is required in a renderer.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=20932"> </A>#define kQ3XMethodTypeRendererEndPass<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3_METHOD_TYPE('r','d','e','d')<BR></CODE><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=20938"> </A>typedef TQ3ViewStatus (*TQ3XRendererEndPassMethod)(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ViewObject&nbsp;&nbsp;&nbsp;&nbsp;view,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*rendererPrivate);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20942"> </A>view</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10789"> </A>The current view being rendered to.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20952"> </A>rendererPrivate</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10790"> </A> 	A pointer to structure of size <TT CLASS="cv">instanceSize</TT>, passed into <TT CLASS="cv">Q3ObjectHierarchy_RegisterClass</TT>, and initialized in your <TT CLASS="cv">kQ3MethodTypeObjectNew</TT> method.</DD></DL COMPACT><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=10792"> </A>DESCRIPTION</H4><P CLASS="T1.Text1"><A NAME="pgfId=10793"> </A>The kQ3XMethodTypeRendererEndPass method type returns a function pointer of type TQ3XRendererEndPassMethod.</P><P CLASS="T1.Text1"><A NAME="pgfId=11198"> </A>TQ3XRendererEndPassMethod is called at <TT CLASS="cv">Q3View_EndRendering</TT> and signals the end of sending submit commands to the view. If the renderer requires another pass on the data being rendered, it should return <TT CLASS="cv">kQ3ViewStatusRetraverse</TT>.</P><P CLASS="T1.Text1"><A NAME="pgfId=11201"> </A>If rendering was cancelled, TQ3XRendererEndPassMethod will not be called and the view will return <TT CLASS="cv">kQ3ViewStatusCancelled</TT>. Otherwise, your renderer should initiate completion of the process of  generating the image in the drawing context. If it has buffered any drawing data, the data must be flushed. TQ3XRendererEndPassMethod should have an effect similar to that of <TT CLASS="cv">FlushFrame</TT>.</P><P CLASS="T1.Text1"><A NAME="pgfId=11203"> </A>A synchronous renderer must update the front buffer; otherwise <TT CLASS="cv">DrawContext</TT> will update the front buffer after returning. If a synchronous renderer supports <TT CLASS="cv">kQ3RendererClassSupportDoubleBuffer</TT>, it must finish rendering the entire frame.</P><P CLASS="T1.Text1"><A NAME="pgfId=11208"> </A>An asynchronous renderer must spawn a rendering thread for the entire frame. If it supports <TT CLASS="cv">kQ3RendererClassSupportDoubleBuffer</TT>, it must eventually either update the front buffer asynchronously, then call <TT CLASS="cv">Q3View_EndFrame</TT>, or update the back buffer asynchronously, then call <TT CLASS="cv">Q3View_EndFrame</TT>.</P><P CLASS="T1.Text1"><A NAME="pgfId=11217"> </A>If an error occurs with TQ3XRendererEndPassMethod, the renderer should call <TT CLASS="cv">Q3Error_Post</TT> and return <TT CLASS="cv">kQ3ViewStatusError</TT>.</P></DIV></DIV><DIV><H3 CLASS="RoH.RoutineHeading"><A NAME="pgfId=10795"> </A>TQ3XRendererEndFrameMethod</H3><P CLASS="T1.Text1"><A NAME="pgfId=11298"> </A>The TQ3XRendererEndFrameMethod functionality is optional and is implemented only by asynchronous renderers.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=20964"> </A>#define kQ3XMethodTypeRendererEndFrame<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3_METHOD_TYPE('r','d','s','y')<BR></CODE><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=20970"> </A>typedef TQ3Status (*TQ3XRendererEndFrameMethod)(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ViewObject&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*rendererPrivate,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3DrawContextObject&nbsp;&nbsp;&nbsp;&nbsp;drawContext);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20974"> </A>view</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10798"> </A>The current view being rendered to.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20984"> </A>rendererPrivate</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10799"> </A> 	A pointer to structure of size <TT CLASS="cv">instanceSize</TT>, passed into <TT CLASS="cv">Q3ObjectHierarchy_RegisterClass</TT>, and initialized in your <TT CLASS="cv">kQ3MethodTypeObjectNew</TT> method.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=20994"> </A>drawContext</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=11325"> </A>A draw context object.</DD></DL COMPACT><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=10801"> </A>DESCRIPTION</H4><P CLASS="T1.Text1"><A NAME="pgfId=10802"> </A>The kQ3XMethodTypeRendererEndFrame method type returns a function pointer of type TQ3XRendererEndFrameMethod.</P><P CLASS="T1.Text1"><A NAME="pgfId=11330"> </A>TQ3XRendererEndFrameMethod is called from <TT CLASS="cv">Q3View_Sync</TT>, which is called after <TT CLASS="cv">Q3View_EndRendering</TT>. It signals that the user wishes to see the completed image and is willing to block drawing. No call to <TT CLASS="cv">Q3View_EndFrame</TT> is needed.</P><P CLASS="T1.Text1"><A NAME="pgfId=11331"> </A>If your renderer supports <TT CLASS="cv">kQ3RendererFlagDoubleBuffer</TT>, it must update the front buffer completely; otherwise it must update the back buffer completely.</P><P CLASS="T1.Text1"><A NAME="pgfId=11336"> </A>TQ3XRendererEndFrameMethod is equivalent in functionality to <TT CLASS="cv">FlushFrame</TT>, but it blocks drawing until the image is completed.</P><P CLASS="T1.Text1"><A NAME="pgfId=11337"> </A>If TQ3XRendererEndFrameMethod is not supplied, the default action is no operation.</P><P CLASS="Note"><A NAME="pgfId=11338"> </A>Registering a method of type TQ3XRendererEndFrameMethod indicates that your renderer will continue rendering after <TT CLASS="cv">Q3View_EndRendering</TT> has been called. </P></DIV></DIV><DIV><H3 CLASS="RoH.RoutineHeading"><A NAME="pgfId=10808"> </A>TQ3XRendererCancelMethod</H3><P CLASS="T1.Text1"><A NAME="pgfId=11352"> </A>The TQ3XRendererEndPassMethod functionality is required in a renderer.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21005"> </A>#define kQ3XMethodTypeRendererCancel<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3_METHOD_TYPE('r','d','a','b')<BR></CODE><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21011"> </A>typedef void (*TQ3XRendererCancelMethod)(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ViewObject&nbsp;&nbsp;&nbsp;&nbsp;view,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*rendererPrivate);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21015"> </A>view</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10811"> </A>The current view being rendered to.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21025"> </A>rendererPrivate</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10812"> </A> 	A pointer to structure of size <TT CLASS="cv">instanceSize</TT>, passed into <TT CLASS="cv">Q3ObjectHierarchy_RegisterClass</TT>, and initialized in your <TT CLASS="cv">kQ3MethodTypeObjectNew</TT> method.</DD></DL COMPACT><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=10814"> </A>DESCRIPTION</H4><P CLASS="T1.Text1"><A NAME="pgfId=10815"> </A>The kQ3XMethodTypeRendererCancel method type returns a function pointer of type TQ3XRendererCancelMethod.</P><P CLASS="T1.Text1"><A NAME="pgfId=11345"> </A>TQ3XRendererCancelMethod is called after <TT CLASS="cv">Q3View_StartRendering</TT> and signals the termination of all rendering operations. Your renderer should clean up any cached data and cancel all rendering operations. </P><P CLASS="I.Important"><A NAME="pgfId=11428"> </A>If TQ3XRendererCancelMethod is called before <TT CLASS="cv">Q3View_EndRendering</TT>, TQ3XRendererEndPassMethod is not called. </P><P CLASS="T1.Text1"><A NAME="pgfId=11348"> </A>If TQ3XRendererCancelMethod is called after <TT CLASS="cv">Q3View_EndRendering</TT>, your renderer should kill any rendering threads and terminate any further rendering. If your renderer is asynchronous, TQ3XRendererCancelMethod will never be called after <TT CLASS="cv">Q3View_EndRendering</TT>.</P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>