<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE> Retained and Immediate Modes</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="H2.Heading2"><A NAME="pgfId=3612"> </A>Retained and Immediate Modes</H1><P CLASS="T1.Text1"><A NAME="pgfId=3614"> </A><A NAME="marker=3613"> </A>A graphics system operates in <B CLASS="bold">retained mode</B> if it retains a copy of all the data describing a model. In other words, a retained mode graphics system requires you to completely specify a model by passing model data to the system using predefined data structures. The graphics system organizes the data internally, usually in a hierarchical database. Once an object is added to that database, you can change the object only by calling specific editing routines provided by the graphics system.<A NAME="marker=3616"> </A></P><P CLASS="T1.Text1"><A NAME="pgfId=3619"> </A><A NAME="marker=3618"> </A>By contrast, a graphics system operates in <B CLASS="bold">immediate mode</B> if the application itself maintains the data that describe a model. For example, original QuickDraw is a two-dimensional graphics system that operates in immediate mode. You draw objects on the screen, using QuickDraw, by calling routines that completely specify the objects to be drawn. QuickDraw does not maintain any information about a picture internally; it simply takes the data provided by the application and immediately draws the appropriate objects.</P><P CLASS="Note"><A NAME="pgfId=3134"> </A>OpenGL<EM CLASS="Superscript"></EM> is an example of a 3D graphics system that operates in immediate mode. QuickDraw&nbsp;GX is an example of a 2D graphics system that operates in retained mode. </P><P CLASS="T1.Text1"><A NAME="pgfId=3623"> </A>QuickDraw&nbsp;3D supports both immediate and retained modes of specifying and drawing models. The principal advantage of immediate mode imaging is that the model data is immediately available to you and is not duplicated by the graphics system. The data is stored in whatever form you like, and you can change that data at any time. The main disadvantage of immediate mode imaging is that you need to maintain the sometimes quite lengthy object data, and you need to perform geometric operations on that data yourself. In addition, it can be difficult to accelerate immediate mode rendering, because you generally need to specify the entire model to draw a single frame, whether or not the entire model has changed since the previous frame. This can involve passing large amounts of data to the graphics system.</P><P CLASS="T1.Text1"><A NAME="pgfId=3624"> </A>Retained mode imaging typically supports higher levels of abstraction than immediate mode imaging and is more amenable to hardware acceleration and caching. In addition, the hierarchical arrangement of the model data allows the graphics system to perform very quick updates whenever the data is altered. To avoid duplicating data between your application and the graphics system's database, your application should match the data types of the graphics system and use the extensive editing functions to change a model's data.</P><P CLASS="T1.Text1"><A NAME="pgfId=6183"> </A>Another important advantage of retained mode imaging is that it's very easy to read and write retained objects.</P><P CLASS="T1.Text1"><A NAME="pgfId=3625"> </A>To create a point, for example, in retained mode, you fill in a data structure of type <TT CLASS="cv">TQ3PointData</TT> and pass it to the <TT CLASS="cv">Q3Point_New</TT> function. This function copies the data in that structure and returns an object of type <TT CLASS="cv">TQ3GeometryObject</TT>, which you use for all subsequent operations on the point. For example, to draw the point in retained mode, you pass that geometric object returned by <TT CLASS="cv">Q3Point_New</TT> to the <TT CLASS="cv">Q3Geometry_Submit</TT> function inside a rendering loop. To change the data associated with the point, you call point-editing functions, such as <TT CLASS="cv">Q3Point_GetPosition</TT> and <TT CLASS="cv">Q3Point_SetPosition</TT>. Finally, when you have finished using the point, you must call <TT CLASS="cv">Q3Object_Dispose</TT> to have QuickDraw&nbsp;3D delete the point from its internal database.</P><P CLASS="T1.Text1"><A NAME="pgfId=3629"> </A>It's much simpler to draw a point in immediate mode. You do not need to call any QuickDraw&nbsp;3D routine to create a point in immediate mode; instead, you merely have to maintain the point data yourself, typically in a structure of type <TT CLASS="cv">TQ3PointData</TT>. To draw a point in immediate mode, you call the <TT CLASS="cv">Q3Point_Submit</TT> function, passing it a pointer to that structure. When you're using immediate mode, however, you need to know exactly what types of objects you're drawing and hard code the appropriate routines in your source code.</P><P CLASS="Note"><A NAME="pgfId=2988"> </A>Immediate mode rendering does not require any memory permanently allocated to QuickDraw&nbsp;3D, but it might require QuickDraw&nbsp;3D to perform temporary allocations while rendering is occurring. </P><P CLASS="T1.Text1"><A NAME="pgfId=3633"> </A>In general, if most of a model remains unchanged from frame to frame, you should use retained mode imaging to create and draw the model. If, however, many parts of the model do change from frame to frame, you should probably use immediate mode imaging, creating and rendering a model on a shape-by-shape basis. You can, of course, use a combination of retained and immediate mode imaging: you can create retained objects for the parts of a model that remain static and draw quickly changing objects in immediate mode.<A NAME="marker=3634"> </A><A NAME="marker=3635"> </A><A NAME="marker=3636"> </A></P><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>