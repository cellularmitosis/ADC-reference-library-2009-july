{\rtf1\mac\ansicpg10000\cocoartf100
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fswiss\fcharset77 Helvetica-BoldOblique;
\f3\fswiss\fcharset77 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;}
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\qc

\f0\b\fs48 \cf0 Moriarity Release Notes\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f1\b0\fs24 \cf0 \

\f2\i\b Version 1.0:\
\

\f1\i0\b0 This sample shows how to implement a Cocoa GUI that wraps command-line functionality, calling out to a UNIX task and presenting the results in the GUI to the user.  The TaskWrapper class used for task interaction is intended to be general purpose - feel free to use/adapt it to your own applications.  The command-line functionality demonstrated in this case is 'locate' - a command that builds a database of files on the system for searching, a la Sherlock.  One interesting thing to note is that 
\f3\i locate 
\f1\i0 matches a given string anywhere in a path to a file, not just in the name of a file.\
\

\f2\i\b Version 1.1:\
\

\f1\i0\b0 Fixed a bug where we were not always removing the notification observer, which led to needlessly high CPU usage.\
\

\f2\i\b Version 1.2:
\f1\i0\b0 \
\
Fixed a bug where we forgot to release the TaskWrapper object in some cases, leading to a leak (and other strange behavior in some cases).\
\

\f2\i\b Version 1.3:
\f1\i0\b0 \
\
Removed an always-true superfluous branch check in TaskWrapper's -getData: method ("if (task)")}