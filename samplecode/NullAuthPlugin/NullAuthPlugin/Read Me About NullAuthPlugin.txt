Read Me About NullAuthPlugin
============================
1.1

NullAuthPlugin is a sample authorization plugin that just dumps out the authorization context in which it's run.  You can use it as a template for writing a new authorization plugin, or you can use it as a tool to debug the authorization process.

NullAuthPlugin requires Mac OS X 10.4 or later.

Packing List
------------
The sample contains the following items:

o Read Me About NullAuthPlugin.txt -- This file.
o NullAuthPlugin.xcodeproj -- An Xcode 2.4.1 project for the plugin.
o build -- Contains a prebuilt binary.
o NullAuthPlugin.c -- C source code for the plugin.
o Info.plist -- A property list file for the plugin.

Using the Sample
----------------
WARNING: The authorization process is fundamental to the operation of the computer.  If you make a mistake during development or installation of an authorization plugin, it's likely that you will not be able to log in in order to fix it.  I recommend that you install the plugin on a development machine with a second bootable partition.

To install the plugin, first copy it to the "SecurityAgentPlugins" folder.  The exact approach depends on your system version.  In Mac OS X 10.5 and later, you should use:

$ sudo cp -R Desktop/NullAuthPlugin/build/Debug/NullAuthPlugin.bundle /Library/Security/SecurityAgentPlugins/
$ sudo chown -R root:wheel /Library/Security/SecurityAgentPlugins/NullAuthPlugin.bundle

Earlier systems do not support authorization plug-ins within the /Library hierarchy <rdar://problem/4883523>, so you have to copy NullAuthPlugin into the /System hierarchy instead.  Here's what to do:

$ sudo cp -R Desktop/NullAuthPlugin/build/Debug/NullAuthPlugin.bundle /System/Library/CoreServices/SecurityAgentPlugins/

Now edit the "system.login.console" rule in "/etc/authorization" to invoke the plugin.  You want to add the plug-in to the appropriate place in the "mechanisms" array.  The default "mechanisms" array (on 10.4.x) looks like this.

    <key>mechanisms</key>
    <array>
        <string>builtin:auto-login,privileged</string>
        <string>loginwindow_builtin:login</string>
        <string>builtin:reset-password,privileged</string>
        <string>authinternal</string>
        <string>builtin:getuserinfo,privileged</string>
        <string>builtin:sso,privileged</string>
        <string>HomeDirMechanism:login,privileged</string>
        <string>HomeDirMechanism:status</string>
        <string>MCXMechanism:login</string>
        <string>loginwindow_builtin:success</string>
        <string>loginwindow_builtin:done</string>
    </array>

Use your favourite text editor to invoke the plugin from this array.  For example, to investigate how the "builtin:getuserinfo" mechanism affects the authorization context, add entries that invoke the "NullAuthPlugin" before and after "builtin:getuserinfo".  The resulting "mechanisms" array would look like this.

    <key>mechanisms</key>
    <array>
        <string>builtin:auto-login,privileged</string>
        <string>loginwindow_builtin:login</string>
        <string>builtin:reset-password,privileged</string>
        <string>authinternal</string>
<string>NullAuthPlugin:before</string>
        <string>builtin:getuserinfo,privileged</string>
<string>NullAuthPlugin:after</string>
        <string>builtin:sso,privileged</string>
        <string>HomeDirMechanism:login,privileged</string>
        <string>HomeDirMechanism:status</string>
        <string>MCXMechanism:login</string>
        <string>loginwindow_builtin:success</string>
        <string>loginwindow_builtin:done</string>
    </array>

In each string (I've outdented them to make them obvious), the item before the colon is the plugin name ("NullAuthPlugin") and the item after the colon is the mechanism name.  "NullAuthPlugin" ignores the mechanism name, so you can use it as a comment.

The plugin logs its output to the system log.  In order to see this, you'll have to reconfigure the system log to show debugging messages.  You do this by opening "/etc/syslog.conf" and changing "kern.debug" to "*.debug"; then notify the system of the reconfiguration with the following command.

$ sudo kill -HUP `cat /var/run/syslog.pid`

Finally, to test the plugin, log out and then log back in.  Upon logging back in, launch the Console application and look at the system log ("/var/log/system.log").  You'll see something like the following.

Note: I've extensively processed these listings to make them easier to read in this context.  Specifically:

o I've remove all log lines not relevant to this discussion.
o I've removed the standard syslog prefix (date/time, host name, process name/ID).
o I've added line numbers.
o I've elided text to make the limit the line length.

 1 NullAuth:AuthorizationPluginCreate: callbacks=0x45020
 2 NullAuth:AuthorizationPluginCreate: err=0, *outPlugin=0x3e76f0, [...]
 3 NullAuth:MechanismCreate: [...] mechanismId='before'
 4 NullAuth:MechanismCreate: err=0, *outMechanism=0x37cdc0
 5 NullAuth:MechanismInvoke: inMechanism=0x37cdc0
 6 NullAuth:PrintAuthState: pid=256, euid=92, ruid=92
 7 NullAuth:PrintAuthState: GetSessionId err=0, sessionID=0x0
 8 NullAuth:PrintAuthState: GetArguments err=-60008
 9 GetContextValue key='uid', value=501
10 GetContextValue key='gid', value=501
11 GetContextValue key='home', value='/Users/quinn'
12 GetContextValue key='longname', value='Quinn'
13 GetContextValue key='username', value='quinn'
14 GetContextValue key='password', value='********'
15 GetContextValue key='shell', value='/bin/bash'
16 GetHintValue key='authorize-right', value='system.login.console'
17 GetHintValue key='authorize-rule', value='system.login.console'
18 GetHintValue key='client-path', value='/System/Library/CoreServi[...]
19 GetHintValue key='client-pid', value=248
20 GetHintValue key='client-type', value='BNDL'
21 GetHintValue key='client-uid', value=0
22 GetHintValue key='creator-pid', value=248
23 GetHintValue key='tries', value=0
24 GetContextValue key='dsAttrTypeStandard:AuthenticationAuthority'[...]
25 NullAuth:MechanismInvoke: err=0

26 NullAuth:MechanismCreate: [...] mechanismId='after'
27 NullAuth:MechanismCreate: err=0, *outMechanism=0x339360
28 NullAuth:MechanismInvoke: inMechanism=0x339360
29 NullAuth:PrintAuthState: pid=256, euid=92, ruid=92
30 NullAuth:PrintAuthState: GetSessionId err=0, sessionID=0x0
31 NullAuth:PrintAuthState: GetArguments err=-60008
32 GetContextValue key='uid', value=501
33 GetContextValue key='gid', value=501
34 GetContextValue key='home', value='/Users/quinn'
35 GetContextValue key='longname', value='Quinn'
36 GetContextValue key='username', value='quinn'
37 GetContextValue key='password', value='********'
38 GetContextValue key='shell', value='/bin/bash'
39 GetHintValue key='authorize-right', value='system.login.console'
40 GetHintValue key='authorize-rule', value='system.login.console'
41 GetHintValue key='client-path', value='/System/Library/CoreServi[...]
42 GetHintValue key='client-pid', value=248
43 GetHintValue key='client-type', value='BNDL'
44 GetHintValue key='client-uid', value=0
45 GetHintValue key='creator-pid', value=248
46 GetHintValue key='tries', value=0
47 GetContextValue key='dsAttrTypeStandard:AuthenticationHint' valu[...]
48 GetContextValue key='dsAttrTypeStandard:RealName', value='Quinn'
49 GetContextValue key='dsAttrTypeStandard:GeneratedUID', value='75[...]
50 GetContextValue key='dsAttrTypeStandard:NFSHomeDirectory', value[...]
51 GetContextValue key='dsAttrTypeStandard:Password', value='******[...]
52 GetContextValue key='dsAttrTypeStandard:Picture' value=2f 4c 69 [...]
53 GetContextValue key='dsAttrTypeStandard:PrimaryGroupID', value='[...]
54 GetContextValue key='dsAttrTypeStandard:UniqueID', value='501'
55 GetContextValue key='dsAttrTypeStandard:UserShell', value='/bin/[...]
56 GetContextValue key='dsAttrTypeStandard:AuthenticationAuthority'[...]
57 NullAuth:MechanismInvoke: err=0
58 NullAuth:MechanismDestroy: inMechanism=0x37cdc0
59 NullAuth:MechanismDestroy: inMechanism=0x339360

The first group of entries (lines 1 through 25) is the "before" case, as denoted by the mechanismID in line 3.  The second group of entries is the "after" case.  If you compare the GetContextValue/GetHintValue output of the two cases, you'll see that the intervening mechanism ("builtin:getuserinfo") has added numerous entries to the the authorization context (all of the entries whose keys start with "dsAttrTypeStandard").

Building the Sample
-------------------
The sample was built using Xcode 2.4.1 on Mac OS X 10.4.10.  You should be able to just open the project and choose Build from the Build menu.  This will build "NullAuthPlugin.bundle" in the "build" directory.

How it Works
------------
The authorization plugin architecture is documented on the developer web site.

<http://developer.apple.com/documentation/Security/Reference/AuthorizationPluginRef/index.html>

NullAuthPlugin is a trivial example of an authorization plugin.  It dumps out the authorization context to the system log and then returns kAuthorizationResultAllow as the authorization result, which means that authorization automatically proceeds to the next authorization plugin.

Caveats
-------
There is no way to iterate through the list of keys in the authorization context.  Thus, my code that prints the context (PrintAuthState) has a hard-coded list of keys that I know about.  This list is not authoritative; you should feel free to add or remove entries based on your requirements.

IMPORTANT: Many of the keys included in the kStateKeys array are not considered to be part of the defined API; see the comments in the code near the definition of the kStateKeys array for details.

By default NullAuthPlugin will not log your password in plain text to the system log (-:  If you need to log the password, change the definition of kIDontCareIfMyPasswordIsLogged to 1 (in PrintTypedData in "NullAuthPlugin.c") and rebuild.

Credits and Version History
---------------------------
If you find any problems with this sample, mail <dts@apple.com> and I'll try to fix them up.

1.0 (Oct 2005) was the first shipping version.

1.1 (Aug 2007) is a relatively small update to add some useful features:

- It now prints the parent process ID and the results of SessionGetInfo.

- We now support a kPlist key type, as well as the kPlistOrString.

- If you use a mechanism name of "WaitForDebugger", NullAuthPlugin will log a simple message and then wait for you to attach with GDB.

Share and Enjoy.

Apple Developer Technical Support
Networking, Communications, Hardware

25 Oct 2007
