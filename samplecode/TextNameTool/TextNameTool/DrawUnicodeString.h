/*    File: DrawUnicodeString.h        Description:        Routines for drawing unicode strings using ATSUI.      Copyright:        Copyright (c) 2003 Apple Computer, Inc. All rights reserved.        Disclaimer:        IMPORTANT:  This Apple software is supplied to you by Apple Computer, Inc.        ("Apple") in consideration of your agreement to the following terms, and your        use, installation, modification or redistribution of this Apple software        constitutes acceptance of these terms.  If you do not agree with these terms,        please do not use, install, modify or redistribute this Apple software.        In consideration of your agreement to abide by the following terms, and subject        to these terms, Apple grants you a personal, non-exclusive license, under Apple’s        copyrights in this original Apple software (the "Apple Software"), to use,        reproduce, modify and redistribute the Apple Software, with or without        modifications, in source and/or binary forms; provided that if you redistribute        the Apple Software in its entirety and without modifications, you must retain        this notice and the following text and disclaimers in all such redistributions of        the Apple Software.  Neither the name, trademarks, service marks or logos of        Apple Computer, Inc. may be used to endorse or promote products derived from the        Apple Software without specific prior written permission from Apple.  Except as        expressly stated in this notice, no other rights or licenses, express or implied,        are granted by Apple herein, including but not limited to any patent rights that        may be infringed by your derivative works or by other works in which the Apple        Software may be incorporated.        The Apple Software is provided by Apple on an "AS IS" basis.  APPLE MAKES NO        WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED        WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A PARTICULAR        PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND OPERATION ALONE OR IN        COMBINATION WITH YOUR PRODUCTS.        IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL OR        CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE        GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)        ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, MODIFICATION AND/OR DISTRIBUTION        OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY OF CONTRACT, TORT        (INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN        ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    Change History (most recent first):        Wed, Feb 16, 2001 -- created        Wed, Apr 02, 2001 -- added unicode only routines        Wed, Aug 27, 2003 -- morphed to work in TextNameTool sample*/#ifndef __DRAWUNICODESTRING__#define __DRAWUNICODESTRING__#include <CoreServices/CoreServices.h>#include <ApplicationServices/ApplicationServices.h>#ifdef __cplusplusextern "C" {#endiftypedef struct {	ATSUFontID theFontID;	char* name;} FontNameIDRec, *FontNameIDVector;OSStatus GetInstalledFontList(			FontNameIDVector *fontList,	/* place to return pointer to list */			long *listLength);			/* place to return length of list */OSStatus GetNamedFontID(			char* fontName,				/* the font name */			ATSUFontID *theFontID);		/* place to return the ID */	/* MakeSimpleATSUIStyle creates a simple ATSUI style record that	can be used in calls to the RenderUnicodeString and MeasureUnicodeString	routine. The ATSUI style record will be constructed using the indicated font,	size, style and colour.  */ OSStatus MakeSimpleATSUIStyle(			ATSUFontID theFontID,		/* font ID */			short fontSize,				/* font size */			short qdStyle,				/* type style */			RGBColor *fontColor,		/* color to use */			ATSUStyle *theStyle);		/* the new style */	/* RenderUnicodeString renders a CFString at (h, v) in the current grafport	using ATSUI using the style specified in the atsui style record.  If maxwidth	is non-zero, then the text will be wordwrapped in such a way that it will	not exceed the width when drawn.  */OSStatus RenderUnicodeString(			ConstUniCharArrayPtr iText,	/* text to draw */			UniCharCount iTextLength,	/* number of characters */			ATSUStyle theStyle,			/* the style */			short h,					/* horizontal position to draw at */			short v,					/* vertical position to draw at */			CGContextRef theContext);	/* cg context, can be NULL */	/* MeasureUnicodeString returns a rectangle where the CFStringRef would	be drawn if it were drawn at location (0,0) -- just like QDTextBounds. if	maxwidth is non-zero, then the text will be wordwrapped in such a way	that it will not exceed the width when drawn.  */OSStatus MeasureUnicodeString(			ConstUniCharArrayPtr iText,	/* text to draw */			UniCharCount iTextLength,	/* number of characters */			ATSUStyle theStyle,			/* the style */			Rect *textbounds,			/* text boundary */			Rect *imagebounds);			/* text's image boundary */#ifdef __cplusplus}#endif#endif/* Tips for optimal performance:(A)	If at all possible, do not call the routine MakeThemeATSUIStyle or the routine	MakeSimpleATSUIStyle more than once to create the styles your application	requires.  cache the style records created among your application's globals	and use them whenever you need to draw text.(B)	Set maxwidth to zero if you know all your text should reside on one	line.		The routines RenderUnicodeString, MeasureUnicodeString, RenderCFString, 	and MeasureCFString include a maxwidth parameter.  If you look at the source	you will notice that when this parameter is non-zero, a separate code path	is used that attempts to calculate line breaks at the indicated width.  This	takes extra time to do.  If you know there are no line breaks, don't ask	for them to be calculated. */