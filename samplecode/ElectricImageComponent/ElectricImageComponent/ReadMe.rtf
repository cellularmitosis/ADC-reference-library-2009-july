{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf100
\readonlydoc1{\fonttbl\f0\fnil\fcharset77 Verdana;\f1\fnil\fcharset77 Verdana-Bold;\f2\fnil\fcharset77 Verdana-Italic;
\f3\fswiss\fcharset77 Arial-BoldMT;}
{\colortbl;\red255\green255\blue255;}
\vieww10680\viewh6920\viewkind0
\deftab720
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural

\f0\fs36 \cf0 Electric Image Components Sample\

\fs8 \

\fs24 Version 1.3\
July 4 2005
\fs20 \
\

\f1\b\fs24 Sample Components
\fs20 \

\f0\b0 \
Graphics Importer Component\
Graphics Exporter Component\
Movie Importer	Component\
Movie Exporter Component\
Image Decompressor Codec\
\

\f1\b\fs24 Description
\f0\b0\fs20 \
\
This sample demonstrates how to build five QuickTime Component which all work together to allow QuickTime to use Electric Image format image files.\
\
The sample sources show how to build a Graphics Importer, Graphics Exporter, Movie Importer, Movie Exporter and an Image Decompressor.\
\
Sample Electric Image files can be found in the ElectricImages folder.\
\
The sample builds on two platforms:\
\
Mac OS X:\
\
Only the following component targets are currently supported:\
    Xcode 2.1 only:\
	Macintosh OS X Mach-O Import Example Universal Binary PPC / Intel\
	Macintosh OS X Mach-O Component Bundles Universal Binary PPC / Intel\
\
For Xcode 2.1 there is a single project containing 2 targets. One which build a Universal Binary Component Bundle and a another that builds a linked Universal Binary Import test application. The component should be placed in the /Library/QuickTime/ directory. Note: The term "Linked" designates the component code is build into the application. \
\
For CodeWarrior users there is a CodeWarrior 9.5 project containing targets which build both a Carbon Mach-O stand alone component and a linked test Importer application. Note: The term "Linked" designates the component code is build into the application. \
\
IMPORTANT NOTE:\
\
Many of the targets in CodeWarrior project are included for completeness and should not directly be used for development. These targets include configurations for CFM and even 68k but will no longer build and are not supported. Their presence is for historical reference so developers can see what configuration changes may be required to make to their older components build for Carbon Mach-O.\
\
The Carbon Mach-O component will only work on Mac OS X PPC (CodeWarrior has no facility to build a Universal Binary) and should be placed in the /Library/QuickTime/ directory.\
\
ImportExample.app is the test application bundle for Mac OS X PPC only.\
\
Windows:\
\
There is a single Visual Studio.NET 2003 (VC++ 7) and a single VC++ 6 project containing one Target which builds a stand alone component. On Windows NT / 2000 / XP etc. the ElectricImageWindows.qtx component should be placed in the C:\\Windows\\System32\\QuickTime directory. For Windows 95 & Windows 98, the component should be placed in the C:\\Windows\\System\\QuickTime directory.\
\
These sources and targets show how to build the five types of sample components and can act as frameworks for your own components.\
\
QuickTime 7, the QuickTime 6 or 7 Windows SDK are required for this sample.\
\
Enjoy!\
QuickTime DTS\
\

\f1\b\fs24 Contents
\fs20 \
\
Macintosh Targets:\
\

\f0\b0      
\f1\b Xcode 2.1 - EIComponentSample.xcodeproj\
\

\f2\i\b0 ImportExample (Universal)
\f0\i0  - This target will build a linked Universal Binary Graphics Import test application which includes three components facilitating Graphics Import and viewing of EI files.\
\

\f2\i EI Component Bundle (Universal)
\f0\i0  - This target will build a single universal binary component bundle called 'ElectricImage(Universal).component ' containing all five components for Mac OS X PPC / IA32
\f1\b \
\

\f2\i\b0 BuildAll
\f0\i0  - Builds all of the above
\f1\b \
\
     Metrowerks CodeWarrior - EIComponentSample.mcp\
\

\f2\i\b0 Build All Mach-O PPC (CURRENT) 
\f0\i0 - This target builds both Mach-O targets.\

\f2\i \
ImportExampleCarbonMach-O
\f0\i0  - Linked sample Application which includes the three components needed for import and builds a Mach-O application bundle (.app), Mac OS X PPC.\
\

\f2\i EI Component Mach-O
\f0\i0  - Target will build a single Mach-O component bundle called 'ElectricImageCW.component' containing all five components, suitable for installing on Mac OS X PPC only.\
\
The following targets are not supported:
\f2\i \
\
ImportExampleCarbon
\f0\i0  - Linked sample Application which includes the three components needed for import and is linked against CarbonLib (Mac OS, Mac OS X)\
\

\f2\i ImportExamplePPC
\f0\i0  - Linked sample Application which includes the three components needed for import and is linked against InterfaceLib, QuickTimeLib etc. (Mac OS)\
\

\f2\i EI Component PPC
\f0\i0  - Merge Target will build a single component file called 'ElectricImagePPC' containing all five StandAlone components below suitable for installing on Mac OS.\
\

\f2\i GraphicsImportPPC
\f0\i0  - StandAlone PPC Graphics Import Component for Mac OS\

\f2\i GraphicsExportPPC
\f0\i0  - StandAlone PPC Graphics Export Component for Mac OS\

\f2\i MovieImportPPC
\f0\i0  - StandAlone PPC Movie Import Component for Mac OS\

\f2\i MovieExportPPC
\f0\i0  - StandAlone PPC Movie Export Component for Mac OS\

\f2\i ImageDecompressorPPC
\f0\i0  - StandAlone PPC Image Decompressor Component for Mac OS\
\

\f1\b Windows Targets:\
\

\f2\i\b0 ElectricImageWindows
\f0\i0  - Target will build a single component file called 'ElectricImageWindows.qtx' containing all five components.\

\f1\b \

\fs24 Building this sample on Mac OS X
\f0\b0\fs20 \
\
This sample can be built using Xcode 2.1 or Metrowerks CodeWarrior 9.5. The EIComponentSample.mcp project file is fully configured with references to the source files, header files, and libraries necessary to build the sample. The XCode project file is called EIComponentSample.xcodeproj and is located in the EIComponentSampleXcode folder.\
\
All components for Mac OS were built using Xcode 2.1 the 10.4.0u (Universal SDK) and QuickTime 7.0.1.\
\
If you don't have an ADC account there's no better time than now to join up - http://developer.apple.com/membership/\
\

\f1\b\fs24 Building this sample on Windows
\f0\b0\fs20 \
\

\f1\b Visual Studio.NET 
\f3 2003 
\f1 - VC++ 7\

\f0\b0 \
This sample can be built using Microsoft Visual C++ 7 or later. The Project is called EIComponentSample.vproj\
\
You will need to install the QuickTime 6 or later Windows SDK (called QTDevWin) and set up access paths to directories where VC++ can find the QuickTime includes, resource includes, libraries and build tools. This can be done from the VC++ 'Tools->Options...' menu. Select 'Projects->VC++ Directories' then add the correct path(s) for each. The 'QTDevWin' folder should be placed in the ..\\Microsoft Visual Studio .NET\\Vc7\\ directory.\
\
This project has been set up assuming the following paths have been added to VC++:\
\
Executable File path added:\
      $(VCInstallDir)QTDevWin\\Tools\
\
Include File paths added:\
      $(VCInstallDir)QTDevWin\\CIncludes\\\
      $(VCInstallDir)QTDevWin\\ComponentIncludes\\\
      $(VCInstallDir)QTDevWin\\RIncludes\
\
Library File path added:\
      $(VCInstallDir)QTDevWin\\Libraries\\\
\
There are two Build Events associated with the target to take care of creating the Mac-Syle Resources and then copying them into the built .dll. You shouldn't need to change anything for this step to work, it is mentioned here for completeness.\
\

\f1\b Visual C++ 6
\f0\b0 \
\
This sample can be also be built using Microsoft Visual C++ 6.0. The Workspace is called EIComponentSample.dsw.\
\
You will need to install the QuickTime 6 or later Windows SDK (called QTDevWin) and set up access paths to directories where VC++ can find the QuickTime includes, resource includes, libraries and build tools. This can be done from the VC++ 'Tools->Options...' menu. Select the 'Directories' tab then add the correct paths for each. The 'QTDevWin' folder should be located in the ..\\Microsoft Visual Studio\\VC98\\ directory.\
\
This project has been set up assuming the following paths have been added to VC++:\
\
Executable File path added:\
     ..\\Microsoft Visual Studio\\VC98\\QTDevWin\\Tools\\\
\
Include File paths added:\
     ..\\Microsoft Visual Studio\\VC98\\QTDevWin\\CIncludes\\\
     ..\\Microsoft Visual Studio\\VC98\\QTDevWin\\ComponentIncludes\\\
     ..\\Microsoft Visual Studio\\VC98\\QTDevWin\\RIncludes\
\
Library File path added:\
     ..\\Microsoft Visual Studio\\VC98\\QTDevWin\\Libraries\\
\f1\b \

\f0\b0 \
The EIComponentWindows.r file has a custom build action associated with it which compiles each components resource files together using Rez. You may need to change the access path to the RIncludes directory for this stage of the build process so the Rez tool can find what it needs.\
\
Currently the path is hard coded (because Rez if very touchy about such things).\
\
Rez.exe -rd -i "C:\\Program Files\\Microsoft Visual Studio\\VC98\\QTDevWin\\RIncludes" -i .\\EI_GraphicsImport -i .\\EI_GraphicsExport -i .\\EI_MovieImport -i .\\EI_MovieExport -i .\\EI_ImageDecompressor -o "$(TargetDir)\\$(TargetName).qtr" <  "$(InputPath)"\
\
There is also a custom Post-build step associated with the target which takes the compiled resources (the .qtr file) and embeds them using the RezWack tool into the dll. You shouldn't need to change anything for this step to work, it is mentioned here for completeness.\
\
RezWack -f -d "$(OutDir)\\$(TargetName).qtx" -r "$(OutDir)\\$(TargetName).qtr" -o "$(ProjDir)\\$(TargetName).qtx"\
\
\pard\pardeftab720\ql\qnatural
\cf0 For a summary of the commands these tools can accept, please see RezDocs.txt.\
}