/*	File:		MoreDialogs.cp	Contains:		Written by:	Pete Gontier	Copyright:	Copyright (c) 1998 Apple Computer, Inc., All Rights Reserved.				You may incorporate this Apple sample source code into your program(s) without				restriction. This Apple sample source code has been provided "AS IS" and the				responsibility for its operation is yours. You are not permitted to redistribute				this Apple sample source code as "Apple sample source code" after having made				changes. If you're going to re-distribute the source, we require that you make				it clear in the source that the code was descended from Apple sample source				code, but that you've made changes.	Change History (most recent first):         <8>    22/12/00    Quinn   Eliminate superfluous include of "MoreToolbox.h".         <7>    22/12/00    Quinn   Added a whole bunch of new APIs.         <6>     20/3/00    Quinn   Make SetDialogItemString work regardless of whether the dialog                                    is using embedding or not.         <5>      1/3/00    Quinn   SystemClick is no longer part of, or necessary in, Carbon.         <4>     1/22/99    PCG     TARGET_CARBON         <3>      1/7/99    PCG     add ToggleDialogCheckBox and MoreAppendDialogItemList         <2>    11/11/98    PCG     fix header         <1>    11/10/98    PCG     first big re-org at behest of Quinn	Old Change History (most recent first):         <2>     7/24/98    PCG	    eliminate dependency on 'qd'         <1>     6/16/98    PCG     initial checkin*/#include <ControlDefinitions.h>#include <Sound.h>#include <Script.h>#include "MoreAppearance.h"#include "MoreDialogs.h"#include "MoreInterfaceLib.h"pascal DialogRef MoreGetNewDialog (SInt16 dlogResID){	return GetNewDialog (dlogResID, nil, kFirstWindowOfClass);}pascal OSErr MoreAppendDialogItemList (DialogRef dialog, SInt16 ditlID, DITLMethod method){	//	//	Under Mac OS 8.5 and 8.5.1, AppendDialogItemList returns garbage when called	//	from 68K code (through the address in the trap table). We attempt to detect	//	the context in which this is a problem and work around it by doing our own	//	feeble but not grossly incorrect error checking. One thing to be aware of	//	is that this function does not allow you to append 0-item dialog item lists	//	on systems which have the bug. If you have a better idea for how to do a	//	modicum of error checking without a significant increase in complexity,	//	let us know.	//	#if !TARGET_CPU_68K		return AppendDialogItemList (dialog,ditlID,method);	#else		Boolean appendDialogItemListReturnsGarbage = (GetSystemVersion ( ) & 0xFFFFFFF0) == 0x00000850;		if (!appendDialogItemListReturnsGarbage)			return AppendDialogItemList (dialog,ditlID,method);		DialogItemIndex		itemCountBefore		= CountDITL (dialog);		OSErr				err					= AppendDialogItemList (dialog,ditlID,method);		if (err)		{			DialogItemIndex itemCountAfter = CountDITL (dialog);			err = (itemCountBefore < itemCountAfter) ? noErr : paramErr;		}		return err;	#endif}pascal void SaferShortenDITL (DialogRef dialog, DialogItemIndex index){	while (index--) ShortenDITL (dialog, 1);}pascal void SelectAllDialogItemText (DialogRef dialog, DialogItemIndex index){	SelectDialogItemText (dialog,index,0,32767);}pascal void MoveableModalDialog (ModalFilterUPP mfp, DialogItemIndex *itemHit){	//	//	I just made this logic up.	//	In a perfect world, I would steal the implementation	//	of the real ModalDialog and tweak it a little bit.	//	Consider it a to-do item.	//	EventRecord		event;	DialogRef		pop, dummy;	WindowRef		whichWindow;	short			partCode;	Boolean			handledIt = false;	pop = GetDialogFromWindow (FrontWindow( ));	*itemHit = kDialogItemIndexNone;	do	{		WaitNextEvent (everyEvent & ~highLevelEventMask, &event, GetCaretTime( ), nil);		switch (event.what)		{			case mouseDown:				partCode = FindWindow (event.where, &whichWindow);				if (whichWindow != GetDialogWindow (pop))				{					#if TARGET_API_MAC_CARBON						SysBeep(10);					#else						if (partCode == inSysWindow)							SystemClick (&event,whichWindow);						else							SysBeep(10);					#endif										break;				}				if (inDrag == partCode)				{					Rect dragBounds;					dragBounds = (**GetMainDevice ( )).gdRect;					InsetRect (&dragBounds, 4, 4);					DragWindow (GetDialogWindow (pop), event.where, &dragBounds);					break;				}				// fall thru			default:				if (mfp)					handledIt = CallModalFilterProc (mfp,pop,&event,itemHit);				if (!handledIt && IsDialogEvent(&event))					DialogSelect(&event,&dummy,itemHit);				break;		}	}	while (*itemHit == kDialogItemIndexNone);}#if MORE_DEBUG	#define DialogItemAssert(dlg, item) MoreAssertQ(((dlg) != nil) && ((item) >= 1) && (item) <= CountDITL(dlg));#else	#define DialogItemAssert(dlg, item)#endifextern pascal ControlRef GetDialogControlRef(DialogRef dlg, DialogItemIndex item){	ControlRef control;		DialogItemAssert(dlg, item);		if ( HaveAppearance() && (GetDialogItemAsControl(dlg, item, &control) == noErr) && (control != nil) ) {		// do nothing, control is set up by call to GetDialogItemAsControl	} else {		control = (ControlRef) GetDialogItemHandle(dlg, item);	}	return control;}extern pascal Handle GetDialogItemHandle(DialogRef dlg, DialogItemIndex item){	DialogItemType 	junkKind;	Handle 			itemH;	Rect 			junkRect;	DialogItemAssert(dlg, item);	GetDialogItem(dlg, item, &junkKind, &itemH, &junkRect);	return itemH;}extern pascal void SetDialogItemHandle(DialogRef dlg, DialogItemIndex item, Handle itemH){	DialogItemType 	itemKind;	Handle 			junkItemH;	Rect 			itemRect;	DialogItemAssert(dlg, item);	GetDialogItem(dlg, item, &itemKind, &junkItemH, &itemRect);	SetDialogItem(dlg, item, itemKind,       itemH, &itemRect);}extern pascal void SetDialogItemUserItemProc (DialogRef dlg, DialogItemIndex item, UserItemUPP userItemUPP){	SetDialogItemHandle(dlg, item, (Handle) userItemUPP);}extern pascal void GetDialogItemKind(DialogRef dlg, DialogItemIndex item, DialogItemType *kind){	Rect 			junkRect;	Handle 			junkItemH;	DialogItemAssert(dlg, item);	MoreAssertQ(kind != nil);	GetDialogItem(dlg, item, kind, &junkItemH, &junkRect);}extern pascal void SetDialogItemKind(DialogRef dlg, DialogItemIndex item, DialogItemType kind){	DialogItemType 	junkKind;	Handle 			itemH;	Rect			itemRect;	DialogItemAssert(dlg, item);	GetDialogItem(dlg, item, &junkKind, &itemH, &itemRect);	SetDialogItem(dlg, item, kind,       itemH, &itemRect);}extern pascal void GetDialogItemRect(DialogRef dlg, DialogItemIndex item, Rect *itemRect){	DialogItemType 	junkKind;	Handle 			junkItemH;	DialogItemAssert(dlg, item);	MoreAssertQ(itemRect != nil);	GetDialogItem(dlg, item, &junkKind, &junkItemH, itemRect);}extern pascal void SetDialogItemRect(DialogRef dlg, DialogItemIndex item, const Rect *itemRect){	DialogItemType 	itemKind;	Handle 			itemH;	Rect 			tmpItemRect;	DialogItemAssert(dlg, item);	MoreAssertQ(itemRect != nil);	GetDialogItem(dlg, item, &itemKind, &itemH, &tmpItemRect);	tmpItemRect = *itemRect;	SetDialogItem(dlg, item,  itemKind,  itemH, &tmpItemRect);}pascal void GetDialogItemString (DialogRef dialog, DialogItemIndex index, Str255 str){	if (MoreAssert (dialog && index && str))	{		GetDialogItemText(GetDialogItemHandle(dialog, index), str);	}}pascal void SetDialogItemString (DialogRef dialog, DialogItemIndex index, ConstStringPtr str){	Handle     iHandle;	ControlRef control;	if (MoreAssert (dialog && index)) {		if (str == nil) {			str = "\p";		}				// If the dialog item is using a control rather than the pre-Appearance		// sharing of a TEHandle, we must set the text using the control handle 		// as the item handle.  If you donÕt do this, it mostly works, but weird 		// things happen with the text highlighting in edit text items.		control = GetDialogControlRef(dialog, index);		if (control != nil) {			SetDialogItemText( (Handle) control, str);		} else {			iHandle = GetDialogItemHandle(dialog, index);			SetDialogItemText(iHandle, str);		}	}}// Most of the following routines donÕt need to call DialogItemAssert because // they immediately call GetDialogControlRef, which does the assert.extern pascal SInt16 GetDialogControlValue(DialogRef dlg, DialogItemIndex item){	// DialogItemAssert(dlg, item);	return GetControlValue(GetDialogControlRef(dlg, item));}extern pascal void SetDialogControlValue(DialogRef dlg, DialogItemIndex item, SInt16 value){	// DialogItemAssert(dlg, item);	SetControlValue(GetDialogControlRef(dlg, item), value);}extern pascal SInt16 GetDialogControlMinimum(DialogRef dlg, DialogItemIndex item){	// DialogItemAssert(dlg, item);	return GetControlMinimum(GetDialogControlRef(dlg, item));}extern pascal void SetDialogControlMinimum(DialogRef dlg, DialogItemIndex item, SInt16 min){	// DialogItemAssert(dlg, item);	SetControlMinimum(GetDialogControlRef(dlg, item), min);}extern pascal SInt16 GetDialogControlMaximum(DialogRef dlg, DialogItemIndex item){	// DialogItemAssert(dlg, item);	return GetControlMaximum(GetDialogControlRef(dlg, item));}extern pascal void SetDialogControlMaximum(DialogRef dlg, DialogItemIndex item, SInt16 max){	// DialogItemAssert(dlg, item);	SetControlMaximum(GetDialogControlRef(dlg, item), max);}extern pascal Boolean GetDialogControlBoolean(DialogRef dlg, DialogItemIndex item){	// DialogItemAssert(dlg, item);	return GetControlValue(GetDialogControlRef(dlg, item)) != 0;}extern pascal void SetDialogControlBoolean(DialogRef dlg, DialogItemIndex item, Boolean value){	// DialogItemAssert(dlg, item);	SetControlValue(GetDialogControlRef(dlg, item), value);}extern pascal void ToggleDialogControlBoolean(DialogRef dlg, DialogItemIndex item){	// DialogItemAssert(dlg, item);	SetDialogControlBoolean(dlg, item, ! GetDialogControlBoolean(dlg, item));}pascal Boolean ToggleDialogCheckBox (DialogRef dialog, DialogItemIndex itemIndex){	if (!MoreAssert (itemIndex > 0 && itemIndex <= CountDITL (dialog)))		return false;	short iType; Handle iHandle; Rect iRect;	::GetDialogItem (dialog, itemIndex, &iType, &iHandle, &iRect);	if (!MoreAssert ((iType & ~(kItemDisableBit | kControlDialogItem)) == chkCtrl))		return false;	Boolean result = !::GetControlValue (ControlRef (iHandle));	::SetControlValue (ControlRef (iHandle), result);	return result;}extern pascal Boolean GetDialogControlEnable(DialogRef dlg, DialogItemIndex item){	Boolean 	result;	ControlRef 	controlH;	// DialogItemAssert(dlg, item);	controlH = GetDialogControlRef(dlg, item);		// Beware the wacky syntax!		#if !TARGET_API_MAC_CARBON		if (!HaveAppearance()) {			result = ( (**controlH).contrlHilite != 255 );		} else 	#endif		{			result = IsControlActive(controlH);		}	return result;}extern pascal void SetDialogControlEnable(DialogRef dlg, DialogItemIndex item, Boolean enable){	OSStatus 	junk;	ControlRef 	controlH;			// DialogItemAssert(dlg, item);	controlH = GetDialogControlRef(dlg, item);	// Beware the wacky syntax!	#if !TARGET_API_MAC_CARBON		if (!HaveAppearance()) {			UInt8 newHighlight;						// Only call HiliteControl if weÕre changing the state			// to avoid unsightly flashing.						if (GetDialogControlEnable(dlg, item) != enable) {				newHighlight = (255 * !enable);				if ((**controlH).contrlHilite != newHighlight) {					HiliteControl(controlH, newHighlight);				}			}		} else 	#endif		{			// Appearance controls donÕt flash, so we don't have to call			// GetDialogControlEnable.  Also, we shouldnÕt do it because 			// Appearance controls can be semi-active, ie active but			// IsControlActive returns false because the parent control			// is active, and we donÕt want this to prevent us setting the			// true state.						if (enable) {				junk = ActivateControl(controlH);				MoreAssertQ(junk == noErr);			} else {				junk = DeactivateControl(controlH);				MoreAssertQ(junk == noErr);			}		}}extern pascal void		InvalDialogItem			  (DialogRef dlg, DialogItemIndex item){	OSStatus junk;	Rect itemRect;	GetDialogItemRect(dlg, item, &itemRect);	junk = MoreInvalWindowRect(GetDialogWindow(dlg), &itemRect);	MoreAssertQ(junk == noErr);}extern pascal void		SetupStandardDialogItems  (DialogRef dlg, DialogItemIndex defaultItem, DialogItemIndex cancelItem){	OSStatus junk;		if (defaultItem != 0) {		junk = SetDialogDefaultItem(dlg, defaultItem);		MoreAssertQ(junk == noErr);	}	if (cancelItem != 0) {		junk = SetDialogCancelItem(dlg, cancelItem);		MoreAssertQ(junk == noErr);	}	junk = SetDialogTracksCursor(dlg, true);	MoreAssertQ(junk == noErr);}extern pascal Boolean	OKModalFilter(DialogRef dlg, EventRecord *event, DialogItemIndex *item)	/* 	This is pretty much the standard modal dialog filter function.  It handles		mapping returns and enters to the kStdOkItemIndex button, and also deals with		shift tab.	*/{	Boolean result;	UInt8 typedChar;	result = StdFilterProc(dlg, event, item);	if ( !result && ( (event->what == keyDown) || (event->what == autoKey) )) {		typedChar = event->message & charCodeMask;		if ((typedChar == kTabCharCode) and ((event->modifiers & shiftKey) != 0)) {			if (GetDialogKeyboardFocusItem(dlg) != 0) {				DialogShiftTab(dlg);				result = true;			}		}	}	return result;}extern pascal Boolean	OKCancelModalFilter(DialogRef dlg, EventRecord *event, DialogItemIndex *item)	/* This is the standard modal filter for dialogs with an OK and a Cancel button.		It handles all that OKModalFilter does, and then deals with mapping Escape		and command-dot to kStdCancelItemIndex.	*/{	return OKModalFilter(dlg, event, item);}static pascal Boolean DoButtonKey(DialogRef dlg, DialogItemIndex item,												EventRecord *event, DialogItemIndex *resultItem)	/* This function is used to respond to a keyboard event hitting a dialog		button.  If the button denoted by dlg and item is enabled, the function		flashes the button, sets resultItem to item, and returns true.		Otherwise it beeps and sets event to a null event.	*/{	Boolean result;		if ( GetDialogControlEnable(dlg, item) ) {		*resultItem = item;		FlashDialogControl(dlg, item);		result = true;	} else {		SysBeep(10);		event->what = nullEvent;		result = false;	}	return result;}static pascal Boolean   DiscardButtonFilter(DialogPtr dlg, EventRecord *event, DialogItemIndex *item){	Boolean result;	UInt8 typedChar;	result = false;	if ((event->what == keyDown) || (event->what == autoKey)) {		typedChar = event->message & charCodeMask;		if ((typedChar == 'd') and ((event->modifiers & cmdKey) != 0)) {			result = DoButtonKey(dlg, kStdDiscardItemIndex, event, item);		}	}	return result;}extern pascal Boolean	OKCancelDiscardModalFilter(DialogRef dlg, EventRecord *event, DialogItemIndex *item)	/* This is the standard modal filter for dialogs with an OK, Cancel and Dont Save button.		It handles all that OKCancelModalFilter does, and then deals with mapping 		command-D to ditDontSave.	*/{	Boolean result;		result = OKCancelModalFilter(dlg, event, item);	if (! result) {		result = DiscardButtonFilter(dlg, event, item);	}	return result;}extern pascal Boolean	OKAlertFilter(DialogRef dlg, EventRecord *event, DialogItemIndex *item){	Boolean result;	UInt8 typedChar;	result = OKModalFilter(dlg, event, item);	if (! result && ( (event->what == keyDown) || (event->what == autoKey) )) {		typedChar = event->message & charCodeMask;		if ((typedChar == kReturnCharCode) || (typedChar == kEnterCharCode)) {			result = DoButtonKey(dlg, kStdOkItemIndex, event, item);		}	}	return result;}extern pascal Boolean	OKCancelAlertFilter(DialogRef dlg, EventRecord *event, DialogItemIndex *item){	Boolean result;	UInt8 typedChar;	result = OKAlertFilter(dlg, event, item);	if (! result && ( (event->what == keyDown) || (event->what == autoKey) )) {		typedChar = event->message & charCodeMask;		if ((typedChar == kEscapeCharCode) || IsCmdChar(event, '.')) {			result = DoButtonKey(dlg, kStdCancelItemIndex, event, item);		}	}	return result;}extern pascal Boolean	OKCancelDiscardAlertFilter(DialogRef dlg, EventRecord *event, DialogItemIndex *item){	Boolean result;	result = OKCancelAlertFilter(dlg, event, item);	if (! result) {		result = DiscardButtonFilter(dlg, event, item);	}	return result;}// These are the UPP getters for the filter routines.  They are implemented // as getters rather than global variables because that way we can avoid have // an initialisation routine for this module.static ModalFilterUPP gOKModalFilterUPP = nil;extern pascal ModalFilterUPP GetOKModalFilterUPP(void){	if (gOKModalFilterUPP == nil) {		gOKModalFilterUPP = NewModalFilterUPP(OKModalFilter);	}	return gOKModalFilterUPP;}static ModalFilterUPP gOKCancelModalFilterUPP = nil;extern pascal ModalFilterUPP GetOKCancelModalFilterUPP(void){	if (gOKCancelModalFilterUPP == nil) {		gOKCancelModalFilterUPP = NewModalFilterUPP(OKCancelModalFilter);	}	return gOKCancelModalFilterUPP;}static ModalFilterUPP gOKCancelDiscardModalFilterUPP = nil;extern pascal ModalFilterUPP GetOKCancelDiscardModalFilterUPP(void){	if (gOKCancelDiscardModalFilterUPP == nil) {		gOKCancelDiscardModalFilterUPP = NewModalFilterUPP(OKCancelDiscardModalFilter);	}	return gOKCancelDiscardModalFilterUPP;}static ModalFilterUPP gOKAlertFilterUPP = nil;extern pascal ModalFilterUPP GetOKAlertFilterUPP(void){	if (gOKAlertFilterUPP == nil) {		gOKAlertFilterUPP = NewModalFilterUPP(OKAlertFilter);	}	return gOKAlertFilterUPP;}static ModalFilterUPP gOKCancelAlertFilterUPP = nil;extern pascal ModalFilterUPP GetOKCancelAlertFilterUPP(void){	if (gOKCancelAlertFilterUPP == nil) {		gOKCancelAlertFilterUPP = NewModalFilterUPP(OKCancelAlertFilter);	}	return gOKCancelAlertFilterUPP;}static ModalFilterUPP gOKCancelDiscardAlertFilterUPP = nil;extern pascal ModalFilterUPP GetOKCancelDiscardAlertFilterUPP(void){	if (gOKCancelDiscardAlertFilterUPP == nil) {		gOKCancelDiscardAlertFilterUPP = NewModalFilterUPP(OKCancelDiscardAlertFilter);	}	return gOKCancelDiscardAlertFilterUPP;}// The following helper routines are required by the various filters, // and are exported for your convenience.extern pascal Boolean	DialogItemHidden(DialogRef dlg, DialogItemIndex item)	/* Returns true if the item has been hidden with HideDialogItem. */{	Rect itemRect;	GetDialogItemRect(dlg, item, &itemRect);	return (itemRect.top < 16384) and (itemRect.left < 16384);}extern pascal void FlashDialogControl(DialogRef dlg, DialogItemIndex item){	UInt32 junkLong;	// DialogItemAssert(dlg, item);	HiliteControl(GetDialogControlRef(dlg, item), kControlButtonPart);	Delay(2, &junkLong);	HiliteControl(GetDialogControlRef(dlg, item), 0);}static Boolean IsVisibleEditText(DialogPtr dlg, DialogItemIndex item){	DialogItemType kind;		GetDialogItemKind(dlg, item, &kind);	return ((kind == editText) && DialogItemHidden(dlg, item));}extern pascal void		DialogShiftTab(DialogRef dlg)	/*	Performs a shift tab operation in the dialog, ie moves the text selection		to the edit text item immediately before the current one.				This code doesn't deal well with there being no currently selected		text.  Fortunately this shouldnÕt comes up, because you should always 		select the first text item before bringing up a dialog.  Something to		work on later I guess.	*/{	DialogItemIndex originalItem;	DialogItemIndex itemIndex;	DialogItemIndex itemCount;	originalItem = GetDialogKeyboardFocusItem(dlg);	itemCount = CountDITL(dlg);		/* We only have to do work if there's more than one item in the dialog.		Also bail out of there's no text selected because we don't deal with that case	*/	if ((originalItem > 0) and (itemCount > 1)) {		/* Start at the originalItem and walk backwards looking for			an unhidden text item.  If itemIndex hits 0, wrap around			to the last item. Stop if we get back to the original			item or we find an item.		*/		itemIndex = originalItem;		do {			itemIndex = itemIndex - 1;			if (itemIndex == 0) {				itemIndex = itemCount;			}		} while ( (itemIndex != originalItem) && !IsVisibleEditText(dlg, itemIndex) );		if ((itemIndex != originalItem) && IsVisibleEditText(dlg, itemIndex)) {			SelectDialogItemText(dlg, itemIndex, 0, 32767);		}	}}