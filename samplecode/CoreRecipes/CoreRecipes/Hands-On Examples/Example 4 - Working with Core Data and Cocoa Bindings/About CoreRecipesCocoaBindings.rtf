{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset77 LucidaGrande;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 LucidaGrande-Bold;
\f3\froman\fcharset77 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10640\viewh11560\viewkind0
\pard\tx0\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\li1120\fi-1120\ql\qnatural

\f0\fs24 \cf0 Copyright \'a9 2005 by Apple Computer, Inc.  All Rights Reserved.\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\li1120\fi-400\ri860\ql\qnatural

\f1\fs30 \cf0 \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\li1120\fi-420\ri-720\ql\qnatural

\f2\b\fs48 \cf0 Core Recipes Example 4:\
Core Data and Cocoa Bindings\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\li1120\fi-420\ri-720\ql\qnatural

\f3\b0\fs28 \cf0 \
\pard\tx960\tx1420\tx4320\tx5760\tx6720\tx7680\tx8640\tx9600\li960\ri-460\ql\qnatural

\f0\fs24 \cf0 This project explores the power of using Core Data in combination with Cocoa Bindings in order to quickly create application interfaces.  It illustrates the process of connecting an initial interface to your application's data model with bindings, creating a highly functional prototype to which you can start adding additional features.\
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\li960\fi-20\ri-460\ql\qnatural
\cf0 \
\pard\tx960\tx4320\tx5760\tx6720\tx7680\tx8640\tx9600\li4300\fi-3360\ri-460\ql\qnatural

\f2\b \cf0 Step 1:\
\
\pard\tx1420\tx4320\tx5760\tx6720\tx7680\tx8640\tx9600\li1440\ri-460\ql\qnatural

\f0\b0 \cf0 The first step illustrates how to use Interface Builder to set up a pair of array controllers and a number of bindings to establish a master-detail interface to the data model's Recipe and Ingredient entities.  The use of a value transformer to store an attributed string in a binary data attribute is also shown.\
\pard\tx960\tx4320\tx5760\tx6720\tx7680\tx8640\tx9600\li4300\fi-3360\ri-460\ql\qnatural

\f2\b \cf0 \
Step 2:\
\
\pard\tx1420\tx4320\tx5760\tx6720\tx7680\tx8640\tx9600\li1440\ri-460\ql\qnatural

\f0\b0 \cf0 The second step shows how to connect the standard Cocoa undo interface to Core Data's provided undo behavior.  CoreRecipesController is set as the window's delegate and its -windowWillReturnUndoManager: method is implemented.\
\pard\tx960\tx4320\tx5760\tx6720\tx7680\tx8640\tx9600\li4300\fi-3360\ri-460\ql\qnatural

\f2\b \cf0 \
Step 3:\
\
\pard\tx1420\tx4320\tx5760\tx6720\tx7680\tx8640\tx9600\li1440\ri-460\ql\qnatural

\f0\b0 \cf0 In the final step, the Save menu item is connected to allow users to manually save their recipes any time they want, not just when the application quits.  The Save menu is also bound to a property of the application's managed object context ensuring it is only enabled when there are outstanding changes.  This demonstrates that bindings and target-action connections are complementary, not mutually-exclusive.\
\pard\tx960\tx4320\tx5760\tx6720\tx7680\tx8640\tx9600\li4300\fi-3360\ri-460\ql\qnatural

\f2\b \cf0 \
\pard\tx960\tx1920\tx2880\tx3840\tx4800\tx5760\tx6720\tx7680\tx8640\tx9600\li960\fi-20\ri-460\ql\qnatural

\f0\b0 \cf0 \
You may incorporate sample code from these examples into your applications without restriction, although the sample code has been provided "as is" and the responsibility for its operation is completely yours. However, you should not redistribute the source as "Apple Sample Code" if you make changes to it. If you're going to re-distribute the source, we require that you make it clear in the source that, although the code derived from Apple Sample Code,  you've since made changes to it.\
}