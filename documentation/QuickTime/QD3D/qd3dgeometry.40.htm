<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Creating and Editing Meshes</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=5107"> </A><A NAME="15686"> </A>Creating and Editing Meshes</H1><P CLASS="T1.Text1"><A NAME="pgfId=5112"> </A><A NAME="marker=5108"> </A>QuickDraw&nbsp;3D provides routines that you can use to create and manipulate meshes. See <A HREF="qd3dgeometry.2a.htm#26273" CLASS="XRef">&quot;Meshes&quot;</A> for the definition of a mesh and its associated types.</P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5116"> </A>Q3Mesh_New</H2><P CLASS="T1.Text1"><A NAME="pgfId=5117"> </A><A NAME="marker=3363"> </A>You can use the <TT CLASS="cv">Q3Mesh_New</TT> function to create a new mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=44674"> </A>TQ3GeometryObject Q3Mesh_New (void);<BR></CODE><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5119"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5120"> </A>The <TT CLASS="cv">Q3Mesh_New</TT> function returns, as its function result, a new mesh. The new mesh is empty; you need to call other QuickDraw&nbsp;3D routines to add vertices and faces to the mesh. If a new mesh could not be created, <TT CLASS="cv">Q3Mesh_New</TT> returns the value <TT CLASS="cv">NULL</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5124"> </A>Q3Mesh_VertexNew</H2><P CLASS="T1.Text1"><A NAME="pgfId=5125"> </A><A NAME="marker=3373"> </A>You can use the <TT CLASS="cv">Q3Mesh_VertexNew</TT> function to add a vertex to a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=44678"> </A>TQ3MeshVertex Q3Mesh_VertexNew (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Vertex3D *vertex);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44680"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5127"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44689"> </A><TT CLASS="cv">vertex</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5128"> </A>A three-dimensional vertex.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5129"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5130"> </A>The <TT CLASS="cv">Q3Mesh_VertexNew</TT> function adds the vertex specified by the <TT CLASS="cv">vertex</TT> parameter to the mesh specified by the <TT CLASS="cv">mesh</TT> parameter. The mesh must already exist before you call <TT CLASS="cv">Q3Mesh_VertexNew</TT>. The new mesh vertex is returned as the function result, of type TQ3MeshVertex.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5131"> </A>Q3Mesh_VertexDelete</H2><P CLASS="T1.Text1"><A NAME="pgfId=5132"> </A><A NAME="marker=3382"> </A>You can use the <TT CLASS="cv">Q3Mesh_VertexDelete</TT> function to delete a vertex from a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=44700"> </A>TQ3Status Q3Mesh_VertexDelete (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshVertex vertex);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44702"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5134"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44715"> </A><TT CLASS="cv">vertex</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5135"> </A>A mesh vertex.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5136"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5137"> </A>The <TT CLASS="cv">Q3Mesh_VertexDelete</TT> function deletes the mesh vertex specified by the <TT CLASS="cv">vertex</TT> parameter from the mesh specified by the <TT CLASS="cv">mesh</TT> parameter. All mesh faces that contain the vertex are also deleted.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5138"> </A>Q3Mesh_FaceNew</H2><P CLASS="T1.Text1"><A NAME="pgfId=5139"> </A><A NAME="marker=3391"> </A>You can use the <TT CLASS="cv">Q3Mesh_FaceNew</TT> function to add a face to a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=44726"> </A>TQ3MeshFace Q3Mesh_FaceNew (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long numVertices, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3MeshVertex *vertices, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3AttributeSet attributeSet);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44728"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5141"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44737"> </A><TT CLASS="cv">numVertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5142"> </A>The number of mesh vertices in the <TT CLASS="cv">vertices</TT> array.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44746"> </A><TT CLASS="cv">vertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5143"> </A>A pointer to an array of mesh vertices defining the new mesh face. These vertices can be ordered either clockwise or counterclockwise.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44755"> </A><TT CLASS="cv">attributeSet</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5144"> </A>The desired set of attributes for the new mesh face. Set this parameter to <TT CLASS="cv">NULL</TT> if you do no want any attributes for the new face.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5145"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5146"> </A>The <TT CLASS="cv">Q3Mesh_FaceNew</TT> function adds the face specified by the <TT CLASS="cv">vertices</TT> parameter to the mesh specified by the <TT CLASS="cv">mesh</TT> parameter. The mesh must already exist before you call <TT CLASS="cv">Q3Mesh_FaceNew</TT>. The new mesh face is returned as the function result.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5147"> </A>Q3Mesh_FaceDelete</H2><P CLASS="T1.Text1"><A NAME="pgfId=5148"> </A><A NAME="marker=3402"> </A>You can use the <TT CLASS="cv">Q3Mesh_FaceDelete</TT> function to delete a face from a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=44766"> </A>TQ3Status Q3Mesh_FaceDelete (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshFace face);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44768"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5150"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44777"> </A><TT CLASS="cv">face</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5151"> </A>A mesh face.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5152"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5153"> </A>The <TT CLASS="cv">Q3Mesh_FaceDelete</TT> function deletes the mesh face specified by the <TT CLASS="cv">face</TT> parameter from the mesh specified by the <TT CLASS="cv">mesh</TT> parameter. The vertices of the face are not deleted.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5154"> </A>Q3Mesh_DelayUpdates</H2><P CLASS="T1.Text1"><A NAME="pgfId=5158"> </A><A NAME="marker=3411"> </A>You can use the <TT CLASS="cv">Q3Mesh_DelayUpdates</TT> function to prevent QuickDraw&nbsp;3D from updating its internal list of mesh components.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=44788"> </A>TQ3Status Q3Mesh_DelayUpdates (TQ3GeometryObject mesh);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44790"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5160"> </A>A mesh.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5161"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5165"> </A>The <TT CLASS="cv">Q3Mesh_DelayUpdates</TT> function prevents QuickDraw&nbsp;3D from updating its internal list of components and maintaining correct face orientation (that is, vertex ordering) for the mesh specified by the <TT CLASS="cv">mesh</TT> parameter. Updating the list of components can consume significant amounts of time, and it might be useful temporarily to prevent component list updating. You should later call <TT CLASS="cv">Q3Mesh_ResumeUpdates</TT> to resume component list updating. Generally, if you are creating or deleting a number of vertices or faces from a mesh, it is better to bracket the entire set of changes with calls to <TT CLASS="cv">Q3Mesh_DelayUpdates</TT> and <TT CLASS="cv">Q3Mesh_ResumeUpdates</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5166"> </A>Q3Mesh_ResumeUpdates</H2><P CLASS="T1.Text1"><A NAME="pgfId=5170"> </A><A NAME="marker=3425"> </A>You can use the <TT CLASS="cv">Q3Mesh_ResumeUpdates</TT> function to have QuickDraw&nbsp;3D resume updating its internal list of mesh components.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=44801"> </A>TQ3Status Q3Mesh_ResumeUpdates (TQ3GeometryObject mesh);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44803"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5172"> </A>A mesh.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5173"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5177"> </A>The <TT CLASS="cv">Q3Mesh_ResumeUpdates</TT> function instructs QuickDraw&nbsp;3D to resume updating its internal list of components and maintaining correct face orientation for the mesh specified by the <TT CLASS="cv">mesh</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5178"> </A>Q3Mesh_FaceToContour</H2><P CLASS="T1.Text1"><A NAME="pgfId=5179"> </A><A NAME="marker=3439"> </A>You can use the <TT CLASS="cv">Q3Mesh_FaceToContour</TT> function to convert a face of a mesh into a contour. The contour is then attached to another mesh face as a hole.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=44814"> </A>TQ3MeshContour Q3Mesh_FaceToContour (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshFace containerFace, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshFace face);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44816"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5181"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44825"> </A><TT CLASS="cv">containerFace</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5182"> </A> The mesh face that is to contain the new contour.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44835"> </A><TT CLASS="cv">face</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5183"> </A>The mesh face that is to be converted into a contour. On exit, this face is no longer a valid object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5184"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5185"> </A>The <TT CLASS="cv">Q3Mesh_FaceToContour</TT> function returns, as its function result, a new contour created from the mesh face specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">face</TT> parameters. The new contour is contained in the mesh face specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">containerFace</TT> parameters. If a new contour could not be created, <TT CLASS="cv">Q3Mesh_FaceToContour</TT> returns the value <TT CLASS="cv">NULL</TT>.</P><P CLASS="I.Important"><A NAME="pgfId=5186"> </A><TT CLASS="cv">Q3Mesh_FaceToContour</TT> destroys any attributes associated with the face specified by the <TT CLASS="cv">face</TT> parameter. </P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5190"> </A>Q3Mesh_ContourToFace</H2><P CLASS="T1.Text1"><A NAME="pgfId=5191"> </A><A NAME="marker=3453"> </A>You can use the <TT CLASS="cv">Q3Mesh_ContourToFace</TT> function to convert a mesh contour into a mesh face.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=44846"> </A>TQ3MeshFace Q3Mesh_ContourToFace (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshContour contour);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44848"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5193"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44857"> </A><TT CLASS="cv">contour</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5194"> </A>A mesh contour. On exit, this contour is no longer a valid object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5195"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5196"> </A>The <TT CLASS="cv">Q3Mesh_ContourToFace</TT> function returns, as its function result, a mesh face that is the result of removing the mesh contour specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">contour</TT> parameters from its containing face. (You can call the <TT CLASS="cv">Q3Mesh_GetContourFace</TT> function to determine the face that contains a mesh contour; see <A HREF="qd3dgeometry.40.htm#36613" CLASS="XRef">[link]</A>.) If a new face could not be created, <TT CLASS="cv">Q3Mesh_ContourToFace</TT> returns the value <TT CLASS="cv">NULL</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5200"> </A>Q3Mesh_GetNumComponents</H2><P CLASS="T1.Text1"><A NAME="pgfId=5201"> </A><A NAME="marker=3465"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetNumComponents</TT> function to determine the number of connected components of a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=44868"> </A>TQ3Status Q3Mesh_GetNumComponents (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *numComponents);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44870"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5203"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44879"> </A><TT CLASS="cv">numComponents</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5204"> </A> On exit, the number of connected components in the specified mesh.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5205"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5206"> </A>The <TT CLASS="cv">Q3Mesh_GetNumComponents</TT> function returns, in the <TT CLASS="cv">numComponents</TT> parameter, the number of connected components in the mesh specified by the <TT CLASS="cv">mesh</TT> parameter. A connected component is a list of vertices, each of which is connected to all the others by some sequence of mesh edges. For example, a mesh that contains two cubes has two components.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=12417"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=12418"> </A>The <TT CLASS="cv">Q3Mesh_GetNumComponents</TT> function might not accurately report the number of connected components in a mesh if called while mesh updating is delayed (that is, after a call to <TT CLASS="cv">Q3Mesh_DelayUpdates</TT> but before the matching call to <TT CLASS="cv">Q3Mesh_ResumeUpdates</TT>).</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5207"> </A>Q3Mesh_GetNumEdges</H2><P CLASS="T1.Text1"><A NAME="pgfId=5208"> </A><A NAME="marker=3474"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetNumEdges</TT> function to determine the number of edges of a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=44891"> </A>TQ3Status Q3Mesh_GetNumEdges (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *numEdges);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44893"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5210"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44902"> </A><TT CLASS="cv">numEdges</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5211"> </A>On exit, the number of edges in the specified mesh.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5212"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5213"> </A>The <TT CLASS="cv">Q3Mesh_GetNumEdges</TT> function returns, in the <TT CLASS="cv">numEdges</TT> parameter, the number of edges in the mesh specified by the <TT CLASS="cv">mesh</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5214"> </A>Q3Mesh_GetNumVertices</H2><P CLASS="T1.Text1"><A NAME="pgfId=5215"> </A><A NAME="marker=3483"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetNumVertices</TT> function to determine the number of vertices of a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=44913"> </A>TQ3Status Q3Mesh_GetNumVertices (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *numVertices);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44915"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5217"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44924"> </A><TT CLASS="cv">numVertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5218"> </A>On exit, the number of vertices in the specified mesh.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5219"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5220"> </A>The <TT CLASS="cv">Q3Mesh_GetNumVertices</TT> function returns, in the <TT CLASS="cv">numVertices</TT> parameter, the number of vertices in the mesh specified by the <TT CLASS="cv">mesh</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5221"> </A>Q3Mesh_GetNumFaces</H2><P CLASS="T1.Text1"><A NAME="pgfId=5222"> </A><A NAME="marker=3492"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetNumFaces</TT> function to determine the number of faces of a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=44935"> </A>TQ3Status Q3Mesh_GetNumFaces (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *numFaces);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44937"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5224"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44946"> </A><TT CLASS="cv">numFaces</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5225"> </A>On exit, the number of faces in the specified mesh.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5226"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5227"> </A>The <TT CLASS="cv">Q3Mesh_GetNumFaces</TT> function returns, in the <TT CLASS="cv">numFaces</TT> parameter, the number of faces in the mesh specified by the <TT CLASS="cv">mesh</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5228"> </A>Q3Mesh_GetNumCorners</H2><P CLASS="T1.Text1"><A NAME="pgfId=5229"> </A><A NAME="marker=3501"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetNumCorners</TT> function to determine the number of corners of a mesh that have attribute sets.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=44957"> </A>TQ3Status Q3Mesh_GetNumCorners (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *numCorners);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44959"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5231"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44968"> </A><TT CLASS="cv">numCorners</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5232"> </A>On exit, the number of corners in the specified mesh that have attribute sets.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5233"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5234"> </A>The <TT CLASS="cv">Q3Mesh_GetNumCorners</TT> function returns, in the <TT CLASS="cv">numCorners</TT> parameter, the number of corners in the mesh specified by the <TT CLASS="cv">mesh</TT> parameter that have attribute sets attached to them.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5235"> </A>Q3Mesh_GetOrientable</H2><P CLASS="T1.Text1"><A NAME="pgfId=5236"> </A><A NAME="marker=3510"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetOrientable</TT> function to determine whether the faces of a mesh can be consistently oriented.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=44983"> </A>TQ3Status Q3Mesh_GetOrientable (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean *orientable);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44985"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5238"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=44994"> </A><TT CLASS="cv">orientable</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5239"> </A>On exit, a Boolean value that indicates whether the faces of the specified mesh can be consistently oriented.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5240"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5241"> </A>The <TT CLASS="cv">Q3Mesh_GetOrientable</TT> function returns, in the <TT CLASS="cv">orientable</TT> parameter, the value <TT CLASS="cv">kQ3True</TT> if the faces of the mesh specified by the <TT CLASS="cv">mesh</TT> parameter can be consistently oriented; <TT CLASS="cv">Q3Mesh_GetOrientable</TT> returns <TT CLASS="cv">kQ3False</TT> otherwise. For example, the faces of a tessellated M&ouml;bius strip or a Klein bottle cannot be consistently oriented.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=12394"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=12395"> </A>The <TT CLASS="cv">Q3Mesh_GetOrientable</TT> function might not accurately report the orientation state of a mesh if called while mesh updating is delayed (that is, after a call to <TT CLASS="cv">Q3Mesh_DelayUpdates</TT> but before the matching call to <TT CLASS="cv">Q3Mesh_ResumeUpdates</TT>).</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5242"> </A>Q3Mesh_GetComponentNumVertices</H2><P CLASS="T1.Text1"><A NAME="pgfId=5243"> </A><A NAME="marker=3519"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetComponentNumVertices</TT> function to determine the number of vertices in a component of a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45005"> </A>TQ3Status Q3Mesh_GetComponentNumVertices (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshComponent component, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *numVertices);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45007"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5245"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45016"> </A><TT CLASS="cv">component</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5246"> </A>A mesh component.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45025"> </A><TT CLASS="cv">numVertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5247"> </A>On exit, the number of vertices in the specified mesh component.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5248"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5249"> </A>The <TT CLASS="cv">Q3Mesh_GetComponentNumVertices</TT> function returns, in the <TT CLASS="cv">numVertices</TT> parameter, the number of vertices in the mesh component specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">component</TT> parameters.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=21262"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=21263"> </A>The <TT CLASS="cv">Q3Mesh_GetComponentNumVertices</TT> function might not accurately report the number of vertices in a mesh component if called while mesh updating is delayed (that is, after a call to <TT CLASS="cv">Q3Mesh_DelayUpdates</TT> but before the matching call to <TT CLASS="cv">Q3Mesh_ResumeUpdates</TT>).</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5250"> </A>Q3Mesh_GetComponentNumEdges</H2><P CLASS="T1.Text1"><A NAME="pgfId=5251"> </A><A NAME="marker=3529"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetComponentNumEdges</TT> function to determine the number of edges in a component of a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45036"> </A>TQ3Status Q3Mesh_GetComponentNumEdges (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshComponent component, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *numEdges);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45038"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5253"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45047"> </A><TT CLASS="cv">component</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5254"> </A>A mesh component.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45056"> </A><TT CLASS="cv">numEdges</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5255"> </A>On exit, the number of edges in the specified mesh component.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5256"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5257"> </A>The <TT CLASS="cv">Q3Mesh_GetComponentNumEdges</TT> function returns, in the <TT CLASS="cv">numEdges</TT> parameter, the number of edges in the mesh component specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">component</TT> parameters.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=21279"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=21280"> </A>The <TT CLASS="cv">Q3Mesh_GetComponentNumEdges</TT> function might not accurately report the number of edges in a mesh component if called while mesh updating is delayed (that is, after a call to <TT CLASS="cv">Q3Mesh_DelayUpdates</TT> but before the matching call to <TT CLASS="cv">Q3Mesh_ResumeUpdates</TT>).</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5258"> </A>Q3Mesh_GetComponentBoundingBox</H2><P CLASS="T1.Text1"><A NAME="pgfId=5259"> </A><A NAME="marker=3539"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetComponentBoundingBox</TT> function to determine the bounding box of a component of a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45067"> </A>TQ3Status Q3Mesh_GetComponentBoundingBox (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshComponent component, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3BoundingBox *boundingBox);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45069"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5261"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45078"> </A><TT CLASS="cv">component</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5262"> </A>A mesh component.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45087"> </A><TT CLASS="cv">boundingBox</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5263"> </A>On exit, the bounding box of the specified mesh component.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5264"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5265"> </A>The <TT CLASS="cv">Q3Mesh_GetComponentBoundingBox</TT> function returns, in the <TT CLASS="cv">boundingBox</TT> parameter, the bounding box of the mesh component specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">component</TT> parameters.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=21291"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=21292"> </A>The <TT CLASS="cv">Q3Mesh_GetComponentBoundingBox</TT> function might not accurately report the bounding box of a mesh component if called while mesh updating is delayed (that is, after a call to <TT CLASS="cv">Q3Mesh_DelayUpdates</TT> but before the matching call to <TT CLASS="cv">Q3Mesh_ResumeUpdates</TT>).</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5266"> </A>Q3Mesh_GetComponentOrientable</H2><P CLASS="T1.Text1"><A NAME="pgfId=5267"> </A><A NAME="marker=3549"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetComponentOrientable</TT> function to determine whether the faces of a component of a mesh can be consistently oriented.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45102"> </A>TQ3Status Q3Mesh_GetComponentOrientable (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshComponent component, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean *orientable);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45104"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5269"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45113"> </A><TT CLASS="cv">component</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5270"> </A>A mesh component.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45122"> </A><TT CLASS="cv">orientable</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5271"> </A>On exit, a Boolean value that indicates whether the faces of the specified mesh component can be consistently oriented.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5272"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5273"> </A>The <TT CLASS="cv">Q3Mesh_GetComponentOrientable</TT> function returns, in the <TT CLASS="cv">orientable</TT> parameter, the value <TT CLASS="cv">kQ3True</TT> if the faces of the mesh component specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">component</TT> parameters can be consistently oriented; <TT CLASS="cv">Q3Mesh_GetComponentOrientable</TT> returns <TT CLASS="cv">kQ3False</TT> otherwise.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=12425"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=12426"> </A>The <TT CLASS="cv">Q3Mesh_GetComponentOrientable</TT> function might not accurately report the orientation state of a mesh component if called while mesh updating is delayed (that is, after a call to <TT CLASS="cv">Q3Mesh_DelayUpdates</TT> but before the matching call to <TT CLASS="cv">Q3Mesh_ResumeUpdates</TT>).</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5274"> </A>Q3Mesh_GetVertexCoordinates</H2><P CLASS="T1.Text1"><A NAME="pgfId=5275"> </A><A NAME="marker=3559"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetVertexCoordinates</TT> function to get the coordinates of a vertex of a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45133"> </A>TQ3Status Q3Mesh_GetVertexCoordinates (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshVertex vertex, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Point3D *coordinates);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45135"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5277"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45144"> </A><TT CLASS="cv">vertex</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5278"> </A>A mesh vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45153"> </A><TT CLASS="cv">coordinates</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5279"> </A>On exit, the coordinates of the specified mesh vertex.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5280"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5281"> </A>The <TT CLASS="cv">Q3Mesh_GetVertexCoordinates</TT> function returns, in the <TT CLASS="cv">coordinates</TT> parameter, the coordinates of the mesh vertex specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">vertex</TT> parameters.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5282"> </A>Q3Mesh_SetVertexCoordinates</H2><P CLASS="T1.Text1"><A NAME="pgfId=5283"> </A><A NAME="marker=3569"> </A>You can use the <TT CLASS="cv">Q3Mesh_SetVertexCoordinates</TT> function to set the coordinates of a vertex of a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45164"> </A>TQ3Status Q3Mesh_SetVertexCoordinates (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshVertex vertex, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point3D *coordinates);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45166"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5285"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45175"> </A><TT CLASS="cv">vertex</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5286"> </A>A mesh vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45184"> </A><TT CLASS="cv">coordinates</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5287"> </A>The desired coordinates of the specified mesh vertex.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5288"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5289"> </A>The <TT CLASS="cv">Q3Mesh_SetVertexCoordinates</TT> function sets the coordinates of the mesh vertex specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">vertex</TT> parameters to those specified in the <TT CLASS="cv">coordinates</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5290"> </A>Q3Mesh_GetVertexIndex</H2><P CLASS="T1.Text1"><A NAME="pgfId=5291"> </A><A NAME="marker=3579"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetVertexIndex</TT> function to get the index of a mesh vertex.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45195"> </A>TQ3Status Q3Mesh_GetVertexIndex (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshVertex vertex, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *index);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45197"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5293"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45206"> </A><TT CLASS="cv">vertex</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5294"> </A>A mesh vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45215"> </A><TT CLASS="cv">index</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5295"> </A>On exit, the index of the specified mesh vertex.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5296"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5297"> </A>The <TT CLASS="cv">Q3Mesh_GetVertexIndex</TT> function returns, in the <TT CLASS="cv">index</TT> parameter, the index of the mesh vertex specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">vertex</TT> parameters. A <B CLASS="bold">vertex index</B> is a unique integer (between 0 and the total number of vertices in the mesh minus 1) associated with a vertex.<A NAME="marker=12977"> </A></P><P CLASS="W.Warning"><A NAME="pgfId=12947"> </A>Vertex indices are volatile and can be changed by functions that alter the topology of a mesh (such as functions that add or delete faces or vertices), and by writing, picking, rendering, or duplicating a mesh, or by calling <TT CLASS="cv">Q3Mesh_DelayUpdates</TT>. As a result, you should rely on an index returned by <TT CLASS="cv">Q3Mesh_GetVertexIndex</TT> only until you perform one of these operations. </P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5299"> </A>Q3Mesh_GetVertexOnBoundary</H2><P CLASS="T1.Text1"><A NAME="pgfId=5300"> </A><A NAME="marker=3590"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetVertexOnBoundary</TT> function to determine whether a vertex lies on the boundary of a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45226"> </A>TQ3Status Q3Mesh_GetVertexOnBoundary (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshVertex vertex, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean *onBoundary);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45228"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5302"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45241"> </A><TT CLASS="cv">vertex</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5303"> </A>A mesh vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45250"> </A><TT CLASS="cv">onBoundary</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5304"> </A>On exit, a Boolean value that indicates whether the specified mesh vertex lies on the boundary of the mesh.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5305"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5306"> </A>The <TT CLASS="cv">Q3Mesh_GetVertexOnBoundary</TT> function returns, in the <TT CLASS="cv">onBoundary</TT> parameter, the value <TT CLASS="cv">kQ3True</TT> if the mesh vertex specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">vertex</TT> parameters lies on the boundary of the mesh. <TT CLASS="cv">Q3Mesh_GetVertexOnBoundary</TT> returns <TT CLASS="cv">kQ3False</TT> otherwise.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5307"> </A>Q3Mesh_GetVertexComponent</H2><P CLASS="T1.Text1"><A NAME="pgfId=5308"> </A><A NAME="marker=3600"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetVertexComponent</TT> function to get the component of a mesh to which a vertex belongs.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45261"> </A>TQ3Status Q3Mesh_GetVertexComponent (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshVertex vertex, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshComponent *component);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45263"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5310"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45272"> </A><TT CLASS="cv">vertex</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5311"> </A>A mesh vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45281"> </A><TT CLASS="cv">component</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5312"> </A>On exit, the mesh component that contains the specified mesh vertex.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5313"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5314"> </A>The <TT CLASS="cv">Q3Mesh_GetVertexComponent</TT> function returns, in the <TT CLASS="cv">component</TT> parameter, the mesh component that contains the mesh vertex specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">vertex</TT> parameters.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=21317"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=21318"> </A>The <TT CLASS="cv">Q3Mesh_GetVertexComponent</TT> function might not accurately report the mesh component that contains a mesh vertex if called while mesh updating is delayed (that is, after a call to <TT CLASS="cv">Q3Mesh_DelayUpdates</TT> but before the matching call to <TT CLASS="cv">Q3Mesh_ResumeUpdates</TT>).</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5315"> </A>Q3Mesh_GetVertexAttributeSet</H2><P CLASS="T1.Text1"><A NAME="pgfId=5316"> </A><A NAME="marker=3610"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetVertexAttributeSet</TT> function to get the attribute set of a vertex of a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45292"> </A>TQ3Status Q3Mesh_GetVertexAttributeSet (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshVertex vertex, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3AttributeSet *attributeSet);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45294"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5318"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45303"> </A><TT CLASS="cv">vertex</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5319"> </A>A mesh vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45312"> </A><TT CLASS="cv">attributeSet</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5320"> </A>On exit, a pointer to the set of attributes for the mesh vertex.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5321"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5322"> </A>The <TT CLASS="cv">Q3Mesh_GetVertexAttributeSet</TT> function returns, in the <TT CLASS="cv">attributeSet</TT> parameter, the set of attributes currently associated with the mesh vertex specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">vertex</TT> parameters. The reference count of the set is incremented.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5323"> </A>Q3Mesh_SetVertexAttributeSet</H2><P CLASS="T1.Text1"><A NAME="pgfId=5324"> </A><A NAME="marker=3620"> </A>You can use the <TT CLASS="cv">Q3Mesh_SetVertexAttributeSet</TT> function to set the attribute set of a vertex of a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45323"> </A>TQ3Status Q3Mesh_SetVertexAttributeSet (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshVertex vertex, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3AttributeSet attributeSet);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45325"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5326"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45334"> </A><TT CLASS="cv">vertex</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5327"> </A>A mesh vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45343"> </A><TT CLASS="cv">attributeSet</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5328"> </A> The desired set of attributes for the specified mesh vertex.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5329"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5330"> </A>The <TT CLASS="cv">Q3Mesh_SetVertexAttributeSet</TT> function sets the attribute set of the mesh vertex specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">vertex</TT> parameters to the set of attributes specified by the <TT CLASS="cv">attributeSet</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5331"> </A>Q3Mesh_GetFaceNumVertices</H2><P CLASS="T1.Text1"><A NAME="pgfId=5332"> </A><A NAME="marker=3630"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetFaceNumVertices</TT> function to determine the number of vertices in a face of a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45355"> </A>TQ3Status Q3Mesh_GetFaceNumVertices (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshFace face, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *numVertices);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45357"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5334"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45366"> </A><TT CLASS="cv">face</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5335"> </A>A mesh face.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45375"> </A><TT CLASS="cv">numVertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5336"> </A>On exit, the number of vertices in the specified mesh face.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5337"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5338"> </A>The <TT CLASS="cv">Q3Mesh_GetFaceNumVertices</TT> function returns, in the <TT CLASS="cv">numVertices</TT> parameter, the number of vertices in the mesh face specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">face</TT> parameters.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5339"> </A>Q3Mesh_GetFacePlaneEquation</H2><P CLASS="T1.Text1"><A NAME="pgfId=5340"> </A><A NAME="marker=3640"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetFacePlaneEquation</TT> function to determine the plane equation of a face of a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45386"> </A>TQ3Status Q3Mesh_GetFacePlaneEquation (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshFace face, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3PlaneEquation *planeEquation);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45388"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5342"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45397"> </A><TT CLASS="cv">face</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5343"> </A>A mesh face.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45406"> </A><TT CLASS="cv">planeEquation</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5344"> </A> On exit, the plane equation of the plane spanned by the vertices of the specified mesh face.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5345"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5346"> </A>The <TT CLASS="cv">Q3Mesh_GetFacePlaneEquation</TT> function returns, in the <TT CLASS="cv">planeEquation</TT> parameter, the plane equation of the plane spanned by the vertices of the mesh face specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">face</TT> parameters. If the vertices of the mesh face do not all lie in one plane, the information returned in the <TT CLASS="cv">planeEquation</TT> parameter is only an approximation.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5347"> </A>Q3Mesh_GetFaceNumContours</H2><P CLASS="T1.Text1"><A NAME="pgfId=5348"> </A><A NAME="marker=3650"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetFaceNumContours</TT> function to determine the number of contours in a face of a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45418"> </A>TQ3Status Q3Mesh_GetFaceNumContours (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshFace face, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *numContours);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45420"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5350"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45429"> </A><TT CLASS="cv">face</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5351"> </A>A mesh face.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45438"> </A><TT CLASS="cv">numContours</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5352"> </A> On exit, the number of contours in the specified mesh face.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5353"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5354"> </A>The <TT CLASS="cv">Q3Mesh_GetFaceNumContours</TT> function returns, in the <TT CLASS="cv">numContours</TT> parameter, the number of contours in the mesh face specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">face</TT> parameters. A mesh face always contains at least one contour, which defines the face itself. Any additional contours in the face define holes in the face.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5355"> </A>Q3Mesh_GetFaceIndex</H2><P CLASS="T1.Text1"><A NAME="pgfId=5356"> </A><A NAME="marker=3660"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetFaceIndex</TT> function to get the index of a mesh face.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45454"> </A>TQ3Status Q3Mesh_GetFaceIndex (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshFace face, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *index);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45456"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5358"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45465"> </A><TT CLASS="cv">face</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5359"> </A>A mesh face.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45474"> </A><TT CLASS="cv">index</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5360"> </A>On exit, the index of the specified mesh face.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5361"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5362"> </A>The <TT CLASS="cv">Q3Mesh_GetFaceIndex</TT> function returns, in the <TT CLASS="cv">index</TT> parameter, the index of the mesh face specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">face</TT> parameters. A <B CLASS="bold">face index</B> is a unique integer (between 0 and the total number of faces in the mesh minus 1) associated with a face.<A NAME="marker=5363"> </A></P><P CLASS="W.Warning"><A NAME="pgfId=12986"> </A>Face indices are volatile and can be changed by functions that alter the topology of a mesh (such as functions that add or delete faces or vertices), and by writing, picking, rendering, or duplicating a mesh, or by calling <TT CLASS="cv">Q3Mesh_DelayUpdates</TT>. As a result, you should rely on an index returned by <TT CLASS="cv">Q3Mesh_GetFaceIndex</TT> only until you perform one of these operations. </P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5364"> </A>Q3Mesh_GetFaceComponent</H2><P CLASS="T1.Text1"><A NAME="pgfId=5365"> </A><A NAME="marker=3671"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetFaceComponent</TT> function to get the component of a mesh to which a face belongs.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45485"> </A>TQ3Status Q3Mesh_GetFaceComponent (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshFace face, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshComponent *component);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45487"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5367"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45496"> </A><TT CLASS="cv">face</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5368"> </A>A mesh face.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45505"> </A><TT CLASS="cv">component</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5369"> </A>On exit, the mesh component that contains the specified mesh face.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5370"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5371"> </A>The <TT CLASS="cv">Q3Mesh_GetFaceComponent</TT> function returns, in the <TT CLASS="cv">component</TT> parameter, the mesh component that contains the mesh face specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">face</TT> parameters.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=12533"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=12534"> </A>The <TT CLASS="cv">Q3Mesh_GetFaceComponent</TT> function might not accurately report the mesh component that contains a mesh face if called while mesh updating is delayed (that is, after a call to <TT CLASS="cv">Q3Mesh_DelayUpdates</TT> but before the matching call to <TT CLASS="cv">Q3Mesh_ResumeUpdates</TT>).</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5372"> </A>Q3Mesh_GetFaceAttributeSet</H2><P CLASS="T1.Text1"><A NAME="pgfId=5373"> </A><A NAME="marker=3681"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetFaceAttributeSet</TT> function to get the attribute set of a face of a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45516"> </A>TQ3Status Q3Mesh_GetFaceAttributeSet (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshFace face, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3AttributeSet *attributeSet);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45518"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5375"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45527"> </A><TT CLASS="cv">face</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5376"> </A>A mesh face.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45536"> </A><TT CLASS="cv">attributeSet</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5377"> </A> On exit, a pointer to the set of attributes for the specified mesh face.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5378"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5379"> </A>The <TT CLASS="cv">Q3Mesh_GetFaceAttributeSet</TT> function returns, in the <TT CLASS="cv">attributeSet</TT> parameter, the set of attributes currently associated with the mesh face specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">face</TT> parameters. The reference count of the set is incremented.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5380"> </A>Q3Mesh_SetFaceAttributeSet</H2><P CLASS="T1.Text1"><A NAME="pgfId=5381"> </A><A NAME="marker=3691"> </A>You can use the <TT CLASS="cv">Q3Mesh_SetFaceAttributeSet</TT> function to set the attribute set of a face of a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45548"> </A>TQ3Status Q3Mesh_SetFaceAttributeSet (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshFace face, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3AttributeSet attributeSet);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45550"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5383"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45559"> </A><TT CLASS="cv">face</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5384"> </A>A mesh face.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45568"> </A><TT CLASS="cv">attributeSet</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5385"> </A> The desired set of attributes for the specified mesh face.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5386"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5387"> </A>The <TT CLASS="cv">Q3Mesh_SetFaceAttributeSet</TT> function sets the attribute set of the mesh face specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">face</TT> parameters to the set of attributes specified by the <TT CLASS="cv">attributeSet</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5388"> </A>Q3Mesh_GetEdgeVertices</H2><P CLASS="T1.Text1"><A NAME="pgfId=5389"> </A><A NAME="marker=3701"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetEdgeVertices</TT> function to get the vertices of a mesh edge.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45580"> </A>TQ3Status Q3Mesh_GetEdgeVertices (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshEdge edge, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshVertex *vertex1,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshVertex *vertex2);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45582"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5391"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45591"> </A><TT CLASS="cv">edge</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5392"> </A>A mesh edge.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45600"> </A><TT CLASS="cv">vertex1</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5393"> </A>On exit, the first vertex of the specified mesh edge.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45609"> </A><TT CLASS="cv">vertex2</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5394"> </A>On exit, the second vertex of the specified mesh edge.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5395"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5396"> </A>The <TT CLASS="cv">Q3Mesh_GetEdgeVertices</TT> function returns, in the <TT CLASS="cv">vertex1</TT> and <TT CLASS="cv">vertex2</TT> parameters, the two vertices of the mesh edge specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">edge</TT> parameters.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5397"> </A>Q3Mesh_GetEdgeFaces</H2><P CLASS="T1.Text1"><A NAME="pgfId=5398"> </A><A NAME="marker=3712"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetEdgeFaces</TT> function to get the faces that share a mesh edge.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45620"> </A>TQ3Status Q3Mesh_GetEdgeFaces (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshEdge edge, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshFace *face1, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshFace *face2);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45622"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5400"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45631"> </A><TT CLASS="cv">edge</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5401"> </A>A mesh edge.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45640"> </A><TT CLASS="cv">face1</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5402"> </A>On exit, the first mesh face that shares the specified mesh edge.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45649"> </A><TT CLASS="cv">face2</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5403"> </A>On exit, the second mesh face that shares the specified mesh edge.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5404"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5405"> </A>The <TT CLASS="cv">Q3Mesh_GetEdgeFaces</TT> function returns, in the <TT CLASS="cv">face1</TT> and <TT CLASS="cv">face2</TT> parameters, the two mesh faces that shares the mesh edge specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">edge</TT> parameters. If the edge lies on the boundary of the mesh, either <TT CLASS="cv">face1</TT> or <TT CLASS="cv">face2</TT> is <TT CLASS="cv">NULL</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5406"> </A>Q3Mesh_GetEdgeOnBoundary</H2><P CLASS="T1.Text1"><A NAME="pgfId=5407"> </A><A NAME="marker=3723"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetEdgeOnBoundary</TT> function to determine whether a mesh edge lies on the boundary of the mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45660"> </A>TQ3Status Q3Mesh_GetEdgeOnBoundary (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshEdge edge, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean *onBoundary);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45662"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5409"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45671"> </A><TT CLASS="cv">edge</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5410"> </A>A mesh edge.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45680"> </A><TT CLASS="cv">onBoundary</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5411"> </A>On exit, a Boolean value that indicates whether the specified mesh edge lies on the boundary of the mesh.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5412"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5413"> </A>The <TT CLASS="cv">Q3Mesh_GetEdgeOnBoundary</TT> function returns, in the <TT CLASS="cv">onBoundary</TT> parameter, the value <TT CLASS="cv">kQ3True</TT> if the mesh edge specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">edge</TT> parameters lies on the boundary of the mesh. <TT CLASS="cv">Q3Mesh_GetEdgeOnBoundary</TT> returns <TT CLASS="cv">kQ3False</TT> otherwise.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5414"> </A>Q3Mesh_GetEdgeComponent</H2><P CLASS="T1.Text1"><A NAME="pgfId=5415"> </A><A NAME="marker=3733"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetEdgeComponent</TT> function to get the component of a mesh to which an edge belongs.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45691"> </A>TQ3Status Q3Mesh_GetEdgeComponent (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshEdge edge, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshComponent *component);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45693"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5417"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45702"> </A><TT CLASS="cv">edge</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5418"> </A>A mesh edge.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45711"> </A><TT CLASS="cv">component</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5419"> </A>On exit, the mesh component that contains the specified mesh edge.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5420"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5421"> </A>The <TT CLASS="cv">Q3Mesh_GetEdgeComponent</TT> function returns, in the <TT CLASS="cv">component</TT> parameter, the mesh component that contains the mesh edge specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">edge</TT> parameters.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=12549"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=12550"> </A>The <TT CLASS="cv">Q3Mesh_GetEdgeComponent</TT> function might not accurately report the mesh component that contains a mesh edge if called while mesh updating is delayed (that is, after a call to <TT CLASS="cv">Q3Mesh_DelayUpdates</TT> but before the matching call to <TT CLASS="cv">Q3Mesh_ResumeUpdates</TT>).</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5422"> </A>Q3Mesh_GetEdgeAttributeSet</H2><P CLASS="T1.Text1"><A NAME="pgfId=5423"> </A><A NAME="marker=3743"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetEdgeAttributeSet</TT> function to get the attribute set of an edge of a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45722"> </A>TQ3Status Q3Mesh_GetEdgeAttributeSet (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshEdge edge, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3AttributeSet *attributeSet);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45724"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5425"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45733"> </A><TT CLASS="cv">edge</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5426"> </A>A mesh edge.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45742"> </A><TT CLASS="cv">attributeSet</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5427"> </A> On exit, a pointer to the set of attributes for the specified mesh edge.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5428"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5429"> </A>The <TT CLASS="cv">Q3Mesh_GetEdgeAttributeSet</TT> function returns, in the <TT CLASS="cv">attributeSet</TT> parameter, the set of attributes currently associated with the mesh edge specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">edge</TT> parameters. The reference count of the set is incremented.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5430"> </A>Q3Mesh_SetEdgeAttributeSet</H2><P CLASS="T1.Text1"><A NAME="pgfId=5431"> </A><A NAME="marker=3753"> </A>You can use the <TT CLASS="cv">Q3Mesh_SetEdgeAttributeSet</TT> function to set the attribute set of an edge of a mesh.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45754"> </A>TQ3Status Q3Mesh_SetEdgeAttributeSet (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshEdge edge, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3AttributeSet attributeSet);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45756"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5433"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45765"> </A><TT CLASS="cv">edge</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5434"> </A>A mesh edge.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45774"> </A><TT CLASS="cv">attributeSet</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5435"> </A>The desired set of attributes for the specified mesh edge.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5436"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5437"> </A>The <TT CLASS="cv">Q3Mesh_SetEdgeAttributeSet</TT> function sets the attribute set of the mesh edge specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">edge</TT> parameters to the set of attributes specified by the <TT CLASS="cv">attributeSet</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5439"> </A><A NAME="36613"> </A>Q3Mesh_GetContourFace</H2><P CLASS="T1.Text1"><A NAME="pgfId=5440"> </A><A NAME="marker=3764"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetContourFace</TT> function to get the mesh face that contains a mesh contour.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45785"> </A>TQ3Status Q3Mesh_GetContourFace (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshContour contour, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshFace *face);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45787"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5442"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45796"> </A><TT CLASS="cv">contour</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5443"> </A>A mesh contour.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45805"> </A><TT CLASS="cv">face</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5444"> </A>On exit, the mesh face that contains the specified contour.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5445"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5446"> </A>The <TT CLASS="cv">Q3Mesh_GetContourFace</TT> function returns, in the <TT CLASS="cv">face</TT> parameter, the mesh face that contains the mesh contour specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">contour</TT> parameters.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5447"> </A>Q3Mesh_GetContourNumVertices</H2><P CLASS="T1.Text1"><A NAME="pgfId=5448"> </A><A NAME="marker=3774"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetContourNumVertices</TT> function to get the number of vertices that define a contour.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45816"> </A>TQ3Status Q3Mesh_GetContourNumVertices (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshContour contour, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *numVertices);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45818"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5450"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45827"> </A><TT CLASS="cv">contour</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5451"> </A>A mesh contour.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45840"> </A><TT CLASS="cv">numVertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5452"> </A> On exit, the number of vertices in the specified mesh contour.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5453"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5454"> </A>The <TT CLASS="cv">Q3Mesh_GetContourNumVertices</TT> function returns, in the <TT CLASS="cv">numVertices</TT> parameter, the number of vertices that compose the mesh contour specified by the <TT CLASS="cv">mesh</TT> and <TT CLASS="cv">contour</TT> parameters.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=5455"> </A>Q3Mesh_GetCornerAttributeSet</H2><P CLASS="T1.Text1"><A NAME="pgfId=5456"> </A><A NAME="marker=3784"> </A>You can use the <TT CLASS="cv">Q3Mesh_GetCornerAttributeSet</TT> function to get the attribute set of a mesh corner. </P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45852"> </A>TQ3Status Q3Mesh_GetCornerAttributeSet (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshVertex vertex, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshFace face, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3AttributeSet *attributeSet);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45854"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5458"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45863"> </A><TT CLASS="cv">vertex</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5459"> </A>A mesh vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45872"> </A><TT CLASS="cv">face</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5460"> </A>A mesh face. This face must contain the specified vertex in one of its contours.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45881"> </A><TT CLASS="cv">attributeSet</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5461"> </A> On exit, the set of attributes for the corner defined by the specified mesh vertex and face.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5462"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=12559"> </A>The <TT CLASS="cv">Q3Mesh_GetCornerAttributeSet</TT> function returns, in the <TT CLASS="cv">attributeSet</TT> parameter, the set of attributes of the corner defined by the <TT CLASS="cv">vertex</TT> and <TT CLASS="cv">face</TT> parameters in the mesh specified by the <TT CLASS="cv">mesh</TT> parameter. The corner attributes override any attributes associated with the vertex alone. The reference count of the set is incremented.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=12560"> </A>Q3Mesh_SetCornerAttributeSet</H2><P CLASS="T1.Text1"><A NAME="pgfId=5465"> </A><A NAME="marker=3795"> </A>You can use the <TT CLASS="cv">Q3Mesh_SetCornerAttributeSet</TT> function to set the attribute set of a mesh corner.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=45893"> </A>TQ3Status Q3Mesh_SetCornerAttributeSet (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject mesh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshVertex vertex, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MeshFace face, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3AttributeSet attributeSet);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45895"> </A><TT CLASS="cv">mesh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5467"> </A>A mesh.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45904"> </A><TT CLASS="cv">vertex</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5468"> </A>A mesh vertex.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45913"> </A><TT CLASS="cv">face</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12567"> </A>A mesh face. This face must contain the specified vertex in one of its contours.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=45922"> </A><TT CLASS="cv">attributeSet</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=5470"> </A> The desired set of attributes for the corner defined by the specified mesh vertex and face.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=5471"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=5472"> </A>The <TT CLASS="cv">Q3Mesh_SetCornerAttributeSet</TT> function sets the attribute set of the corner defined by the <TT CLASS="cv">vertex</TT> and <TT CLASS="cv">face</TT> parameters in the mesh specified by the <TT CLASS="cv">mesh</TT> parameter to the set of attributes specified by the <TT CLASS="cv">attributeSet</TT> parameter. The corner attributes override any attributes associated with the vertex alone.<A NAME="marker=5473"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>