<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Push and Pop Methods</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH2.RoutineHd2"><A NAME="pgfId=12633"> </A><A NAME="39643"> </A>Push and Pop Methods</H1><P CLASS="T1.Text1"><A NAME="pgfId=12634"> </A>You can call renderer push and pop methods whenever the graphics state in the view needs to be pushed or popped. Code may isolate the state by submitting a display group that pushes and pops or by making calls such as the following:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=21037"> </A>Q3Attribute_Submit(kQ3AttributeTypeDiffuseColor, &amp;red, view);<BR>Q3Attribute_Submit(kQ3AttributeTypeTransparencyColor, &amp;blue, view);<BR>Q3Attribute_Submit(kQ3AttributeTypeSpecularColor, &amp;white, view);<BR>Q3Box_Submit(&amp;unitBox, view);<BR>Q3TranslateTransform_Submit(&amp;unitVector, view);<BR>Q3Push_Submit(view);<BR>Q3Attribute_Submit(kQ3AttributeTypeDiffuseColor, &amp;blue, view);<BR>Q3Attribute_Submit(kQ3AttributeTypeTransparencyColor, &amp;green, view);<BR>Q3Box_Submit(&amp;unitBox, view);<BR>Q3Pop_Submit(view);<BR>Q3TranslateTransform_Submit(&amp;unitVector, view);<BR>Q3Box_Submit(&amp;unitBox, view);<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=12636"> </A>Even though you support <TT CLASS="cv">RendererPush</TT> and <TT CLASS="cv">RendererPop</TT> in your renderer, you must also maintain your drawing state as a stack. Your code will not automatically be updated with the popped state after <TT CLASS="cv">RendererPop</TT> is called. If you do not support push and pop functionality in your renderer, you may maintain a single copy of the drawing state. Your code will be updated with changed fields after the view stack is popped.</P><P CLASS="T1.Text1"><A NAME="pgfId=12637"> </A>A renderer that supports <TT CLASS="cv">RendererPush</TT> and <TT CLASS="cv">RendererPop</TT> will be called in the following sequence, based on the previous example:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=21041"> </A>RendererUpdateAttributeDiffuseColor(...,&amp;red)<BR>RendererUpdateAttributeTransparencyColor(...,&amp;blue)<BR>RendererUpdateAttributeSpecularColor(...,&amp;white)<BR>RendererUpdateMatrixLocalToWorld(...)<BR>RendererSubmitGeometryBox(...)<BR>RendererPush(...)<BR>RendererUpdateAttributeDiffuseColor(...,&amp;blue)<BR>RendererUpdateAttributeTransparencyColor(...,&amp;green)<BR>RendererSubmitGeometryBox(...)<BR>RendererPop(...)<BR>RendererUpdateMatrixLocalToWorld(...)<BR>RendererSubmitGeometryBox(...)<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=12639"> </A>A renderer that does not support <TT CLASS="cv">RendererPush</TT> and <TT CLASS="cv">RendererPop</TT> will be called in the following sequence:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=21045"> </A>RendererUpdateAttributeDiffuseColor(...,&amp;red)<BR>RendererUpdateAttributeTransparencyColor(...,&amp;blue)<BR>RendererUpdateAttributeSpecularColor(...,&amp;white)<BR>RendererUpdateMatrixLocalToWorld(...)<BR>RendererSubmitGeometryBox(...)<BR>RendererUpdateAttributeDiffuseColor(...,&amp;blue)<BR>RendererUpdateAttributeTransparencyColor(...,&amp;green)<BR>RendererSubmitGeometryBox(...)<BR>RendererUpdateAttributeDiffuseColor(...,&amp;red)<BR>RendererUpdateAttributeTransparencyColor(...,&amp;blue)<BR>RendererUpdateMatrixLocalToWorld(...)<BR>RendererSubmitGeometryBox(...)<BR></CODE><P CLASS="Note"><A NAME="pgfId=12641"> </A>In both cases, update calls may be in a different order, as explained in <A HREF="qd3drenderers.19.htm#21930" CLASS="XRef">&quot;Renderer Methods&quot;</A>. </P><DIV><H3 CLASS="RoH.RoutineHeading"><A NAME="pgfId=12648"> </A>TQ3XRendererPushMethod</H3><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21049"> </A>#define kQ3XMethodTypeRendererPush<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3_METHOD_TYPE('r','d','p','s')<BR></CODE><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21055"> </A>typedef TQ3Status (*TQ3XRendererPushMethod)(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ViewObject&nbsp;&nbsp;&nbsp;&nbsp;view,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*rendererPrivate);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21059"> </A>view</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12651"> </A>The current view being rendered to.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21073"> </A>rendererPrivate</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12652"> </A> 	A pointer to structure of size <TT CLASS="cv">instanceSize</TT>, passed into <TT CLASS="cv">Q3ObjectHierarchy_RegisterClass</TT>, and initialized in your <TT CLASS="cv">kQ3MethodTypeObjectNew</TT> method.</DD></DL COMPACT><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=12653"> </A>DESCRIPTION</H4><P CLASS="T1.Text1"><A NAME="pgfId=12654"> </A>The kQ3XMethodTypeRendererPush method type returns a function pointer of type TQ3XRendererPushMethod.</P></DIV></DIV><DIV><H3 CLASS="RoH.RoutineHeading"><A NAME="pgfId=12655"> </A>TQ3XRendererPopMethod</H3><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21085"> </A>#define kQ3XMethodTypeRendererPop<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3_METHOD_TYPE('r','d','p','o')<BR></CODE><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21091"> </A>typedef TQ3Status (*TQ3XRendererPopMethod)(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ViewObject&nbsp;&nbsp;&nbsp;&nbsp;view,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*rendererPrivate);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21095"> </A>view</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12658"> </A>The current view being rendered to.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21105"> </A>rendererPrivate</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12659"> </A> 	A pointer to structure of size <TT CLASS="cv">instanceSize</TT>, passed into <TT CLASS="cv">Q3ObjectHierarchy_RegisterClass</TT>, and initialized in your <TT CLASS="cv">kQ3MethodTypeObjectNew</TT> method.</DD></DL COMPACT><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=12660"> </A>DESCRIPTION</H4><P CLASS="T1.Text1"><A NAME="pgfId=12661"> </A>The kQ3XMethodTypeRendererPop method type returns a function pointer of type TQ3XRendererPopMethod.</P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>