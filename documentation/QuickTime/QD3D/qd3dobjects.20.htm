<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Class Registration and Unregistration</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=11035"> </A>Class Registration and Unregistration</H1><P CLASS="T1.Text1"><A NAME="pgfId=12222"> </A>Custom objects should provide methods for registering, unregistering, and replacing classes.</P><P CLASS="T1.Text1"><A NAME="pgfId=12810"> </A><A HREF="qd3dobjects.20.htm#31172" CLASS="XRef">Listing&nbsp;7</A> provides an example of how these methods are called. It is based on the example discussed in <A HREF="qd3dobjects.17.htm#37306" CLASS="XRef">&quot;Creating a Hierarchy&quot;</A>.</P><P CLASS="L.Listing"><A NAME="pgfId=12862"> </A>Listing&nbsp;7<A NAME="31172"> </A>Sample of registering and unregistering classes</P><CODE CLASS="Cv.Code"><A NAME="pgfId=22193"> </A>#define kMethodTypeFooGroupDoSomething &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3_METHOD_TYPE(0xFE, `f','g','r')<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=22197"> </A>typedef TQ3Status (*TFooGroupDoSomethingMethod)(<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3ObjectClass&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;objectClass,<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3Object&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;object,<BR>&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*dummyArg);<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=22201"> </A>typedef struct TFooGroupClass {<BR>&nbsp;&nbsp;&nbsp;&nbsp;TFooGroupDoSomethingMethod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doSomething;<BR>} TFooGroupClass;<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=22205"> </A>typedef struct TFooGroupData {<BR>&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dummy1;<BR>} TFooGroupData;<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=22209"> </A>gFooGroupClass =<BR>&nbsp;&nbsp;&nbsp;&nbsp;Q3XObjectHierarchy_RegisterClass(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kQ3ShapeTypeGroup,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kGroupTypeFoo,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;SomeCompany:FooGroup&quot;,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FooGroupClass_MetaHandler,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FooGroupClass_VirtualMetaHandler, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sizeof(TFooGroupClass),<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sizeof(TFooGroupData));<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=12839"> </A>The registration method for the foregoing would look like this:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=22213"> </A>static TQ3Status FooGroupClass_Register(<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3ObjectClass&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;objectClass,<BR>&nbsp;&nbsp;&nbsp;&nbsp;TFooGroupClass&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*gClass)<BR>{<BR>&nbsp;&nbsp;&nbsp;&nbsp;gClass-&gt;doSomething = <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3XObjectHierarchy_GetMethod(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;objectClass,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kMethodTypeFooGroupDoSomething);<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=22217"> </A>&nbsp;&nbsp;&nbsp;&nbsp;if ((Q3XObjectClass_GetLeafType(objectClass) !=<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kGroupTypeFoo) &amp;&amp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(gClass-&gt;doSomething == NULL)) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return kQ3Failure;<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=22221"> </A>&nbsp;&nbsp;&nbsp;&nbsp;return kQ3Success;<BR>}<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=12856"> </A>When the parent class <TT CLASS="cv">FooGroup</TT> is registered in this example, there is no need for the <TT CLASS="cv">kMethodTypeGroupFoo</TT> method. In subclasses, however, this method is required. This type of strategy may be used to impose restrictions on subclasses only, especially when the parent class is never intended to be instantiated. </P><P CLASS="T1.Text1"><A NAME="pgfId=12857"> </A>There is also no need for an <TT CLASS="cv">ObjectClassUnregister</TT> method because the <TT CLASS="cv">ObjectClassRegister</TT> method does not allocate any data.</P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=12290"> </A>TQ3XObjectClassRegisterMethod</H2><P CLASS="T1.Text1"><A NAME="pgfId=12291"> </A>The TQ3XObjectClassRegisterMethod function, which is returned by the kQ3XMethodTypeObjectClassRegister method, registers a class.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=22225"> </A>#define kQ3XMethodTypeObjectClassRegister Q3_METHOD_TYPE('r','g','s','t')<BR></CODE><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=22231"> </A>typedef TQ3Status (*TQ3XObjectClassRegisterMethod)(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3XObjectClass&nbsp;&nbsp;&nbsp;&nbsp;objectClass,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*classPrivate);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=22235"> </A>objectClass</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12293"> </A>An object class.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=22245"> </A>classPrivate</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12294"> </A>A pointer to the class's private data.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=12296"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=12297"> </A>The TQ3XObjectClassRegisterMethod method registers the class designated by objectClass, with private data pointed to by classPrivate. The size of the private data is equivalent to the <TT CLASS="cv">methodsSize</TT> parameter used in the earlier <TT CLASS="cv">Q3XObjectHierarchy_RegisterClass</TT> call; if <TT CLASS="cv">methodsSize</TT> was 0, classPrivate is <TT CLASS="cv">NULL</TT>.</P><P CLASS="T1.Text1"><A NAME="pgfId=12575"> </A><TT CLASS="cv">ObjectClassRegister</TT> is called from <TT CLASS="cv">Q3ObjectHierarchy_RegisterClass</TT> upon initial registration of an object class. It is also called when any subclass of an object class is registered. Registration occurs from root to leaf, as shown in <A HREF="qd3dobjects.18.htm#17404" CLASS="XRef">Figure&nbsp;8</A>. The <TT CLASS="cv">ObjectClassRegister</TT> method is called for the private class data on the way down the hierarchy, and the <TT CLASS="cv">ObjectClassUnregister</TT> method is called on the way up in case of a failure.</P><P CLASS="T1.Text1"><A NAME="pgfId=12573"> </A><TT CLASS="cv">ObjectClassRegister</TT> should initialize the data in <TT CLASS="cv">classPrivate</TT> and collect any needed methods from the metahandler, using <TT CLASS="cv">Q3ObjectHierarchy_GetMethod</TT>. A class may have no private class data (that is, its <TT CLASS="cv">methodsSize</TT> may be 0), yet may still have an <TT CLASS="cv">ObjectClassRegister</TT> method. In this case, <TT CLASS="cv">classPrivate</TT> will be <TT CLASS="cv">NULL</TT> (since there is no data), and a particular class could instead keep track of subclass states in global variables.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=12413"> </A>TQ3XObjectClassUnregisterMethod</H2><P CLASS="T1.Text1"><A NAME="pgfId=12443"> </A>The TQ3XObjectClassUnregisterMethod function, which is returned by the kQ3XMethodTypeObjectClassUnregister method, unregisters a class.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=22256"> </A>#define kQ3XMethodTypeObjectClassUnregister Q3_METHOD_TYPE('u','n','r','g')<BR></CODE><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=22262"> </A>typedef void (*TQ3XObjectClassUnregisterMethod)(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3XObjectClass&nbsp;&nbsp;&nbsp;&nbsp;objectClass,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*classPrivate);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=22266"> </A>objectClass</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12491"> </A>An object class.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=22276"> </A>classPrivate</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12492"> </A>A pointer to the class's private data.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=12525"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=12526"> </A>The TQ3XObjectClassUnregisterMethod method unregisters the class designated by objectClass, which has private data pointed to by classPrivate. The size of the private data is equivalent to the <TT CLASS="cv">methodsSize</TT> parameter used in the earlier <TT CLASS="cv">Q3XObjectHierarchy_RegisterClass</TT> call; if <TT CLASS="cv">methodsSize</TT> was 0, classPrivate is <TT CLASS="cv">NULL</TT>.</P><P CLASS="T1.Text1"><A NAME="pgfId=12625"> </A>The <TT CLASS="cv">ObjectClassUnregister</TT> method should undo any operations performed in the <TT CLASS="cv">ObjectClassRegister</TT> method, including removing the class from global tables and deallocating any memory used to store the class private data. If the <TT CLASS="cv">ObjectClassRegister</TT> method performed no allocations, <TT CLASS="cv">ObjectClassUnregister</TT> may be <TT CLASS="cv">NULL</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=12308"> </A>TQ3XObjectClassReplaceMethod</H2><P CLASS="T1.Text1"><A NAME="pgfId=12445"> </A>The TQ3XObjectClassReplaceMethod function, which is returned by the kQ3XMethodTypeObjectClassReplace method, replaces one class with another. It is used only when a new version of an object class is registered, eliminating the old version. </P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=22287"> </A>#define kQ3XMethodTypeObjectClassReplace Q3_METHOD_TYPE('r','g','r','p')<BR></CODE><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=22293"> </A>typedef void (*TQ3XObjectClassReplaceMethod)(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3XObjectClass&nbsp;&nbsp;&nbsp;&nbsp;oldObjectClass,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*oldClassPrivate,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3XObjectClass&nbsp;&nbsp;&nbsp;&nbsp;newObjectClass,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*newClassPrivate);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=22297"> </A>oldObjectClass</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12311"> </A><TT CLASS="cv"> 	</TT>The old object class to be replaced.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=22308"> </A>oldClassPrivate</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12312"> </A><TT CLASS="cv"> 	</TT>A pointer to the old class's private data.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=22318"> </A>newObjectClass</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12504"> </A><TT CLASS="cv"> 	</TT>A new object class.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=22328"> </A>newClassPrivate</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=12506"> </A><TT CLASS="cv"> 	</TT>A pointer to the new class's private data.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=12534"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=12535"> </A>The TQ3XObjectClassReplaceMethod method replaces the class designated by oldObjectClass, which has private data pointed to by oldClassPrivate, with the class designated by newObjectClass, which has private data pointed to by newClassPrivate. The sizes of the private data areas are equivalent to the <TT CLASS="cv">methodsSize</TT> parameters used in the earlier <TT CLASS="cv">Q3XObjectHierarchy_RegisterClass</TT> calls; if a <TT CLASS="cv">methodsSize</TT> value was 0, its equivalent classPrivate value is <TT CLASS="cv">NULL</TT>.</P><P CLASS="T1.Text1"><A NAME="pgfId=12663"> </A>TQ3XObjectClassReplaceMethod is required only by classes that maintain or track their subclasses in a table. When object classes of the same type collide, use the replace method instead of calling <TT CLASS="cv">Unregister(oldClass, oldClassPrivate)</TT> followed by <TT CLASS="cv">Register(newClass,</TT> <TT CLASS="cv">newClassPrivate)</TT>, which may cause an unexpected failure.</P><P CLASS="T1.Text1"><A NAME="pgfId=12664"> </A>The replace method should register the new class and then unregister the old class, without failure. If a class's TQ3XObjectClassRegisterMethod method never fails, the replace method is not needed.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=17264"> </A>SEE ALSO</H3><P CLASS="T1.Text1"><A NAME="pgfId=17267"> </A><A HREF="qd3dobjects.21.htm#32404" CLASS="XRef">&quot;Q3XMethodTypeObjectClassVersion&quot;</A>.</P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>