<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Private Draw Context Methods</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=45539"> </A><A NAME="11277"> </A>Private Draw Context Methods</H1><P CLASS="T1.Text1"><A NAME="pgfId=45540"> </A><A NAME="marker=51708"> </A>To write a drawing engine, you need to implement several private methods for managing draw contexts.</P><P CLASS="T1.Text1"><A NAME="pgfId=48741"> </A>Pointers to your drawing engine's private draw context methods are returned to QuickDraw&nbsp;3D RAVE by your <TT CLASS="cv">TQAEngineGetMethod</TT> method. See page&nbsp;<A HREF="qd3dgeometry.34.htm#34505" CLASS="XRef">[link]</A> for details.</P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=48019"> </A><A NAME="22246"> </A>TQADrawPrivateNew</H2><P CLASS="T1.Text1"><A NAME="pgfId=48046"> </A><A NAME="marker=51572"> </A>A drawing engine must define a method to create its own private data and initialize a new draw context.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69349"> </A>typedef TQAError (*TQADrawPrivateNew) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQADrawContext *newDrawContext, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQADevice *device, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQARect *rect, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQAClip *clip, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long flags);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69351"> </A><TT CLASS="cv">newDrawContext</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=48084"> </A> The draw context to initialize. On entry, all the fields of this structure have the value <TT CLASS="cv">NULL</TT>.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69361"> </A><TT CLASS="cv">device</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=48088"> </A>A device.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69370"> </A><TT CLASS="cv">rect</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=48023"> </A>The rectangular region (specified in device coordinates) of the specified device that can be drawn into by the drawing engine associated with the new draw context.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69379"> </A><TT CLASS="cv">clip</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=48024"> </A>The two-dimensional clipping region for the new draw context, or <TT CLASS="cv">NULL</TT> if no clipping is desired. This parameter must be set to <TT CLASS="cv">NULL</TT> for devices of type <TT CLASS="cv">kQADeviceMemory</TT>.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69388"> </A><TT CLASS="cv">flags</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=48026"> </A>A set of bit flags specifying features of the new draw context. See <A HREF="qd3dravedriver.2f.htm#13996" CLASS="XRef">&quot;Draw Context Flags Masks&quot;</A> for complete information.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=48031"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=48134"> </A>Your <TT CLASS="cv">TQADrawPrivateNew</TT> function is called whenever an application calls <TT CLASS="cv">QADrawContextNew</TT> to create a new draw context associated with your drawing engine. Your function should perform any initialization required for the new draw context. In particular, it should return a pointer to the draw context's private data in the <TT CLASS="cv">drawPrivate</TT> field of the draw context structure pointed to by the <TT CLASS="cv">newDrawContext</TT> parameter. In addition, your <TT CLASS="cv">TQADrawPrivateNew</TT> function should set any other fields of that draw context structure to point to public draw context methods defined by the drawing engine.</P><P CLASS="T1.Text1"><A NAME="pgfId=48276"> </A>Because it is the responsibility of your <TT CLASS="cv">TQADrawPrivateNew</TT> function to initialize the fields of a draw context structure, you can load different methods depending on the features of the device or draw context specified by the <TT CLASS="cv">device</TT> and <TT CLASS="cv">flags</TT> parameters. For instance, you might load one line drawing function for a device that displays 16 bits per pixel and a different line drawing function for a device that displays 32 bits per pixel. This technique allows you to avoid testing the display depth each time you draw a line.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=48307"> </A>SEE ALSO</H3><P CLASS="T1.Text1"><A NAME="pgfId=48308"> </A>See <A HREF="qd3dravedriver.f.htm#37138" CLASS="XRef">Listing&nbsp;11</A> for a sample <TT CLASS="cv">TQADrawPrivateNew</TT> function.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=48156"> </A>TQADrawPrivateDelete</H2><P CLASS="T1.Text1"><A NAME="pgfId=48157"> </A><A NAME="marker=51567"> </A>A drawing engine must define a method to delete its private data.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69399"> </A>typedef void (*TQADrawPrivateDelete) (TQADrawPrivate *drawPrivate);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69401"> </A><TT CLASS="cv">drawPrivate</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=48036"> </A>The draw context's private data.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=48196"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=48197"> </A>Your <TT CLASS="cv">TQADrawPrivateDelete</TT> function is called whenever an application calls <TT CLASS="cv">QADrawContextDelete</TT>. Your function should release any memory or other resources that were allocated by your <TT CLASS="cv">TQADrawPrivateNew</TT> function.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=48167"> </A><A NAME="37406"> </A>TQAEngineCheckDevice</H2><P CLASS="T1.Text1"><A NAME="pgfId=48168"> </A><A NAME="marker=51562"> </A>A drawing engine must define a method to indicate whether the engine can draw to a particular device.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69412"> </A>typedef TQAError (*TQAEngineCheckDevice) (const TQADevice *device);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69414"> </A><TT CLASS="cv">device</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=48240"> </A>A device.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=48212"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=48467"> </A>Your <TT CLASS="cv">TQAEngineCheckDevice</TT> function should return, as its function result, a code that indicates whether your drawing engine can draw into the device specified by the <TT CLASS="cv">device</TT> parameter (<TT CLASS="cv">kQANoErr</TT>) or not (<TT CLASS="cv">kQAError</TT>).</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=48172"> </A><A NAME="36590"> </A>TQAEngineGestalt</H2><P CLASS="T1.Text1"><A NAME="pgfId=48173"> </A><A NAME="marker=51557"> </A>A drawing engine must define a method to return information about its capabilities.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=69425"> </A>typedef TQAError (*TQAEngineGestalt) (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQAGestaltSelector selector, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void *response);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69427"> </A><TT CLASS="cv">selector</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=48498"> </A>A selector that determines what kind of information is to be returned about your drawing engine. See <A HREF="qd3dravedriver.28.htm#34472" CLASS="XRef">&quot;Gestalt Selectors&quot;</A> for complete information about the available selectors and the information you should return.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=69436"> </A><TT CLASS="cv">response</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=48502"> </A>A pointer to a buffer into which the returned information is to be copied. The calling application is responsible for allocating this buffer. The size and meaning of the data to be copied depends on the selector passed in the <TT CLASS="cv">selector</TT> parameter.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=48503"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=48555"> </A>Your <TT CLASS="cv">TQAEngineGestalt</TT> function is called whenever an application calls <TT CLASS="cv">QAEngineGestalt</TT>. Your function should return, in the buffer pointed to by the <TT CLASS="cv">response</TT> parameter, information about features of the type specified by the <TT CLASS="cv">selector</TT> parameter.<A NAME="marker=51709"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>