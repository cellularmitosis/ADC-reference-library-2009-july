{\rtf0\ansi{\fonttbl\f0\froman Times-Roman;}{\colortbl;\red255\green255\blue255;}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\f0\b\fs48 \cf0 Read Me About Son of Silly Balls\b0\fs28 \\pard\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\tx35840\tx36960\tx38080\tx39200\tx40320\tx41440\tx42560\tx43680\tx44800\tx45920\tx47040\tx48160\tx49280\tx50400\tx51520\tx52640\tx53760\tx54880\tx56000\tx57120\tx58240\tx59360\tx60480\tx61600\tx62720\tx63840\tx64960\tx66080\tx67200\tx68320\tx69440\tx70560\tx71680\tx72800\tx73920\tx75040\tx76160\tx77280\tx78400\tx79520\tx80640\tx81760\tx82880\tx84000\tx85120\tx86240\tx87360\tx88480\tx89600\tx90720\tx91840\tx92960\tx94080\tx95200\tx96320\tx97440\tx98560\tx99680\tx100800\tx101920\tx103040\tx104160\tx105280\tx106400\tx107520\tx108640\tx109760\tx110880\ql\qnatural\cf0 \1.0d5\\This sample is a port of a classic Mac OS sample, Silly Balls, whose sole purpose is to draw a bunch of randomly coloured, randomly placed, silly balls in a window on the screen.  While the actual code is trivial, porting Silly Balls to Yellow presented a number of interesting challenges which I describe in the ªCoding Notesº section.\\\pard\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\tx35840\tx36960\tx38080\tx39200\tx40320\tx41440\tx42560\tx43680\tx44800\tx45920\tx47040\tx48160\tx49280\tx50400\tx51520\tx52640\tx53760\tx54880\tx56000\tx57120\tx58240\tx59360\tx60480\tx61600\tx62720\tx63840\tx64960\tx66080\tx67200\tx68320\tx69440\tx70560\tx71680\tx72800\tx73920\tx75040\tx76160\tx77280\tx78400\tx79520\tx80640\tx81760\tx82880\tx84000\tx85120\tx86240\tx87360\tx88480\tx89600\tx90720\tx91840\tx92960\tx94080\tx95200\tx96320\tx97440\tx98560\tx99680\tx100800\tx101920\tx103040\tx104160\tx105280\tx106400\tx107520\tx108640\tx109760\tx110880\ql\qnatural\b\fs36 \cf0 User Level Operation\b0\fs28 \\The compiled version of this sample was built for a pre-Developer release of Rhapsody (ie OpenStep/Mach 4.2 for Intel + Yellow 1K). Your mileage may vary.\\To use the program, simple launch the SonOfSillyBalls.app and watch your screen fill up with silly balls.  There is a slider to alter the rate at which balls are drawn, and a few menu items to start, stop and clear the display.\\\b\fs36 Building the Code\b0\fs28 \\The code was built for Intel on pre-Developer release of Rhapsody (ie OpenStep/Mach 4.2 for Intel + Yellow 1K). Your mileage may vary.\\The code uses the new graphics APIs that were added to Rhapsody post OpenStep 4.2. Therefore you will not be able to compile it on pre-Rhapsody systems.\\To build the code, launch the ªPB.projectº file inside the ªSonOfSillyBallsº folder. After the project opens, choose ªBuildº from the ªProject Buildº submenu of the ªToolsº menu. When the build finishes, choose ªRunº from the ªLauncherº submenu of the ªToolsº menu to execute the code.\\\b\fs36 Code Structure\b0\fs28 \\The sample contains only one class, SillyBallView.  This is a subclass of NSView that repeatably draws randomly coloured balls at random positions inside its view rectangle.\\\b\fs36 Restrictions\b0\fs28 \\The sample embodies some restrictions that are inherent in its design:\\\pard\tx840\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\tx35840\tx36960\tx38080\tx39200\tx40320\tx41440\tx42560\tx43680\tx44800\tx45920\tx47040\tx48160\tx49280\tx50400\tx51520\tx52640\tx53760\tx54880\tx56000\tx57120\tx58240\tx59360\tx60480\tx61600\tx62720\tx63840\tx64960\tx66080\tx67200\tx68320\tx69440\tx70560\tx71680\tx72800\tx73920\tx75040\tx76160\tx77280\tx78400\tx79520\tx80640\tx81760\tx82880\tx84000\tx85120\tx86240\tx87360\tx88480\tx89600\tx90720\tx91840\tx92960\tx94080\tx95200\tx96320\tx97440\tx98560\tx99680\tx100800\tx101920\tx103040\tx104160\tx105280\tx106400\tx107520\tx108640\tx109760\tx110880\li840\fi-300\ql\qnatural\cf0 ·	Localised strings Ð The strings in Silly Balls are not localisable.  I left this out to make the code simpler and, besides, it would contradict the spirit of this sample: they weren't localisable on the Mac OS version either (-:\\pard\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\tx35840\tx36960\tx38080\tx39200\tx40320\tx41440\tx42560\tx43680\tx44800\tx45920\tx47040\tx48160\tx49280\tx50400\tx51520\tx52640\tx53760\tx54880\tx56000\tx57120\tx58240\tx59360\tx60480\tx61600\tx62720\tx63840\tx64960\tx66080\tx67200\tx68320\tx69440\tx70560\tx71680\tx72800\tx73920\tx75040\tx76160\tx77280\tx78400\tx79520\tx80640\tx81760\tx82880\tx84000\tx85120\tx86240\tx87360\tx88480\tx89600\tx90720\tx91840\tx92960\tx94080\tx95200\tx96320\tx97440\tx98560\tx99680\tx100800\tx101920\tx103040\tx104160\tx105280\tx106400\tx107520\tx108640\tx109760\tx110880\ql\qnatural\cf0 \\pard\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\tx35840\tx36960\tx38080\tx39200\tx40320\tx41440\tx42560\tx43680\tx44800\tx45920\tx47040\tx48160\tx49280\tx50400\tx51520\tx52640\tx53760\tx54880\tx56000\tx57120\tx58240\tx59360\tx60480\tx61600\tx62720\tx63840\tx64960\tx66080\tx67200\tx68320\tx69440\tx70560\tx71680\tx72800\tx73920\tx75040\tx76160\tx77280\tx78400\tx79520\tx80640\tx81760\tx82880\tx84000\tx85120\tx86240\tx87360\tx88480\tx89600\tx90720\tx91840\tx92960\tx94080\tx95200\tx96320\tx97440\tx98560\tx99680\tx100800\tx101920\tx103040\tx104160\tx105280\tx106400\tx107520\tx108640\tx109760\tx110880\ql\qnatural\b\fs36 \cf0 Coding Notes\b0\fs28 \\This section contains notes about why and how the code was written the way it was.\\\pard\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\tx35840\tx36960\tx38080\tx39200\tx40320\tx41440\tx42560\tx43680\tx44800\tx45920\tx47040\tx48160\tx49280\tx50400\tx51520\tx52640\tx53760\tx54880\tx56000\tx57120\tx58240\tx59360\tx60480\tx61600\tx62720\tx63840\tx64960\tx66080\tx67200\tx68320\tx69440\tx70560\tx71680\tx72800\tx73920\tx75040\tx76160\tx77280\tx78400\tx79520\tx80640\tx81760\tx82880\tx84000\tx85120\tx86240\tx87360\tx88480\tx89600\tx90720\tx91840\tx92960\tx94080\tx95200\tx96320\tx97440\tx98560\tx99680\tx100800\tx101920\tx103040\tx104160\tx105280\tx106400\tx107520\tx108640\tx109760\tx110880\ql\qnatural\b \cf0 Monopolising the CPU\b0 \\Silly Balls for Mac OS does not yield the CPU to other processes; it just opens up a window and draws into it until you click the mouse button.  This sort of behaviour is obviously not suitable for the Yellow application environment, so I had to figure out a more appropriate approach.\\The approach I used to was to use a timer to draw the balls.  Using the Foundation class NSTimer, you can create a timer that calls a specific method in a specific object on a periodic basis.  So Silly Balls sets up a timer to call the SillyBallView's drawAnother: method on a periodic basis.  Each time that method is called it draws another silly ball.  When you drag the slider to set the ball redraw period, I invalidate the repeat timer and create a new one with the correct period.\\\b Drawing\b0 \\The Mac OS provides a very direct drawing model suitable for tasks such as Silly Balls.  You just open up a window, set the port to it, and draw into it.  There is very little to get in the way.\\In contrast, the OpenStep does not allow you to just open up a window and draw.  So I created a new subclass of NSView (the base class for all drawing and event handling objects) and used it to draw my silly balls.  Normally you would do the drawing in a custom view by overriding NSView's drawRect: method.  The system calls your drawRect: method when your area of the screen needs updating.  But silly balls are draw dynamically, and Silly Balls does not remember the position of each of the balls that its drawn, so there's no way it could redraw them.  Also, the balls are drawn dynamically, at a furious rate. Overriding drawRect: is not enough for this view.\\Instead of doing my drawing in the drawRect: method, I actually do my drawing in a method that is repeatedly called by a timer (SillyBallView's drawAnother: method).  Because I'm drawing outside of an NSView's drawRect: method, I have to explicitly lock the drawing focus on my view before drawing into it, and unlock the focus afterwards.  You can see the code in drawAnother:.  This is a significant digression from the standard approach to updating a view.\\\b Note:\b0  Locking focus on a view is like calling SetPort on a GrafPort under Mac OS: it sets up the view for you to draw into it.  The drawRect: method is automatically called with the focus locked on the view.\\This all worked, but I found that none of my balls were actually showing up on the screen until I modified some other parts of the window's contents.  I quickly tracked this down to the window backing model.  By default under Yellow, the contents of each window is buffered offscreen so that all drawing goes into the offscreen buffer and is copied on to the screen when all the drawing is done.  This typically results in very clean window updates, but causes problems for a silly application like Silly Balls.\\To get around this, I call the window's flushWindow method immediate after I draw a ball.  This causes the window's backing buffer to me immediately flushed to the screen, and the balls show up in a timely fashion.\\\b Ovals et al\b0 \\Traditionally under OpenStep, anyone doing sophisticated drawing would do using direct Display PostScript calls. So doing something that's very easy on Mac OS, like drawing an oval, required you to know some basic PostScript concepts.\\Rhapsody introduces a new graphics API that allows you to do advanced drawing without requiring Display PostScript.  Son of Silly Balls uses this new API to draw the balls.  To see the code, take a look at SillyBallView's drawRandomBallInside: method.  You can learn more about the graphics API by reading the documentation for the NSBezielPath, NSAffineTransform and NSColor classes.\\Another area that challenged me was drawing text.  The silly balls drawn by this sample have text inside them, but it wasn't easy finding a way to draw a single line of text.  [I considered building an NSTextField, but thought that would be overkill.]  Just as I was about to give up and draw the text using PostScript (which I've since learnt is a very bad idea), I found a category in App Kit's ªNSStringDrawing.hº that adds text drawing methods to the NSString class.\\\pard\tx1120\tx2240\tx3360\tx4480\tx5600\tx6720\tx7840\tx8960\tx10080\tx11200\tx12320\tx13440\tx14560\tx15680\tx16800\tx17920\tx19040\tx20160\tx21280\tx22400\tx23520\tx24640\tx25760\tx26880\tx28000\tx29120\tx30240\tx31360\tx32480\tx33600\tx34720\tx35840\tx36960\tx38080\tx39200\tx40320\tx41440\tx42560\tx43680\tx44800\tx45920\tx47040\tx48160\tx49280\tx50400\tx51520\tx52640\tx53760\tx54880\tx56000\tx57120\tx58240\tx59360\tx60480\tx61600\tx62720\tx63840\tx64960\tx66080\tx67200\tx68320\tx69440\tx70560\tx71680\tx72800\tx73920\tx75040\tx76160\tx77280\tx78400\tx79520\tx80640\tx81760\tx82880\tx84000\tx85120\tx86240\tx87360\tx88480\tx89600\tx90720\tx91840\tx92960\tx94080\tx95200\tx96320\tx97440\tx98560\tx99680\tx100800\tx101920\tx103040\tx104160\tx105280\tx106400\tx107520\tx108640\tx109760\tx110880\ql\qnatural\b\fs36 \cf0 Credits and Version History\b0\fs28 \\Version 1.0d1 was distributed for review inside DTS.\\Version 1.0d2 was distributed for review inside Apple.  It includes some documentation and minor comment changes.\\Version 1.0d3 is the first widely released version.  The window is now buffered instead of non-retained, and flushWindow is used to force the balls to appear immediately. Drawing is no longer done using PostScript but with the new-in-Rhapsody graphics API (NSBezierPath). The documentation changed to cover the above.\\Version 1.0d4 added code to make sure that the main window is active after launch [Radar ID 1683474].\\Version 1.0d5 got some HI modifications (DG).\\Share and Enjoy.\\Quinn ªThe Eskimo!º\Apple Developer Technical Support\Rhapsody Networking and Low-Level Stuff\\8 October 1997\}