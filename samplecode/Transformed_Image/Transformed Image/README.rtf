{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fmodern\fcharset77 Courier;
\f3\froman\fcharset77 Times-Bold;\f4\fswiss\fcharset77 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;}
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\fs24 \cf0 \

\f1\b\fs36 Transformed Image\

\f0\b0\fs24 \
This example shows the effects of a transformed coordinate space on rendering of NSImage objects.  The question of how to do shearing with 
\f1\b NSAffineTransform
\f0\b0  has come up a few times on the mailing lists, so here's an example.\
\
Compared to the "Tinted Image" example, this code shows a few differences in its design approach.  Going through the code by class and categories:\
\

\f1\b NSAffineTransform (Shearing)\

\f0\b0 \
The first thing I did for this example was to add a few conveniences to the NSAffineTransform class.  NSAffineTransform has methods for scaling and rotation, but none specifically for shearing.  However, since it has the 
\f2\fs26 -setTransformStruct:
\f0\fs24  method, it's pretty easy to add the 
\f2\fs26 -shearXBy:yBy:
\f0\fs24  , 
\f2\fs26 -shearX:
\f0\fs24 , and 
\f2\fs26 -shearY:
\f0\fs24  methods.  I also added the 
\f2\fs26 -resetToIdentityMatrix
\f0\fs24  method, to make it convenient to reuse an NSAffineTransform instead of continuously creating and destroying them.\
\

\f1\b TransformedImageView
\f0\b0 \
\
TransformedImageView is a subclass of 
\f1\b NSImageView
\f0\b0 , which is able to apply an Affine transformation to its image before rendering it.  TransformedImageView overrides the -image method it inherits from NSImageView, and returns the transformed version of the image.\
\
The 
\f2\fs26 -drawRect:
\f0\fs24  method is a bit tricky, since I want TransformedImageView to draw its bezel in a normal coordinate space.  What I've done is to set the cell's image to nil, and draw the cell, which gets me an empty bezel.  I then call the private method 
\f2\fs26 -drawImage
\f0\fs24 , which takes care of setting up the transformed coordinate space and drawing the image.\
\
One other method in this class that's interesting is 
\f2\fs26 -transformedImage
\f0\fs24 , which creates a new 
\f1\b NSImage
\f0\b0  instance, and draws the tranformed image into it.  When the drawing focus is locked on an NSImage instead of an NSView, some workarounds are necesary since some of the niceties of NSView are missing.  I can't just set center the origin by manipulating the bounds rectangle, as I can in an NSView, so I make the single CoreGraphics call to 
\f2\fs26 CGContextTranslateCTM()
\f3\b\fs28 .  
\f0\b0\fs24 In this one situation, It's necessary to do some rectangle math manually.\
\

\f1\b NSView (SomeGeometryExtensions)\

\f0\b0 \
This category provides some methods for manipulating rectangles:  
\f2\fs26 -centerRect:onPoint:
\f0\fs24 , 
\f2\fs26 -centerOriginInBounds
\f0\fs24 , 
\f2\fs26 -centerOriginInFrame:
\f0\fs24 , and 
\f2\fs26 -centerOriginInRect:
\f0\fs24 .  \
\

\f1\b TransformedImageController
\f0\b0 \
\
This class handles the input from the sliders, the menus, etc.  Originally, I had all of the code for manipulating the transform in the TransformedImageView class, but I refactored the code to simplify TransformedImageView.  The significant method here is 
\f2\fs26 -fixMatrix
\f0\fs24 , which applies the rotation, scaling, and shear factors from the controller's ivars to the NSAffineTranform instance.\
\
You might also be interested in the methods that deal with opening and saving images.  They are 
\f2\fs26 -openImageFile:
\f0\fs24 , 
\f2\fs26 -saveDocument:
\f0\fs24 ,
\f3\b\fs28  
\f0\b0\fs24 and the panel delegate methods
\f3\b\fs28  
\f2\b0\fs26 -openPanelDidEnd:returnCode:contextInfo:
\f0\fs24 , and
\f3\b\fs28  
\f2\b0\fs26 -savePanelDidEnd:returnCode:contextInfo:
\f0\fs24 \
\

\f1\b NSImage (Gradients)\

\f0\b0 \
This category demonstrates how to directly access the pixel data of an 
\f1\b NSBitmapImageRep
\f0\b0 .  The 
\f2\fs26 while() 
\f0\fs24 loops step through the memory obtained by sending the 
\f2\fs26 -bitmapData
\f0\fs24  message to 
\f4\i bitmapRep, 
\f0\i0 and sets the values of the components.  Try out different values in the assignments here.\
\
}