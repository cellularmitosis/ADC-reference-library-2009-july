<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Creating and Managing Trackers</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=3575"> </A>Creating and Managing Trackers</H1><P CLASS="T1.Text1"><A NAME="pgfId=3580"> </A><A NAME="marker=3576"> </A>QuickDraw&nbsp;3D provides routines that you can use to create and manipulate tracker objects.</P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3582"> </A><A NAME="27411"> </A>Q3Tracker_New</H2><P CLASS="T1.Text1"><A NAME="pgfId=3584"> </A><A NAME="marker=3583"> </A><A NAME="marker=1080"> </A>You can use the <TT CLASS="cv">Q3Tracker_New</TT> function to create a new tracker.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8267"> </A>TQ3TrackerObject Q3Tracker_New (TQ3TrackerNotifyFunc notifyFunc);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8269"> </A><TT CLASS="cv">notifyFunc</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3586"> </A>A pointer to a tracker notify function. See <A HREF="qd3dpointdevmgr.f.htm#17290" CLASS="XRef">[link]</A> for information on writing a tracker notify function.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3590"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3591"> </A>The <TT CLASS="cv">Q3Tracker_New</TT> function returns, as its function result, a reference to a new tracker object. The <TT CLASS="cv">notifyFunc</TT> parameter specifies the tracker's notify function, which is called whenever the position or orientation of the tracker changes. If you want to poll for such changes instead of being notified, set <TT CLASS="cv">notifyFunc</TT> to <TT CLASS="cv">NULL</TT>. The new tracker is active and has both its position threshold and its orientation threshold set to 0. If <TT CLASS="cv">Q3Tracker_New</TT> cannot create a new tracker, it returns <TT CLASS="cv">NULL</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3592"> </A>Q3Tracker_GetNotifyThresholds</H2><P CLASS="T1.Text1"><A NAME="pgfId=3594"> </A><A NAME="marker=3593"> </A><A NAME="marker=1092"> </A>You can use the <TT CLASS="cv">Q3Tracker_GetNotifyThresholds</TT> function to get the current notify thresholds of a tracker.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8280"> </A>TQ3Status Q3Tracker_GetNotifyThresholds (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3TrackerObject trackerObject, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float *positionThresh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float *orientationThresh);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8282"> </A><TT CLASS="cv">trackerObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3596"> </A>A tracker object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8291"> </A><TT CLASS="cv">positionThresh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3597"> </A> On exit, the current position threshold of the specified tracker.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8301"> </A><TT CLASS="cv">orientationThresh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3598"> </A> On exit, the current orientation threshold (in radians) of the specified tracker.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3599"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3600"> </A>The <TT CLASS="cv">Q3Tracker_GetNotifyThresholds</TT> function returns, in the <TT CLASS="cv">positionThresh</TT> and <TT CLASS="cv">orientationThresh</TT> parameters, the current position and orientation thresholds of the tracker specified by the <TT CLASS="cv">trackerObject</TT> parameter. These thresholds determine whether or not a change in position or orientation is large enough to cause QuickDraw&nbsp;3D to call the tracker's notify function. Both thresholds for a new tracker are set to 0.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3604"> </A>Q3Tracker_SetNotifyThresholds</H2><P CLASS="T1.Text1"><A NAME="pgfId=3606"> </A><A NAME="marker=3605"> </A><A NAME="marker=1106"> </A>You can use the <TT CLASS="cv">Q3Tracker_SetNotifyThresholds</TT> function to set the notify thresholds of a tracker.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8313"> </A>TQ3Status Q3Tracker_SetNotifyThresholds (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3TrackerObject trackerObject, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float positionThresh, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float orientationThresh);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8315"> </A><TT CLASS="cv">trackerObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3608"> </A>A tracker object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8324"> </A><TT CLASS="cv">positionThresh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3609"> </A> The desired position threshold of the specified tracker.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8334"> </A><TT CLASS="cv">orientationThresh</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3610"> </A> The desired orientation threshold (in radians) of the specified tracker.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3611"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3612"> </A>The <TT CLASS="cv">Q3Tracker_SetNotifyThresholds</TT> function sets the position and orientation thresholds of the tracker specified by the <TT CLASS="cv">trackerObject</TT> parameter to the values in the <TT CLASS="cv">positionThresh</TT> and <TT CLASS="cv">orientationThresh</TT> parameters.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3613"> </A>Q3Tracker_GetActivation</H2><P CLASS="T1.Text1"><A NAME="pgfId=3615"> </A><A NAME="marker=3614"> </A><A NAME="marker=1117"> </A>You can use the <TT CLASS="cv">Q3Tracker_GetActivation</TT> function to get the activation state of a tracker.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8346"> </A>TQ3Status Q3Tracker_GetActivation (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3TrackerObject trackerObject, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean *active);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8348"> </A><TT CLASS="cv">trackerObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3617"> </A>A tracker object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8357"> </A><TT CLASS="cv">active</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3618"> </A>On exit, a Boolean value that indicates whether the specified tracker is active (<TT CLASS="cv">kQ3True</TT>) or inactive (<TT CLASS="cv">kQ3False</TT>).</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3619"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3620"> </A>The <TT CLASS="cv">Q3Tracker_GetActivation</TT> function returns, in the <TT CLASS="cv">active</TT> parameter, a Boolean value that indicates whether the tracker specified by the <TT CLASS="cv">trackerObject</TT> parameter is currently active or inactive.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3621"> </A>Q3Tracker_SetActivation</H2><P CLASS="T1.Text1"><A NAME="pgfId=3623"> </A><A NAME="marker=3622"> </A><A NAME="marker=1127"> </A>You can use the <TT CLASS="cv">Q3Tracker_SetActivation</TT> function to set the activation state of a tracker.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8368"> </A>TQ3Status Q3Tracker_SetActivation (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3TrackerObject trackerObject, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean active);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8370"> </A><TT CLASS="cv">trackerObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3625"> </A>A tracker object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8379"> </A><TT CLASS="cv">active</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3626"> </A>A Boolean value that indicates whether the specified tracker is to be made active (<TT CLASS="cv">kQ3True</TT>) or inactive (<TT CLASS="cv">kQ3False</TT>).</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3627"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3628"> </A>The <TT CLASS="cv">Q3Tracker_SetActivation</TT> function sets the activation state of the tracker specified by the <TT CLASS="cv">trackerObject</TT> parameter to the value specified in the <TT CLASS="cv">active</TT> parameter. If the activation state of a tracker is changed, the serial number of the tracker is incremented.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3629"> </A>Q3Tracker_GetEventCoordinates</H2><P CLASS="T1.Text1"><A NAME="pgfId=3631"> </A><A NAME="marker=3630"> </A><A NAME="marker=1137"> </A>You can use the <TT CLASS="cv">Q3Tracker_GetEventCoordinates</TT> function to get the settings (coordinates) of a tracker that were recorded at a particular moment (typically, the time of a button click) by a previous call to <TT CLASS="cv">Q3Tracker_SetEventCoordinates</TT>.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8390"> </A>TQ3Status Q3Tracker_GetEventCoordinates (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3TrackerObject trackerObject, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long timeStamp, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *buttons, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Point3D *position, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *orientation);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8392"> </A><TT CLASS="cv">trackerObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3633"> </A>A tracker object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8401"> </A><TT CLASS="cv">timeStamp</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3634"> </A>A time stamp.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8410"> </A><TT CLASS="cv">buttons</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3635"> </A>On exit, the button state value of the specified tracker at the specified time.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8419"> </A><TT CLASS="cv">position</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3636"> </A>On exit, the position of the specified tracker at the specified time. If the tracker is absolute, this parameter contains the absolute coordinates of the tracker. If the tracker is relative, this parameter contains the change in position since the last call to <TT CLASS="cv">Q3Tracker_GetEventCoordinates</TT>.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8428"> </A><TT CLASS="cv">orientation</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3637"> </A>On exit, the orientation of the specified tracker at the specified time.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3638"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3639"> </A>The <TT CLASS="cv">Q3Tracker_GetEventCoordinates</TT> function returns, in the <TT CLASS="cv">buttons</TT>, <TT CLASS="cv">position</TT>, and <TT CLASS="cv">orientation</TT> parameters, the button state value, position, and orientation of the tracker specified by the <TT CLASS="cv">trackerObject</TT> parameter, at the time specified by the <TT CLASS="cv">timeStamp</TT> parameter. You can set any of the <TT CLASS="cv">buttons</TT>, <TT CLASS="cv">position</TT>, and <TT CLASS="cv">orientation</TT> parameters to <TT CLASS="cv">NULL</TT> to prevent <TT CLASS="cv">Q3Tracker_GetEventCoordinates</TT> from returning a value in that parameter.</P><P CLASS="T1.Text1"><A NAME="pgfId=3640"> </A><TT CLASS="cv">Q3Tracker_GetEventCoordinates</TT> selects the set of event coordinates whose time stamp is closest to the value specified in the <TT CLASS="cv">timeStamp</TT> parameter. Any event coordinate sets that are older are discarded from the tracker's ring buffer. If the ring buffer is empty, <TT CLASS="cv">Q3Tracker_GetEventCoordinates</TT> returns <TT CLASS="cv">kQ3Failure</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3641"> </A>Q3Tracker_SetEventCoordinates</H2><P CLASS="T1.Text1"><A NAME="pgfId=3643"> </A><A NAME="marker=3642"> </A><A NAME="marker=1151"> </A>You can use the <TT CLASS="cv">Q3Tracker_SetEventCoordinates</TT> function to record the settings (coordinates) of a tracker at a particular time.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8439"> </A>TQ3Status Q3Tracker_SetEventCoordinates (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3TrackerObject trackerObject, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long timeStamp, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long buttons, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point3D *position, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *orientation);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8441"> </A><TT CLASS="cv">trackerObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3645"> </A>A tracker object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8450"> </A><TT CLASS="cv">timeStamp</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3646"> </A>A time stamp.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8459"> </A><TT CLASS="cv">buttons</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3647"> </A>The button state value of the specified tracker, or <TT CLASS="cv">NULL</TT>.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8468"> </A><TT CLASS="cv">position</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3648"> </A>The position of the specified tracker, or <TT CLASS="cv">NULL</TT>.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8477"> </A><TT CLASS="cv">orientation</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3649"> </A>The orientation (in radians) of the specified tracker, or <TT CLASS="cv">NULL</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3650"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3651"> </A>The <TT CLASS="cv">Q3Tracker_SetEventCoordinates</TT> function places into the ring buffer of event coordinates for the tracker specified by the <TT CLASS="cv">trackerObject</TT> parameter the values specified in the <TT CLASS="cv">buttons</TT>, <TT CLASS="cv">position</TT>, and <TT CLASS="cv">orientation</TT> parameters. The event coordinates are marked with the time stamp specified by the <TT CLASS="cv">timeStamp</TT> parameter. If the tracker's ring buffer is full, the oldest item in the buffer is discarded.</P><P CLASS="Note"><A NAME="pgfId=3652"> </A>A tracker's ring buffer can contain up to 10 items. Time stamps of items in the buffer increase from oldest to newest. </P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3656"> </A>Q3Tracker_GetButtons</H2><P CLASS="T1.Text1"><A NAME="pgfId=3658"> </A><A NAME="marker=3657"> </A><A NAME="marker=1168"> </A>You can use the <TT CLASS="cv">Q3Tracker_GetButtons</TT> function to get the button state of a tracker.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8488"> </A>TQ3Status Q3Tracker_GetButtons (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3TrackerObject trackerObject, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *buttons);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8490"> </A><TT CLASS="cv">trackerObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3660"> </A>A tracker object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8499"> </A><TT CLASS="cv">buttons</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3661"> </A>On exit, the current button state value of the specified tracker.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3662"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3663"> </A>The <TT CLASS="cv">Q3Tracker_GetButtons</TT> function returns, in the <TT CLASS="cv">buttons</TT> parameter, the current button state of the tracker specified by the <TT CLASS="cv">trackerObject</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3664"> </A>Q3Tracker_ChangeButtons</H2><P CLASS="T1.Text1"><A NAME="pgfId=3666"> </A><A NAME="marker=3665"> </A><A NAME="marker=1178"> </A>You can use the <TT CLASS="cv">Q3Tracker_ChangeButtons</TT> function to change the button state of a tracker.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8510"> </A>TQ3Status Q3Tracker_ChangeButtons (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3TrackerObject trackerObject, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long buttons, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long buttonMask);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8512"> </A><TT CLASS="cv">trackerObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3668"> </A>A tracker object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8521"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3669"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8530"> </A><TT CLASS="cv">buttons</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3670"> </A>The desired button state value of the specified tracker.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8539"> </A><TT CLASS="cv">buttonMask</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3671"> </A>A button mask.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3672"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3673"> </A>The <TT CLASS="cv">Q3Tracker_ChangeButtons</TT> function sets the button state of the tracker specified by the <TT CLASS="cv">trackerObject</TT> parameter to the value specified in the <TT CLASS="cv">buttons</TT> parameter. The <TT CLASS="cv">buttonMask</TT> parameter specifies a button mask for the tracker. A bit in the mask should be set if the corresponding button has changed since the last call to <TT CLASS="cv">Q3Tracker_ChangeButtons</TT>.</P><P CLASS="T1.Text1"><A NAME="pgfId=3674"> </A>The notify function of the specified tracker object may be called when the <TT CLASS="cv">Q3Tracker_ChangeButtons</TT> function is executed. If, however, the tracker is inactive when <TT CLASS="cv">Q3Tracker_ChangeButtons</TT> is called, the tracker's activation count for the buttons is updated but the notify function is not called.</P><P CLASS="Note"><A NAME="pgfId=3675"> </A>The <TT CLASS="cv">controllerRef</TT> parameter is used only by the tracker's notify function. </P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3679"> </A>Q3Tracker_GetPosition</H2><P CLASS="T1.Text1"><A NAME="pgfId=3681"> </A><A NAME="marker=3680"> </A><A NAME="marker=1195"> </A>You can use the <TT CLASS="cv">Q3Tracker_GetPosition</TT> function to get the position of a tracker.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8550"> </A>TQ3Status Q3Tracker_GetPosition (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3TrackerObject trackerObject, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Point3D *position, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Vector3D *delta, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean *changed, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *serialNumber);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8552"> </A><TT CLASS="cv">trackerObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3683"> </A>A tracker object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8561"> </A><TT CLASS="cv">position</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3684"> </A>On exit, the current position of the specified tracker.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8570"> </A><TT CLASS="cv">delta</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3685"> </A>On exit, the change in position since the last call to <TT CLASS="cv">Q3Tracker_GetPosition</TT>.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8579"> </A><TT CLASS="cv">changed</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3686"> </A>On exit, a Boolean value that indicates whether the <TT CLASS="cv">position</TT> or <TT CLASS="cv">delta</TT> parameter was changed (<TT CLASS="cv">kQ3True</TT>) or not (<TT CLASS="cv">kQ3False</TT>).</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8588"> </A><TT CLASS="cv">serialNumber</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3687"> </A>On entry, a tracker serial number, or <TT CLASS="cv">NULL</TT>. On output, the current tracker serial number.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3688"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3689"> </A>The <TT CLASS="cv">Q3Tracker_GetPosition</TT> function returns, in the <TT CLASS="cv">position</TT> parameter, the current position of the tracker specified by the <TT CLASS="cv">trackerObject</TT> parameter. In addition, it can return, in the <TT CLASS="cv">delta</TT> parameter, the relative change in position since the previous call to <TT CLASS="cv">Q3Tracker_GetPosition</TT>.</P><P CLASS="T1.Text1"><A NAME="pgfId=2622"> </A>On entry, if the value of <TT CLASS="cv">delta</TT> is <TT CLASS="cv">NULL</TT>, the relative contribution is combined into the reported position. If the value of <TT CLASS="cv">delta</TT> is not <TT CLASS="cv">NULL</TT>, then <TT CLASS="cv">delta</TT> is set to the relative motion that has been accumulated since the previous call to <TT CLASS="cv">Q3Tracker_GetPosition</TT>. In either case, the position accumulator is set to (0,&nbsp;0,&nbsp;0) by this function.</P><P CLASS="T1.Text1"><A NAME="pgfId=3690"> </A>If the value of the <TT CLASS="cv">serialNumber</TT> parameter is <TT CLASS="cv">NULL</TT>, <TT CLASS="cv">Q3Tracker_GetPosition</TT> fills in the <TT CLASS="cv">position</TT> and <TT CLASS="cv">delta</TT> parameters and returns the value <TT CLASS="cv">kQ3True</TT> in the <TT CLASS="cv">changed</TT> parameter. Otherwise, the value specified in the <TT CLASS="cv">serialNumber</TT> parameter is compared with the tracker's current serial number. If the two serial numbers are identical, <TT CLASS="cv">Q3Tracker_GetPosition</TT> leaves the two coordinate parameters and the <TT CLASS="cv">serialNumber</TT> parameter unchanged and returns the value <TT CLASS="cv">kQ3False</TT> in the <TT CLASS="cv">changed</TT> parameter. If the two serial number differ, <TT CLASS="cv">Q3Tracker_GetPosition</TT> fills in the two coordinate parameters, updates the <TT CLASS="cv">serialNumber</TT> parameter, and returns the value <TT CLASS="cv">kQ3True</TT> in the <TT CLASS="cv">changed</TT> parameter.</P><P CLASS="T1.Text1"><A NAME="pgfId=3691"> </A>If the specified tracker is inactive, then the <TT CLASS="cv">position</TT> parameter is set to the point (0,&nbsp;0,&nbsp;0), the <TT CLASS="cv">delta</TT> parameter is set to (0,&nbsp;0,&nbsp;0) if it is non-<TT CLASS="cv">NULL</TT>, and the <TT CLASS="cv">changed</TT> parameter is set to <TT CLASS="cv">kQ3False</TT> if it is non-<TT CLASS="cv">NULL</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3692"> </A>Q3Tracker_SetPosition</H2><P CLASS="T1.Text1"><A NAME="pgfId=3694"> </A><A NAME="marker=3693"> </A><A NAME="marker=1210"> </A>You can use the <TT CLASS="cv">Q3Tracker_SetPosition</TT> function to set the position of a tracker.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8599"> </A>TQ3Status Q3Tracker_SetPosition (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3TrackerObject trackerObject, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point3D *position);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8601"> </A><TT CLASS="cv">trackerObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3696"> </A>A tracker object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8610"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3697"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8619"> </A><TT CLASS="cv">position</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3698"> </A>The desired position of the specified tracker.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3699"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3700"> </A>The <TT CLASS="cv">Q3Tracker_SetPosition</TT> function sets the position of the tracker specified by the <TT CLASS="cv">trackerObject</TT> and <TT CLASS="cv">controllerRef</TT> parameters to the value specified in the <TT CLASS="cv">position</TT> parameter. If the specified tracker is inactive, <TT CLASS="cv">Q3Tracker_SetPosition</TT> has no effect.</P><P CLASS="Note"><A NAME="pgfId=3701"> </A>Calling <TT CLASS="cv">Q3Tracker_SetPosition</TT> might cause the notify function of the tracker to be called. </P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3705"> </A>Q3Tracker_MovePosition</H2><P CLASS="T1.Text1"><A NAME="pgfId=3707"> </A><A NAME="marker=3706"> </A><A NAME="marker=1225"> </A>You can use the <TT CLASS="cv">Q3Tracker_MovePosition</TT> function to move the position of a tracker relative to its current position.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8630"> </A>TQ3Status Q3Tracker_MovePosition (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3TrackerObject trackerObject, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Vector3D *delta);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8632"> </A><TT CLASS="cv">trackerObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3709"> </A>A tracker object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8641"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3710"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8650"> </A><TT CLASS="cv">delta</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3711"> </A>The desired change in position of the specified tracker.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3712"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3713"> </A>The <TT CLASS="cv">Q3Tracker_MovePosition</TT> function adds the value specified by the <TT CLASS="cv">delta</TT> parameter to the position of the tracker specified by the <TT CLASS="cv">trackerObject</TT> and <TT CLASS="cv">controllerRef</TT> parameters. If the specified tracker is inactive, <TT CLASS="cv">Q3Tracker_MovePosition</TT> has no effect.</P><P CLASS="Note"><A NAME="pgfId=3714"> </A>Calling <TT CLASS="cv">Q3Tracker_MovePosition</TT> might cause the notify function of the tracker to be called. </P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3718"> </A>Q3Tracker_GetOrientation</H2><P CLASS="T1.Text1"><A NAME="pgfId=3720"> </A><A NAME="marker=3719"> </A><A NAME="marker=1240"> </A>You can use the <TT CLASS="cv">Q3Tracker_GetOrientation</TT> function to get the current orientation of a tracker.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8661"> </A>TQ3Status Q3Tracker_GetOrientation (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3TrackerObject trackerObject, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *orientation, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *delta, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean *changed, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *serialNumber);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8663"> </A><TT CLASS="cv">trackerObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3722"> </A>A tracker object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8672"> </A><TT CLASS="cv">orientation</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3723"> </A>On exit, the current orientation of the specified tracker.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8681"> </A><TT CLASS="cv">delta</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3724"> </A>On exit, the change in orientation since the last call to <TT CLASS="cv">Q3Tracker_GetOrientation</TT>.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8690"> </A><TT CLASS="cv">changed</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3725"> </A>On exit, a Boolean value that indicates whether the <TT CLASS="cv">orientation</TT> or <TT CLASS="cv">delta</TT> parameters was changed (<TT CLASS="cv">kQ3True</TT>) or not (<TT CLASS="cv">kQ3False</TT>).</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8699"> </A><TT CLASS="cv">serialNumber</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3726"> </A>On entry, a tracker serial number, or <TT CLASS="cv">NULL</TT>. On output, the current tracker serial number.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3727"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3728"> </A>The <TT CLASS="cv">Q3Tracker_GetOrientation</TT> function returns, in the <TT CLASS="cv">orientation</TT> parameter, the current orientation of the tracker specified by the <TT CLASS="cv">trackerObject</TT> parameter. In addition, it may return, in the <TT CLASS="cv">delta</TT> parameter, the relative change in orientation since the previous call to <TT CLASS="cv">Q3Tracker_GetOrientation</TT>.</P><P CLASS="T1.Text1"><A NAME="pgfId=2635"> </A>On entry, if the value of <TT CLASS="cv">delta</TT> is <TT CLASS="cv">NULL</TT>, the relative contribution is combined into the reported orientation. If the value of <TT CLASS="cv">delta</TT> is not <TT CLASS="cv">NULL</TT>, then <TT CLASS="cv">delta</TT> is set to the relative motion that has been accumulated since the previous call to <TT CLASS="cv">Q3Tracker_GetOrientation</TT>. In either case, the orientation accumulator is set to identity by this function.</P><P CLASS="T1.Text1"><A NAME="pgfId=3729"> </A>If the value of the <TT CLASS="cv">serialNumber</TT> parameter is <TT CLASS="cv">NULL</TT>, <TT CLASS="cv">Q3Tracker_GetOrientation</TT> fills in the <TT CLASS="cv">orientation</TT> and <TT CLASS="cv">delta</TT> parameters and returns the value <TT CLASS="cv">kQ3True</TT> in the <TT CLASS="cv">changed</TT> parameter. Otherwise, the value specified in the <TT CLASS="cv">serialNumber</TT> parameter is compared with the tracker's current serial number. If the two serial numbers are identical, <TT CLASS="cv">Q3Tracker_GetOrientation</TT> leaves the two coordinate parameters and the <TT CLASS="cv">serialNumber</TT> parameter unchanged and returns the value <TT CLASS="cv">kQ3False</TT> in the <TT CLASS="cv">changed</TT> parameter. If the two serial number differ, <TT CLASS="cv">Q3Tracker_GetOrientation</TT> fills in the two coordinate parameters, updates the <TT CLASS="cv">serialNumber</TT> parameter, and returns the value <TT CLASS="cv">kQ3True</TT> in the <TT CLASS="cv">changed</TT> parameter.</P><P CLASS="T1.Text1"><A NAME="pgfId=3730"> </A>If the specified tracker is inactive, then the <TT CLASS="cv">orientation</TT> parameter is set to identity, the <TT CLASS="cv">delta</TT> parameter is set to identity if it is non-<TT CLASS="cv">NULL</TT>, and the <TT CLASS="cv">changed</TT> parameter is set to <TT CLASS="cv">kQ3False</TT> if it is non-<TT CLASS="cv">NULL</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3731"> </A>Q3Tracker_SetOrientation</H2><P CLASS="T1.Text1"><A NAME="pgfId=3733"> </A><A NAME="marker=3732"> </A><A NAME="marker=1255"> </A>You can use the <TT CLASS="cv">Q3Tracker_SetOrientation</TT> function to set the orientation of a tracker.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8710"> </A>TQ3Status Q3Tracker_SetOrientation (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3TrackerObject trackerObject, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *orientation);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8712"> </A><TT CLASS="cv">trackerObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3735"> </A>A tracker object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8721"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3736"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8730"> </A><TT CLASS="cv">orientation</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3737"> </A>The desired orientation (in radians) of the specified tracker, or <TT CLASS="cv">NULL</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3738"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3739"> </A>The <TT CLASS="cv">Q3Tracker_SetOrientation</TT> function sets the orientation of the tracker specified by the <TT CLASS="cv">trackerObject</TT> and <TT CLASS="cv">controllerRef</TT> parameters to the value specified in the <TT CLASS="cv">orientation</TT> parameter. If the specified tracker is inactive, <TT CLASS="cv">Q3Tracker_SetOrientation</TT> has no effect.</P><P CLASS="Note"><A NAME="pgfId=3740"> </A>Calling <TT CLASS="cv">Q3Tracker_SetOrientation</TT> might cause the notify function of the tracker to be called. </P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3744"> </A>Q3Tracker_MoveOrientation</H2><P CLASS="T1.Text1"><A NAME="pgfId=3746"> </A><A NAME="marker=3745"> </A><A NAME="marker=1270"> </A>You can use the <TT CLASS="cv">Q3Tracker_MoveOrientation</TT> function to set the orientation of a tracker relative to its current orientation.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8741"> </A>TQ3Status Q3Tracker_MoveOrientation (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3TrackerObject trackerObject, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *delta);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8743"> </A><TT CLASS="cv">trackerObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3748"> </A>A tracker object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8752"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3749"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8761"> </A><TT CLASS="cv">delta</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3750"> </A>The desired change in orientation of the specified tracker.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3751"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3752"> </A>The <TT CLASS="cv">Q3Tracker_MoveOrientation</TT> function adds the value specified by the <TT CLASS="cv">delta</TT> parameter to the orientation of the tracker specified by the <TT CLASS="cv">trackerObject</TT> and <TT CLASS="cv">controllerRef</TT> parameters. If the specified tracker is inactive, <TT CLASS="cv">Q3Tracker_MoveOrientation</TT> has no effect.</P><P CLASS="Note"><A NAME="pgfId=3753"> </A>Calling <TT CLASS="cv">Q3Tracker_MoveOrientation</TT> might cause the notify function of the tracker to be called. <A NAME="marker=3757"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>