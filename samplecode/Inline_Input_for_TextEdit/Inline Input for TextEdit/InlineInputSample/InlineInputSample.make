##	File:		InlineInputSample.make##	Contains:	make file for InlineInputSample variants##	Copyright:	© 1989-1994 Apple Computer, Inc. All rights reserved.##	Build Information#	-----------------#	This version of InlineInputSample has been built with a beta#	version of the Macintosh on RISC SDK. You may have a somewhat#	different version of the SDK, or a different environment which may#	or may not support code generation for PowerPC. These notes are#	intended to help you build InlineInputSample anyway.##	InlineInputSample relies on the Universal C interfaces, which support#	compilation for both 68K and PowerPC, and has been successfully built#	with the Universal interfaces of 2/4/94.#	It also needs the universal TSMTE.h interface file which you find in#	the TSMTE Interfaces folder; please move it into your PPCCIncludes#	folder.##	This makefile assumes that you have set the Shell variable#	PPCCIncludes to the name of the folder containing the interfaces.#	The version of the SDK that I'm using provides a UserStartup¥PPC which#	does this automatically.##	This makefile lets you build three applications in two versions each.#	The applications are:#		- InlineInputSample, which supports inline input using TSMTE#		- SimpleSample, which doesn't#		- AppleEventsSample, which adds Apple events to SimpleSample as an#			intermediate step towards supporting inline input#	The versions are:#		- 68K, which runs native on 68K Macs and emulated on PowerPC Macs#		- Fat, which runs native on either platform#	If you have the Macintosh on RISC SDK, you can execute#		Make -f InlineInputSample.make All#	to get the build commands for the fat versions. Otherwise, execute#		Make -f InlineInputSample.make All68K#	to get the build instructions for the 68K versions of all applications.		Obj = :Objects:GenericObjs68K = ¶			{Obj}InlineInputSample.a.o ¶			"{Libraries}"Runtime.o ¶			"{Libraries}"Interface.oGenericObjsPPC = ¶			"{PPCLibraries}"StdCLib.xcoff ¶			"{PPCLibraries}"MathLib.xcoff ¶			"{PPCLibraries}"StdCRuntime.o ¶			"{PPCLibraries}"PPCCRuntime.o ¶			"{PPCLibraries}"InterfaceLib.xcoffLibEquates = -l InterfaceLib.xcoff=InterfaceLib -l StdCLib.xcoff=StdCLib -l MathLib.xcoff=MathLibAll Ä InlineInputSample AppleEventsSample SimpleSampleAll68K Ä InlineInputSample.68K AppleEventsSample.68K SimpleSample.68K.68KCode Ä .c.o	Link -o {targDir}{default}.68KCode {depDir}{default}.c.o {GenericObjs68K}{Obj}SimpleSample.68KCode {Obj}AppleEventsSample.68KCode {Obj}InlineInputSample.68KCode Ä {Obj}InlineInputSample.a.o.PPCCode Ä .o	PPCLink -o {targDir}{default}.xcoff {depDir}{default}.o {GenericObjsPPC}	MakePef -o {targDir}{default}.PPCCode {depDir}{default}.xcoff {LibEquates}{Obj} Ä {Obj}SimpleSample.68K Ä {Obj}SimpleSample.68KCode InlineInputSample.r InlineInputSample.h	Duplicate -r -y {Obj}SimpleSample.68KCode {Targ}	Rez -d qAppleEvents=0 -d qInline=0 -d qPowerPC=0 -rd -append -o {Targ} InlineInputSample.r	SetFile {Targ} -t APPL -c 'issa' -a BiSimpleSample Ä {Obj}SimpleSample.68KCode {Obj}SimpleSample.PPCCode InlineInputSample.r InlineInputSample.h	Duplicate -d -y {Obj}SimpleSample.PPCCode {Targ}	Duplicate -r -y {Obj}SimpleSample.68KCode {Targ}	Rez -d qAppleEvents=0 -d qInline=0 -d qPowerPC=1 -rd -append -o {Targ} InlineInputSample.r	SetFile {Targ} -t APPL -c 'issa' -a BiAppleEventsSample.68K Ä {Obj}AppleEventsSample.68KCode InlineInputSample.r InlineInputSample.h	Duplicate -r -y {Obj}AppleEventsSample.68KCode {Targ}	Rez -d qAppleEvents=1 -d qInline=0 -d qPowerPC=0 -rd -append -o {Targ} InlineInputSample.r	SetFile {Targ} -t APPL -c 'issa' -a BiAppleEventsSample Ä {Obj}AppleEventsSample.68KCode {Obj}AppleEventsSample.PPCCode InlineInputSample.r InlineInputSample.h	Duplicate -d -y {Obj}AppleEventsSample.PPCCode {Targ}	Duplicate -r -y {Obj}AppleEventsSample.68KCode {Targ}	Rez -d qAppleEvents=1 -d qInline=0 -d qPowerPC=1 -rd -append -o {Targ} InlineInputSample.r	SetFile {Targ} -t APPL -c 'issa' -a BiInlineInputSample.68K Ä {Obj}InlineInputSample.68KCode InlineInputSample.r InlineInputSample.h	Duplicate -r -y {Obj}InlineInputSample.68KCode {Targ}	Rez -d qAppleEvents=1 -d qInline=1 -d qPowerPC=0 -rd -append -o {Targ} InlineInputSample.r	SetFile {Targ} -t APPL -c 'issa' -a BiInlineInputSample Ä {Obj}InlineInputSample.68KCode {Obj}InlineInputSample.PPCCode InlineInputSample.r InlineInputSample.h	Duplicate -d -y {Obj}InlineInputSample.PPCCode {Targ}	Duplicate -r -y {Obj}InlineInputSample.68KCode {Targ}	Rez -d qAppleEvents=1 -d qInline=1 -d qPowerPC=1 -rd -append -o {Targ} InlineInputSample.r	SetFile {Targ} -t APPL -c 'issa' -a Bi{Obj}SimpleSample.c.o ÄÄ InlineInputSample.c InlineInputSample.h	C -d qAppleEvents=0 -d qInline=0 -r InlineInputSample.c -o {targ} -i {PPCCIncludes}{Obj}SimpleSample.o Ä InlineInputSample.c InlineInputSample.h	PPCC -d qAppleEvents=0 -d qInline=0 -appleext on InlineInputSample.c -o {targ}{Obj}AppleEventsSample.c.o ÄÄ InlineInputSample.c InlineInputSample.h	C -d qAppleEvents=1 -d qInline=0 -r InlineInputSample.c -o {targ} -i {PPCCIncludes}{Obj}AppleEventsSample.o Ä InlineInputSample.c InlineInputSample.h	PPCC -d qAppleEvents=1 -d qInline=0 -appleext on InlineInputSample.c -o {targ}{Obj}InlineInputSample.c.o ÄÄ InlineInputSample.c InlineInputSample.h	C -d qAppleEvents=1 -d qInline=1 -r InlineInputSample.c -o {targ} -i {PPCCIncludes}{Obj}InlineInputSample.o Ä InlineInputSample.c InlineInputSample.h	PPCC -d qAppleEvents=1 -d qInline=1 -appleext on InlineInputSample.c -o {targ}{Obj}InlineInputSample.a.o Ä InlineInputSample.a	Asm InlineInputSample.a -o {Obj}InlineInputSample.a.o