{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf350
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww16520\viewh16060\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\b\fs24 \cf0 \ul \ulc0 MyFirstJNIProject (WWDC2005 Demo)
\f1\b0 \ulnone \
\
This sample is a modification of the standard Java Swing Application template\
provided by Xcode.  Instead of drawing a string from the included resource\
bundle, it instead paints the current user's name, obtained from the Address\
Book framework via the JNI.\
\
The style of this sample differs slightly from the JNIExample found on \
the ADC Reference Library in that it puts all code in a single jnilib, rather\
than placing the system code into a dylib that is loaded separately.  There are\
no real benefits to one approach versus the other aside from organizational\
preference.
\f0\b \ul \
\

\f1\b0 \ulnone Steps to build this project from scratch are listed below; for a more complete \
explanation please read Building a JNI Universal Application With Xcode:\
\
http://developer.apple.com/java/jniuniversal.html
\f0\b \ul \
\
How to Build this Project From Scratch in Xcode 2.0
\f1\b0 \ulnone \
\

\f0\b 1) Create a Java Swing Application Project
\f1\b0 \
	- Declare native method(s) in main class (i.e. 
\f2\fs20 getMyFullName
\f1\fs24 , see 
\f2\fs20 MyFirstJNIProject.java
\f1\fs24 \
	- Change 
\f2\fs20 drawString()
\f1\fs24  call in 
\f2\fs20 paint()
\f1\fs24  to call native function\
	- Add 
\f2\fs20 System.loadLibrary()
\f1\fs24  call\

\f0\b \
2) Create a Headers Target
\f1\b0 \
	- Project: New Target...\
		- Select Java: Java Package in the Assistant\
		- Name the target (i.e. "JavaHeaders")\
	- Add all three classes to Compile Sources phase\
	- Add javah build phase\
		- Select JavaHeaders target under Groups & Files\
		- Project: New Build Phase: New Shell Script Build Phase\
		- Info window appears.  Paste javah command into Script field:\
		- 
\f2\fs20 javah -classpath "$\{BUILT_PRODUCTS_DIR\}/JavaHeaders.jar" -force -o "$\{BUILT_PRODUCTS_DIR\}/MyFirstJNIProject.h" "MyFirstJNIProject"\
	
\f1\fs24 	(Above assumes names of jar file and main class name; the -o flag specifies the location and name of the generated header file)\
	- Verify new target\
		- Select JavaHeaders in "Active Target" dropdown\
		- Click Build\
		- Go to build directory and look for header file\
		- Drag from Finder to "Products" group in Xcode for later access\
\

\f0\b 3) Create jnilib Target
\f1\b0 \
	- Project: New Target...\
		- Select BSD: Dynamic Library (since AddressBook is pure C)\
		- Name the target (i.e. "MyFirstJNILib")\
	- File: New File...\
		- BSD: C File\
		- Name the file (i.e. "
\f2\fs20 MyFirstJNILib.c
\f1\fs24 ")\
		- Uncheck the 'Also create "MyFirstJNILib.h"' checkbox; our header file has been generated by the Headers target\
	- Include the generated header file, and the main AddressBook header\
		- 
\f2\fs20 #include "MyFirstJNIProject.h"\
		
\f1\fs24 - 
\f2\fs20 \CocoaLigature0 #include <AddressBook/AddressBook.h>
\f1\fs24 \CocoaLigature1 \
	- Open header file from JavaHeaders target\
	- Copy JNI function declaration from 
\f2\fs20 .h
\f1\fs24  file to 
\f2\fs20 .c
\f1\fs24  file\
		- Note that you will need to give names to the function arguments in your implementation (i.e. 
\f2\fs20 JNIEnv *env,
\f1\fs24  
\f2\fs20 jobject obj
\f1\fs24 )\
	- Implement function (see 
\f2\fs20 MyFirstJNILib.c
\f1\fs24 )\
	- With jnilib target selected in Groups & Files list, add necessary frameworks (Project: Add to Project...)\
		- /System/Library/Frameworks/JavaVM.framework\
		- /System/Library/Frameworks/AddressBook.framework\
		- /System/Library/Frameworks/CoreFoundation.framework\
		- In the "Add to targets:" pane that appears, make sure your jnilib target (i.e. "MyFirstJNILib") is the only one checked\
	- Modify Build Settings\
		- Select jnilib target in Groups & Files list, click Info button in main window\
		- 
\f0\b General
\f1\b0  tab:\
			- Add dependency to JavaHeaders target by clicking the + button, selecting your headers target, then clicking the Add Target button \
		- 
\f0\b Build
\f1\b0  tab:\
			- In 
\f0\b Header Search Paths 
\f1\b0 field, type 
\f2\fs20 /System/Library/Frameworks/JavaVM.framework/Headers
\f1\fs24 \
				- This is necessary because the generated header file implicitly includes jni.h, as opposed to through the JavaVM.framework\
			- 
\f0\b Product Name
\f1\b0  must match 
\f2\fs20 System.loadLibrary
\f1\fs24  string\
			- 
\f0\b Executable Prefix
\f1\b0  must be lib\
			- 
\f0\b Executable Suffix 
\f1\b0 must be jnilib\
			- A representation of the library should appear in the Products group of the Groups & Files list as lib<Name>.jnilib\
				- The name will appear in red, because the library has not been built and the file does not yet exist\
	- Verify new target\
		- Select JNILib target in "Active Target" dropdown\
		- Click Build\
		- Go to build directory and look for header file (i.e. "MyFirstJNIProject.h"\
\

\f0\b 4) Connect Java Application Target to jnilib Target
\f1\b0 \
	- Select app target in Groups & Files list\
	- Click Info Button in main window\
	- Add dependency to JNILib target (see instructions in Step 3) and close Info window\
	- With app target selected, add a Copy Files Build Phase\
		- Project: New Build Phase: New Copy Files Build Phase\
		- Info window appears.  Set Destination to "Java Resources"\
		- Close Info window\
	- Drag jnilib from Products group to Copy Files phase under Targets\
\

\f0\b 5) Build the whole thing
\f1\b0 \
	- Click "Clean All"\
	- Select App target in "Active Target" dropdown\
	- Click "Build and Run"\
\

\f0\b 6) Breathe}