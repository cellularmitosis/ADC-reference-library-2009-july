<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE> Registering a Custom Class</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="H2.Heading2"><A NAME="pgfId=16928"> </A>Registering a Custom Class</H1><P CLASS="T1.Text1"><A NAME="pgfId=16932"> </A>This section describes the routines that QuickDraw&nbsp;3D provides to register and unregister custom object classes.</P><P CLASS="T1.Text1"><A NAME="pgfId=16117"> </A>When a plug-in custom type is registered, its type parameter is allocated dynamically. Types are registered with <TT CLASS="cv">Q3XObjectHierarchy_RegisterClass</TT> or <TT CLASS="cv">Q3XElementClass_Register</TT>, or with the <TT CLASS="cv">Q3XAttributeClass_Register</TT> routine as described in <A HREF="qd3dattributes.10.htm#22702" CLASS="XRef">&quot;Adding Application-Defined Attribute and Element Types&quot;</A>.  In the case of <TT CLASS="cv">Q3XObjectHierarchy_RegisterClass</TT>, the second parameter is the address of an object type--<TT CLASS="cv">TQ3ObjectType</TT>, <TT CLASS="cv">TQ3ElementType</TT> or <TT CLASS="cv">TQ3AttributeType</TT>, depending on the call used for registration.</P><P CLASS="I.Important"><A NAME="pgfId=16207"> </A>When your custom class uses a shared library, you should coordinate class registration with library registration. For more information, including sample code, see <A HREF="qd3dobjects.16.htm#14852" CLASS="XRef">&quot;Registering a Shared Library&quot;</A>. </P><DIV><H3 CLASS="RoH.RoutineHeading"><A NAME="pgfId=11637"> </A>Q3XObjectHierarchy_RegisterClass</H3><P CLASS="T1.Text1"><A NAME="pgfId=11640"> </A>You can use the Q3XObjectHierarchy_RegisterClass routine to register a class in the QuickDraw&nbsp;3D hierarchy.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21542"> </A> TQ3XObjectClass Q3XObjectHierarchy_RegisterClass(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ObjectType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parentType,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ObjectType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*objectType,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*objectName,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MetaHandler&nbsp;&nbsp;&nbsp;&nbsp;metaHandler,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MetaHandler&nbsp;&nbsp;&nbsp;&nbsp;virtualMetaHandler,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;methodsSize,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instanceSize);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21544"> </A><TT CLASS="cv">parentType</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10864"> </A>The object type for which you want to create a subclass. The parent class must be currently registered with QuickDraw&nbsp;3D. Pass in <TT CLASS="cv">kQ3ObjectTypeInvalid</TT> (value 0) to create a subclass of the class <TT CLASS="cv">TQ3Object</TT>.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21553"> </A><TT CLASS="cv">objectType</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10865"> </A>On return, the object type of your subclass. This value is used as the binary type in a QuickDraw&nbsp;3D metafiles. It is also returned in <TT CLASS="cv">_GetType</TT> and <TT CLASS="cv">Q3Object_GetLeafType</TT> calls and may be used in the <TT CLASS="cv">Q3Object_IsType</TT> call.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21562"> </A><TT CLASS="cv">objectName</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10866"> </A>The object name of your subclass. This C string must be unique among all registered classes in QuickDraw&nbsp;3D, including parent classes. This value is used as the ASCII type in QuickDraw&nbsp;3D metafiles.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21571"> </A><TT CLASS="cv">metaHandler</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10867"> </A>A metahandler used to retrieve object methods and nonvirtual methods. This metahandler will be called repeatedly with a selector of type <TT CLASS="cv">TQ3MethodType</TT> to retrieve methods for this object class. With some classes, this value will be <TT CLASS="cv">NULL</TT>.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21580"> </A><TT CLASS="cv">virtualMetaHandler</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10868"> </A> 	A metahandler used to retrieve virtual methods for your object and any of its subclasses. If you are registering a leaf class only, pass <TT CLASS="cv">NULL</TT>. Classes that register as a subclass of this class will use the methods supplied here unless overridden by the subclass metahandlers. Methods that take a pointer to an object's private data should not be returned in this metahandler, as the methods only apply to the data in this class.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21590"> </A><TT CLASS="cv">methodsSize</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10869"> </A>Indicates the size of any private class data in the class. If you are registering a leaf class only, pass 0. If you have private class data, a method of type <TT CLASS="cv">kQ3MethodTypeObjectClassRegister</TT> must be registered to initialize the private data structure. A pointer to the structure is returned by <TT CLASS="cv">Q3ObjectClass_GetClassPrivate</TT> or <TT CLASS="cv">Q3Object_GetClassPrivate</TT>. If <TT CLASS="cv">methodsSize</TT> is 0, these calls always return <TT CLASS="cv">NULL</TT>.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21599"> </A>instanceSize</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=10870"> </A>The size of private instance data for your object. If this class has no instance data, this value may be 0. This would happen only if the class is used just abstractly to be subclassed or exists solely as a type. If a nonzero value is passed in, a method of type <TT CLASS="cv">kQ3MethodTypeObjectNew</TT> must be registered to initialize the data. A pointer to the structure is returned by <TT CLASS="cv">Q3Object_GetPrivate</TT>. If <TT CLASS="cv">dataSize</TT> is 0, <TT CLASS="cv">Q3Object_GetPrivate</TT> always returns <TT CLASS="cv">NULL</TT>.</DD></DL COMPACT><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=16939"> </A>DESCRIPTION</H4><P CLASS="T1.Text1"><A NAME="pgfId=16944"> </A>The Q3XObjectHierarchy_RegisterClass routine registers the custom class detailed by its parameters. The object type is assigned at run time and returned to you in the <TT CLASS="cv">objectType</TT> parameter.  Often it is a good idea to store this type locally in a static variable, since it is used by many object system routines.</P><P CLASS="T1.Text1"><A NAME="pgfId=16990"> </A>The Q3XObjectHierarchy_RegisterClass routine returns <TT CLASS="cv">NULL</TT> if the class could not be registered.</P></DIV><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=16941"> </A>SPECIAL CONSIDERATIONS</H4><P CLASS="T1.Text1"><A NAME="pgfId=16934"> </A>You should generally call Q3XObjectHierarchy_RegisterClass only in a function that has been registered by the <TT CLASS="cv">Q3XSharedLibrary_Register</TT> call.  Register the existence of this routine instead of calling it directly from a shared library registration routine.</P></DIV><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=16987"> </A>EXAMPLE</H4><P CLASS="T1.Text1"><A NAME="pgfId=16985"> </A>The following is an example of a registration function, taken from the plug-in renderer sample in the QuickDraw&nbsp;3D SDK. In this example the return value of the <TT CLASS="cv">Q3XObjectHierarchy_RegisterClass</TT> function is stored in the global variable <TT CLASS="cv">SRgRendererClass</TT>. To make this variable readily available to other code, it is declared static to the file in which the routine is implemented.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=21610"> </A>TQ3Status SR_Register(<BR>&nbsp;&nbsp;&nbsp;&nbsp;void)<BR>{<BR>&nbsp;&nbsp;&nbsp;&nbsp;/* Create/register the class */<BR>&nbsp;&nbsp;&nbsp;&nbsp;SRgRendererClass = <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3XObjectHierarchy_RegisterClass(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kQ3SharedTypeRenderer,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;SRgClassType,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;SampleRenderer&quot;,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SR_MetaHandler,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sizeof(TSRPrivate));<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=21614"> </A>&nbsp;&nbsp;&nbsp;&nbsp;/* Make sure it worked */<BR>&nbsp;&nbsp;&nbsp;&nbsp;if (SRgRendererClass == NULL) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (kQ3Failure);<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=21618"> </A>&nbsp;&nbsp;&nbsp;&nbsp;return (kQ3Success);<BR>}<BR></CODE></DIV></DIV><DIV><H3 CLASS="RoH.RoutineHeading"><A NAME="pgfId=14385"> </A>Q3XObjectHierarchy_UnregisterClass</H3><P CLASS="T1.Text1"><A NAME="pgfId=14389"> </A><A NAME="marker=14386"> </A><A NAME="marker=14387"> </A><A NAME="marker=14388"> </A>You can use the Q3XObjectHierarchy_UnregisterClass function to remove a custom object class registered with Q3XObjectHierarchy_RegisterClass.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21622"> </A>TQ3Status Q3XObjectHierarchy_UnregisterClass (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQX3ObjectClass objectClass);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21624"> </A><TT CLASS="cv">objectClass</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=14391"> </A>An object class.</DD></DL COMPACT><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=14392"> </A>DESCRIPTION</H4><P CLASS="T1.Text1"><A NAME="pgfId=14393"> </A>The Q3XObjectHierarchy_UnregisterClass function unregisters the custom object class specified by the <TT CLASS="cv">objectClass</TT> parameter.</P><P CLASS="T1.Text1"><A NAME="pgfId=17080"> </A>You should dispose of all instances of the custom object class you want to unregister before calling Q3XObjectHierarchy_UnregisterClass. If this is not done, Q3XObjectHierarchy_UnregisterClass returns <TT CLASS="cv">kQ3Failure</TT> and the class remains registered.</P><P CLASS="T1.Text1"><A NAME="pgfId=17068"> </A>You can also call Q3XObjectHierarchy_UnregisterClass to unregister a custom attribute type previously registered by the function <TT CLASS="cv">Q3AttributeClass_Register</TT>.</P></DIV><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=17092"> </A>SPECIAL CONSIDERATIONS</H4><P CLASS="T1.Text1"><A NAME="pgfId=17090"> </A>The best way to unload the class is by unloading the shared library, using the <TT CLASS="cv">Q3XSharedLibrary_Unregister</TT> routine.</P></DIV></DIV><DIV><H3 CLASS="RoH.RoutineHeading"><A NAME="pgfId=16162"> </A><A NAME="21259"> </A>Q3ElementClass_Register</H3><P CLASS="T1.Text1"><A NAME="pgfId=16164"> </A><A NAME="marker=16163"> </A>You <A NAME="marker=17823"> </A>can use the <TT CLASS="cv">Q3ElementClass_Register</TT> function to register an application-defined element class.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21635"> </A>TQ3ObjectClass Q3ElementClass_Register (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ElementType elementType, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *name, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long sizeOfElement, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3MetaHandler metaHandler);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21637"> </A><TT CLASS="cv">elementType</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=16166"> </A>An element type.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21646"> </A><TT CLASS="cv">name</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=16167"> </A>A pointer to a null-terminated string containing the name of the element's creator and the name of the type of element being registered.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21655"> </A><TT CLASS="cv">sizeOfElement</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=16168"> </A> The size of the data associated with the specified custom element type.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21665"> </A><TT CLASS="cv">metaHandler</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=16169"> </A>A pointer to an application-defined metahandler that QuickDraw&nbsp;3D calls to handle the new custom element type.</DD></DL COMPACT><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=16173"> </A>DESCRIPTION</H4><P CLASS="T1.Text1"><A NAME="pgfId=16174"> </A>The <TT CLASS="cv">Q3ElementClass_Register</TT> function returns, as its function result, an object class reference for a new custom element type having a type specified by the <TT CLASS="cv">elementType</TT> parameter and a name specified by the <TT CLASS="cv">name</TT> parameter. The <TT CLASS="cv">metaHandler</TT> parameter is a pointer to the metahandler for your custom element type. See <A HREF="qd3dobjects.7.htm#22692" CLASS="XRef">&quot;Defining an Object Metahandler&quot;</A> for information on writing a metahandler. If <TT CLASS="cv">Q3ElementClass_Register</TT> cannot create a new element type, it returns the value <TT CLASS="cv">NULL</TT>.</P><P CLASS="T1.Text1"><A NAME="pgfId=16178"> </A>The <TT CLASS="cv">name</TT> parameter should be a pointer to null-terminated C string that contains your (or your company's) name and the name of the type of element you are defining. Use the colon character (:) to delimit fields within this string. The string should not contain any spaces or punctuation other than the colon character, and it cannot end with a colon. Here are some examples of valid creator names:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=21676"> </A>&quot;MyCompany:SurfDraw:Wavelength&quot;<BR>&quot;MyCompany:SurfWorks:VRModule:WaterTemperature&quot;<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=16180"> </A>The <TT CLASS="cv">sizeOfElement</TT> parameter specifies the fixed size of the data associated with your custom element type. If you wish to associate dynamically sized data with your element type, put a pointer to a dynamically sized block of data into the set and have your handler's copy method duplicate the data. (In this case, you would set the <TT CLASS="cv">sizeOfElement</TT> parameter to <TT CLASS="cv">sizeof(Ptr)</TT>.) You also need to have your handler's dispose method deallocate any dynamically sized blocks.</P></DIV></DIV><DIV><H3 CLASS="RoH.RoutineHeading"><A NAME="pgfId=16181"> </A>Q3ElementType_GetElementSize</H3><P CLASS="T1.Text1"><A NAME="pgfId=16184"> </A><A NAME="marker=16182"> </A><A NAME="marker=16183"> </A>You can use the <TT CLASS="cv">Q3ElementType_GetElementSize</TT> function to get the size of an application-defined element type.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21680"> </A>TQ3Status Q3ElementType_GetElementSize (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ElementType elementType, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *sizeOfElement);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21682"> </A><TT CLASS="cv">elementType</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=16186"> </A>An element type.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21691"> </A><TT CLASS="cv">sizeOfElement</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=16187"> </A> On exit, the number of bytes occupied by an element of the specified element object class.</DD></DL COMPACT><DIV><H4 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=16188"> </A>DESCRIPTION</H4><P CLASS="T1.Text1"><A NAME="pgfId=16189"> </A>The <TT CLASS="cv">Q3ElementType_GetElementSize</TT> function returns, in the <TT CLASS="cv">sizeOfElement</TT> parameter, the number of bytes occupied by an element of the type specified by the <TT CLASS="cv">elementType</TT> parameter.<A NAME="marker=16190"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>