<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Managing Quaternions</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=4108"> </A><A NAME="marker=10404"> </A>Managing Quaternions</H1><P CLASS="T1.Text1"><A NAME="pgfId=4113"> </A><A NAME="marker=4109"> </A>QuickDraw&nbsp;3D provides routines that you can use to operate on quaternions.</P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4114"> </A>Q3Quaternion_Set</H2><P CLASS="T1.Text1"><A NAME="pgfId=4116"> </A><A NAME="marker=4115"> </A><A NAME="marker=1859"> </A>You can use the <TT CLASS="cv">Q3Quaternion_Set</TT> function to set the components of a quaternion.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10408"> </A>TQ3Quaternion *Q3Quaternion_Set (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *quaternion, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float w, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float x, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float y, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float z);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10410"> </A><TT CLASS="cv">quaternion</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4118"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10419"> </A><TT CLASS="cv">w</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4119"> </A>The desired <I CLASS="italics">w</I> component of a quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10428"> </A><TT CLASS="cv">x</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4120"> </A>The desired <I CLASS="italics">x</I> component of a quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10437"> </A><TT CLASS="cv">y</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4121"> </A>The desired <I CLASS="italics">y</I> component of a quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10446"> </A><TT CLASS="cv">z</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4122"> </A>The desired <I CLASS="italics">z</I> component of a quaternion.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4123"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4124"> </A>The <TT CLASS="cv">Q3Quaternion_Set</TT> function returns, as its function result and in the <TT CLASS="cv">quaternion</TT> parameter, the quaternion whose components are specified by the <TT CLASS="cv">w</TT>, <TT CLASS="cv">x</TT>, <TT CLASS="cv">y</TT>, and <TT CLASS="cv">z</TT> parameters.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4125"> </A>Q3Quaternion_SetIdentity</H2><P CLASS="T1.Text1"><A NAME="pgfId=4127"> </A><A NAME="marker=4126"> </A><A NAME="marker=1872"> </A>You can use the <TT CLASS="cv">Q3Quaternion_SetIdentity</TT> function to set a quaternion to the identity quaternion.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10457"> </A>TQ3Quaternion *Q3Quaternion_SetIdentity (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *quaternion);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10459"> </A><TT CLASS="cv">quaternion</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3553"> </A>On exit, the identity quaternion.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4130"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4131"> </A>The <TT CLASS="cv">Q3Quaternion_SetIdentity</TT> function returns, as its function result and in the <TT CLASS="cv">quaternion</TT> parameter, the identity quaternion.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4132"> </A>Q3Quaternion_Copy</H2><P CLASS="T1.Text1"><A NAME="pgfId=4134"> </A><A NAME="marker=4133"> </A><A NAME="marker=1881"> </A>You can use the <TT CLASS="cv">Q3Quaternion_Copy</TT> function to get a copy of a quaternion.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10470"> </A>TQ3Quaternion *Q3Quaternion_Copy (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *quaternion, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10472"> </A><TT CLASS="cv">quaternion</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4136"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10481"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4137"> </A>On exit, a copy of <TT CLASS="cv">quaternion</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4138"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4139"> </A>The <TT CLASS="cv">Q3Quaternion_Copy</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, a copy of the quaternion <TT CLASS="cv">quaternion</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4140"> </A>Q3Quaternion_IsIdentity</H2><P CLASS="T1.Text1"><A NAME="pgfId=4141"> </A><A NAME="marker=1890"> </A>You can use the <TT CLASS="cv">Q3Quaternion_IsIdentity</TT> function to determine whether a quaternion is the identity quaternion.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10492"> </A>TQ3Boolean Q3Quaternion_IsIdentity (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *quaternion);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10494"> </A><TT CLASS="cv">quaternion</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4143"> </A>A quaternion.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4144"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4145"> </A>The <TT CLASS="cv">Q3Quaternion_IsIdentity</TT> function returns <TT CLASS="cv">kQ3True</TT> if the <TT CLASS="cv">quaternion</TT> parameter is the identity quaternion; <TT CLASS="cv">Q3Quaternion_IsIdentity</TT> returns <TT CLASS="cv">kQ3False</TT> otherwise.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4146"> </A>Q3Quaternion_Invert</H2><P CLASS="T1.Text1"><A NAME="pgfId=4148"> </A><A NAME="marker=4147"> </A><A NAME="marker=1899"> </A>You can use the <TT CLASS="cv">Q3Quaternion_Invert</TT> function to invert a quaternion.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10505"> </A>TQ3Quaternion *Q3Quaternion_Invert (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *quaternion, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10507"> </A><TT CLASS="cv">quaternion</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4150"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10516"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4151"> </A>On exit, the inverse of <TT CLASS="cv">quaternion</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4152"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4153"> </A>The <TT CLASS="cv">Q3Quaternion_Invert</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, the inverse of the quaternion specified by the <TT CLASS="cv">quaternion</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4154"> </A>Q3Quaternion_Normalize</H2><P CLASS="T1.Text1"><A NAME="pgfId=4156"> </A><A NAME="marker=4155"> </A><A NAME="marker=1909"> </A>You can use the <TT CLASS="cv">Q3Quaternion_Normalize</TT> function to normalize a quaternion.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10527"> </A>TQ3Quaternion *Q3Quaternion_Normalize (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *quaternion, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10529"> </A><TT CLASS="cv">quaternion</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4158"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10538"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4159"> </A>On exit, the normalized form of <TT CLASS="cv">quaternion</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4160"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4161"> </A>The <TT CLASS="cv">Q3Quaternion_Normalize</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, the normalized form of the quaternion <TT CLASS="cv">quaternion</TT>. Note that on entry the <TT CLASS="cv">result</TT> parameter can be the same as the <TT CLASS="cv">quaternion</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4162"> </A>Q3Quaternion_Dot</H2><P CLASS="T1.Text1"><A NAME="pgfId=4164"> </A><A NAME="marker=4163"> </A><A NAME="marker=1919"> </A>You can use the <TT CLASS="cv">Q3Quaternion_Dot</TT> function to determine the dot product of two quaternions.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10549"> </A>float Q3Quaternion_Dot (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *q1, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *q2);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10551"> </A><TT CLASS="cv">q1</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4166"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10560"> </A><TT CLASS="cv">q2</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4167"> </A>A quaternion.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4168"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4169"> </A>The <TT CLASS="cv">Q3Quaternion_Dot</TT> function returns, as its function result, a floating-point value that is the dot product of the two quaternions <TT CLASS="cv">q1</TT> and <TT CLASS="cv">q2</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4170"> </A>Q3Quaternion_Multiply</H2><P CLASS="T1.Text1"><A NAME="pgfId=4172"> </A><A NAME="marker=4171"> </A><A NAME="marker=1929"> </A>You can use the <TT CLASS="cv">Q3Quaternion_Multiply</TT> function to multiply two quaternions.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10571"> </A>TQ3Quaternion *Q3Quaternion_Multiply (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *q1, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *q2, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10573"> </A><TT CLASS="cv">q1</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4174"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10582"> </A><TT CLASS="cv">q2</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4175"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10591"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4176"> </A>On exit, the product of <TT CLASS="cv">q1</TT> and <TT CLASS="cv">q2</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4177"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4178"> </A>The <TT CLASS="cv">Q3Quaternion_Multiply</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, the product of the two quaternions <TT CLASS="cv">q1</TT> and <TT CLASS="cv">q2</TT>.</P><P CLASS="T1.Text1"><A NAME="pgfId=4179"> </A>If you want to rotate an object by the quaternion <TT CLASS="cv">qFirst</TT> and then rotate the resulting object by the quaternion <TT CLASS="cv">qSecond</TT>, you can accomplish both rotations at once by applying the quaternion <TT CLASS="cv">qResult</TT> that is obtained as follows:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=10606"> </A>Q3Quaternion_Multiply(qSecond, qFirst, qResult);<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=4181"> </A>Note the order of the quaternion multiplicands.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4182"> </A>Q3Quaternion_SetRotateAboutAxis</H2><P CLASS="T1.Text1"><A NAME="pgfId=4184"> </A><A NAME="marker=4183"> </A><A NAME="marker=1943"> </A>You can use the <TT CLASS="cv">Q3Quaternion_SetRotateAboutAxis</TT> function to configure a rotate-about-axis quaternion.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10610"> </A>TQ3Quaternion *Q3Quaternion_SetRotateAboutAxis (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *quaternion, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Vector3D *axis, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float angle);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10612"> </A><TT CLASS="cv">quaternion</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4186"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10621"> </A><TT CLASS="cv">axis</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4187"> </A>The desired axis of rotation.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10630"> </A><TT CLASS="cv">angle</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4188"> </A>The desired angle of rotation, in radians.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4189"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4190"> </A>The <TT CLASS="cv">Q3Quaternion_SetRotateAboutAxis</TT> function returns, as its function result and in the <TT CLASS="cv">quaternion</TT> parameter, a rotate-about-axis quaternion that rotates an object by the angle <TT CLASS="cv">angle</TT> around the axis specified by the <TT CLASS="cv">axis</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4191"> </A>Q3Quaternion_SetRotate_X</H2><P CLASS="T1.Text1"><A NAME="pgfId=4192"> </A><A NAME="marker=1953"> </A>You can use the <TT CLASS="cv">Q3Quaternion_SetRotate_X</TT> function to configure a quaternion that rotates objects around the <I CLASS="italics">x</I> axis.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10641"> </A>TQ3Quaternion *Q3Quaternion_SetRotate_X (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *quaternion, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float angle);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10643"> </A><TT CLASS="cv">quaternion</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4194"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10652"> </A><TT CLASS="cv">angle</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4195"> </A>The desired angle of rotation around the <I CLASS="italics">x</I> coordinate axis, in radians.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4196"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4197"> </A>The <TT CLASS="cv">Q3Quaternion_SetRotate_X</TT> function returns, as its function result and in the <TT CLASS="cv">quaternion</TT> parameter, a quaternion that rotates an object by the angle <TT CLASS="cv">angle</TT> around the <I CLASS="italics">x</I> axis.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4198"> </A>Q3Quaternion_SetRotate_Y</H2><P CLASS="T1.Text1"><A NAME="pgfId=4199"> </A><A NAME="marker=1962"> </A>You can use the <TT CLASS="cv">Q3Quaternion_SetRotate_Y</TT> function to configure a quaternion that rotates objects around the <I CLASS="italics">y</I> axis.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10663"> </A>TQ3Quaternion *Q3Quaternion_SetRotate_Y (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *quaternion, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float angle);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10665"> </A><TT CLASS="cv">quaternion</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4201"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10674"> </A><TT CLASS="cv">angle</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4202"> </A>The desired angle of rotation around the <I CLASS="italics">y</I> coordinate axis, in radians.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4203"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4204"> </A>The <TT CLASS="cv">Q3Quaternion_SetRotate_Y</TT> function returns, as its function result and in the <TT CLASS="cv">quaternion</TT> parameter, a quaternion that rotates an object by the angle <TT CLASS="cv">angle</TT> around the <I CLASS="italics">y</I> axis.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4205"> </A>Q3Quaternion_SetRotate_Z</H2><P CLASS="T1.Text1"><A NAME="pgfId=4206"> </A><A NAME="marker=1971"> </A>You can use the <TT CLASS="cv">Q3Quaternion_SetRotate_Z</TT> function to configure a quaternion that rotates objects around the <I CLASS="italics">z</I> axis.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10685"> </A>TQ3Quaternion *Q3Quaternion_SetRotate_Z (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *quaternion, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float angle);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10687"> </A><TT CLASS="cv">quaternion</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4208"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10696"> </A><TT CLASS="cv">angle</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4209"> </A>The desired angle of rotation around the <I CLASS="italics">z</I> coordinate axis, in radians.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4210"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4211"> </A>The <TT CLASS="cv">Q3Quaternion_SetRotate_Z</TT> function returns, as its function result and in the <TT CLASS="cv">quaternion</TT> parameter, a quaternion that rotates an object by the angle <TT CLASS="cv">angle</TT> around the <I CLASS="italics">z</I> axis.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4212"> </A>Q3Quaternion_SetRotate_XYZ</H2><P CLASS="T1.Text1"><A NAME="pgfId=4213"> </A><A NAME="marker=1980"> </A>You can use the <TT CLASS="cv">Q3Quaternion_SetRotate_XYZ</TT> function to configure a quaternion having a specified rotation around the <I CLASS="italics">x,</I> <I CLASS="italics">y,</I> and <I CLASS="italics">z</I> axes.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10707"> </A>TQ3Quaternion *Q3Quaternion_SetRotate_XYZ (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *quaternion, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float xAngle, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float yAngle, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float zAngle);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10709"> </A><TT CLASS="cv">quaternion</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4215"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10718"> </A><TT CLASS="cv">xAngle</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4216"> </A>The desired angle of rotation around the <I CLASS="italics">x</I> axis, in radians.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10727"> </A><TT CLASS="cv">yAngle</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4217"> </A>The desired angle of rotation around the <I CLASS="italics">y</I> axis, in radians.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10736"> </A><TT CLASS="cv">zAngle</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4218"> </A>The desired angle of rotation around the <I CLASS="italics">z</I> axis, in radians.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4219"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4220"> </A>The <TT CLASS="cv">Q3Quaternion_SetRotate_XYZ</TT> function returns, as its function result and in the <TT CLASS="cv">quaternion</TT> parameter, a quaternion that rotates an object by the specified angles around the <I CLASS="italics">x</I>, <I CLASS="italics">y</I>, and <I CLASS="italics">z</I> axes.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4221"> </A>Q3Quaternion_SetMatrix</H2><P CLASS="T1.Text1"><A NAME="pgfId=4223"> </A><A NAME="marker=4222"> </A><A NAME="marker=1992"> </A>You can use the <TT CLASS="cv">Q3Quaternion_SetMatrix</TT> function to configure a quaternion from a matrix.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10747"> </A>TQ3Quaternion *Q3Quaternion_SetMatrix (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *quaternion, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix4x4 *matrix);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10749"> </A><TT CLASS="cv">quaternion</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4225"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10758"> </A><TT CLASS="cv">matrix</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4226"> </A>A 4-by-by matrix.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4227"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4228"> </A>The <TT CLASS="cv">Q3Quaternion_SetMatrix</TT> function returns, as its function result and in the <TT CLASS="cv">quaternion</TT> parameter, a quaternion that has the same transformational properties as the matrix specified by the <TT CLASS="cv">matrix</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4229"> </A>Q3Quaternion_SetRotateVectorToVector</H2><P CLASS="T1.Text1"><A NAME="pgfId=4230"> </A><A NAME="marker=2001"> </A>You can use the <TT CLASS="cv">Q3Quaternion_SetRotateVectorToVector</TT> function to configure a quaternion that rotates objects around the origin in such a way that a transformed vector matches a given vector.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10769"> </A>TQ3Quaternion *Q3Quaternion_SetRotateVectorToVector (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *quaternion, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Vector3D *v1, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Vector3D *v2);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10771"> </A><TT CLASS="cv">quaternion</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4232"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10780"> </A><TT CLASS="cv">v1</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4233"> </A>A three-dimensional vector.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10789"> </A><TT CLASS="cv">v2</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4234"> </A>A three-dimensional vector.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4235"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4236"> </A>The <TT CLASS="cv">Q3Quaternion_SetRotateVectorToVector</TT> function returns, as its function result and in the <TT CLASS="cv">quaternion</TT> parameter, a quaternion that rotates objects around the origin in such a way that the transformed vector <TT CLASS="cv">v1</TT> matches the vector <TT CLASS="cv">v2</TT>. Both <TT CLASS="cv">v1</TT> and <TT CLASS="cv">v2</TT> should be normalized.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4237"> </A>Q3Quaternion_MatchReflection</H2><P CLASS="T1.Text1"><A NAME="pgfId=4238"> </A><A NAME="marker=2011"> </A>You can use the <TT CLASS="cv">Q3Quaternion_MatchReflection</TT> function to match the orientation of a quaternion.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10800"> </A>TQ3Quaternion *Q3Quaternion_MatchReflection (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *q1, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *q2, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10802"> </A><TT CLASS="cv">q1</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4240"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10811"> </A><TT CLASS="cv">q2</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4241"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10820"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4242"> </A>On exit, a quaternion that is either <TT CLASS="cv">q1</TT> or the negative of <TT CLASS="cv">q1</TT>, and that matches the orientation of <TT CLASS="cv">q2</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4243"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4244"> </A>The <TT CLASS="cv">Q3Quaternion_MatchReflection</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, a quaternion that is either identical to the quaternion specified by the <TT CLASS="cv">q1</TT> parameter or is the negative of <TT CLASS="cv">q1</TT>, depending on whether <TT CLASS="cv">q1</TT> or its negative matches the orientation of the quaternion specified by the <TT CLASS="cv">q2</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4245"> </A>Q3Quaternion_InterpolateFast</H2><P CLASS="T1.Text1"><A NAME="pgfId=4246"> </A><A NAME="marker=2021"> </A>You can use the <TT CLASS="cv">Q3Quaternion_InterpolateFast</TT> function to interpolate quickly between two quaternions.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10831"> </A>TQ3Quaternion *Q3Quaternion_InterpolateFast (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *q1, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *q2, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float t, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10833"> </A><TT CLASS="cv">q1</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4248"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10846"> </A><TT CLASS="cv">q2</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4249"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10855"> </A><TT CLASS="cv">t</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3702"> </A>An interpolation factor. This parameter should contain a value between 0.0 and 1.0.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10864"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3703"> </A>On exit, a quaternion that is a fast interpolation between the two specified quaternions.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4252"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4253"> </A>The <TT CLASS="cv">Q3Quaternion_InterpolateFast</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, a quaternion that interpolates between the two quaternions specified by the <TT CLASS="cv">q1</TT> and <TT CLASS="cv">q2</TT> parameters, according to the factor specified by the <TT CLASS="cv">t</TT> parameter. If the value of <TT CLASS="cv">t</TT> is 0.0, <TT CLASS="cv">Q3Quaternion_InterpolateFast</TT> returns a quaternion identical to <TT CLASS="cv">q1</TT>. If the value of <TT CLASS="cv">t</TT> is 1.0, <TT CLASS="cv">Q3Quaternion_InterpolateFast</TT> returns a quaternion identical to <TT CLASS="cv">q2</TT>. If <TT CLASS="cv">t</TT> is any other value in the range [0.0, 1.0], <TT CLASS="cv">Q3Quaternion_InterpolateFast</TT> returns a quaternion that is interpolated between the two quaternions.</P><P CLASS="T1.Text1"><A NAME="pgfId=3748"> </A>The interpolation returned by <TT CLASS="cv">Q3Quaternion_InterpolateFast</TT> is not as smooth or constant as that returned by <TT CLASS="cv">Q3Quaternion_InterpolateLinear</TT>, but <TT CLASS="cv">Q3Quaternion_InterpolateFast</TT> is usually faster than <TT CLASS="cv">Q3Quaternion_InterpolateLinear</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4254"> </A>Q3Quaternion_InterpolateLinear</H2><P CLASS="T1.Text1"><A NAME="pgfId=4255"> </A><A NAME="marker=2032"> </A>You can use the <TT CLASS="cv">Q3Quaternion_InterpolateLinear</TT> function to interpolate linearly between two quaternions.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10875"> </A>TQ3Quaternion *Q3Quaternion_InterpolateLinear (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *q1, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *q2, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float t, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *result) ;<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10877"> </A><TT CLASS="cv">q1</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4257"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10886"> </A><TT CLASS="cv">q2</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4258"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10895"> </A><TT CLASS="cv">t</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4259"> </A>An interpolation factor. This parameter should contain a value between 0.0 and 1.0.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10904"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4260"> </A>On exit, a quaternion that is a smooth and constant interpolation between the two specified quaternions.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4261"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3690"> </A>The <TT CLASS="cv">Q3Quaternion_InterpolateLinear</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, a quaternion that interpolates smoothly between the two quaternions specified by the <TT CLASS="cv">q1</TT> and <TT CLASS="cv">q2</TT> parameters, according to the factor specified by the <TT CLASS="cv">t</TT> parameter. If the value of <TT CLASS="cv">t</TT> is 0.0, <TT CLASS="cv">Q3Quaternion_InterpolateLinear</TT> returns a quaternion identical to <TT CLASS="cv">q1</TT>. If the value of <TT CLASS="cv">t</TT> is 1.0, <TT CLASS="cv">Q3Quaternion_InterpolateLinear</TT> returns a quaternion identical to <TT CLASS="cv">q2</TT>. If <TT CLASS="cv">t</TT> is any other value in the range [0.0, 1.0], <TT CLASS="cv">Q3Quaternion_InterpolateLinear</TT> returns a quaternion that is interpolated between the two quaternions in a smooth and constant manner.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3691"> </A>Q3Vector3D_TransformQuaternion</H2><P CLASS="T1.Text1"><A NAME="pgfId=4264"> </A><A NAME="marker=2043"> </A>You can use the <TT CLASS="cv">Q3Vector3D_TransformQuaternion</TT> function to transform a vector by a quaternion.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10915"> </A>TQ3Vector3D *Q3Vector3D_TransformQuaternion (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Vector3D *vector, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *quaternion, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Vector3D *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10917"> </A><TT CLASS="cv">vector</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4266"> </A>A three-dimensional vector.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10926"> </A><TT CLASS="cv">quaternion</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4267"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10935"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4268"> </A>On exit, a three-dimensional vector that is the result of transforming the specified vector by the specified quaternion.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4269"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4270"> </A>The <TT CLASS="cv">Q3Vector3D_TransformQuaternion</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, a three-dimensional vector that is the result of transforming the vector specified by the <TT CLASS="cv">vector</TT> parameter using the quaternion specified by the <TT CLASS="cv">quaternion</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4271"> </A>Q3Point3D_TransformQuaternion</H2><P CLASS="T1.Text1"><A NAME="pgfId=4272"> </A><A NAME="marker=2053"> </A>You can use the <TT CLASS="cv">Q3Point3D_TransformQuaternion</TT> function to transform a point by a quaternion.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=10946"> </A>TQ3Point3D *Q3Point3D_TransformQuaternion (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point3D *point, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *quaternion, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Point3D *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10948"> </A><TT CLASS="cv">point</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4274"> </A>A three-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10957"> </A><TT CLASS="cv">quaternion</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4275"> </A>A quaternion.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=10966"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3801"> </A>On exit, a three-dimensional point that is the result of transforming the specified point by the specified quaternion.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4277"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3812"> </A>The <TT CLASS="cv">Q3Point3D_TransformQuaternion</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, a three-dimensional point that is the result of transforming the point specified by the <TT CLASS="cv">point</TT> parameter using the quaternion specified by the <TT CLASS="cv">quaternion</TT> parameter.<A NAME="marker=3831"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>