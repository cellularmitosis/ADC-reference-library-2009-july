<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE> Using Texture Shaders</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="H2.Heading2"><A NAME="pgfId=13609"> </A><A NAME="27990"> </A>Using Texture Shaders</H1><P CLASS="T1.Text1"><A NAME="pgfId=13610"> </A><A NAME="marker=26876"> </A><A NAME="marker=13669"> </A>You create a texture shader by calling the <TT CLASS="cv">Q3TextureShader_New</TT> function, to&nbsp;which you pass a texture object. QuickDraw&nbsp;3D currently supports only pixmap texture objects, which you create by calling the <TT CLASS="cv">Q3PixMapTexture_New</TT> function.</P><P CLASS="T1.Text1"><A NAME="pgfId=15929"> </A>Once you've created a texture shader, you can apply it to all the objects in a model by submitting the shader inside of a rendering loop, as shown in <A HREF="qd3dshading.8.htm#30016" CLASS="XRef">Listing&nbsp;5</A>.</P><P CLASS="L.Listing"><A NAME="pgfId=17822"> </A>Listing&nbsp;5<A NAME="30016"> </A>Applying a texture shader in a submitting loop</P><CODE CLASS="Cv.Code"><A NAME="pgfId=35842"> </A>Q3View_StartRendering(myView);<BR>do {<BR>&nbsp;&nbsp;&nbsp;&nbsp;Q3Shader_Submit(myTextureShader, myView);<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;/*submit styles, groups, and other objects here*/<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;myViewStatus = Q3View_EndRendering(myView);<BR>} while (myViewStatus == kQ3ViewStatusRetraverse);<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=17845"> </A>You can apply the shader to the objects in a group by adding it to a group that is submitted in a rendering loop, as shown in <A HREF="qd3dshading.8.htm#41494" CLASS="XRef">Listing&nbsp;6</A>. (The <TT CLASS="cv">myGroup</TT> group is an ordered display group.)</P><P CLASS="L.Listing"><A NAME="pgfId=17836"> </A>Listing&nbsp;6<A NAME="41494"> </A>Applying a texture shader in a group</P><CODE CLASS="Cv.Code"><A NAME="pgfId=35846"> </A>Q3Group_AddObject(myGroup, myTextureShader);<BR><BR>Q3View_StartRendering(myView);<BR>do {<BR>&nbsp;&nbsp;&nbsp;&nbsp;Q3Group_Submit(myGroup, myView);<BR>&nbsp;&nbsp;&nbsp;&nbsp;myViewStatus = Q3View_EndRendering(myView);<BR>} while (myViewStatus == kQ3ViewStatusRetraverse);<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=17865"> </A>You can also apply a texture shader to all the objects in a model by adding the shader as an attribute of type <TT CLASS="cv">kQ3AttributeTypeSurfaceShader</TT> to the view's attribute set. Similarly, you can attach the texture shader to a part of a geometric object as an attribute. For example, you can attach a texture shader to the face of a cube or a mesh to have that face shaded with a texture. <A HREF="qd3dshading.8.htm#11161" CLASS="XRef">Listing&nbsp;7</A> illustrates how to create a texture shader and use it to shade a triangle. Note that the function <TT CLASS="cv">MyCreateShadedTriangle</TT> defined in <A HREF="qd3dshading.8.htm#11161" CLASS="XRef">Listing&nbsp;7</A> sets up a custom surface parameterization for the triangle, because there is no standard surface parameterization for a triangle.</P><P CLASS="L.Listing"><A NAME="pgfId=3279"> </A>Listing&nbsp;7<A NAME="11161"> </A>Applying a texture shader as an attribute</P><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=35850"> </A>TQ3GeometryObject MyCreateShadedTriangle (TQ3StoragePixmap myPixmap)<BR>{<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3ShaderObject&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myShader;<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3TextureObject&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myTexture;<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3TriangleData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myTriData;<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myTriangle;<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3Param2D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myParam2D;<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3Vertex3D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myVertices[3] = {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ { 0.5,  0.5, 0.0}, NULL },<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ {-0.5,  0.5, 0.0}, NULL },<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ {-0.5, -0.5, 0.0}, NULL }};<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;/*Create a new texture from the pixmap passed in.*/<BR>&nbsp;&nbsp;&nbsp;&nbsp;myTexture = Q3PixmapTexture_New(&amp;myPixmap);<BR>&nbsp;&nbsp;&nbsp;&nbsp;if (myTexture == NULL)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (NULL);<BR>&nbsp;&nbsp;&nbsp;&nbsp;Q3Object_Dispose(myPixmap.image);<BR></CODE><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=35856"> </A>&nbsp;&nbsp;&nbsp;&nbsp;/*Create a new texture shader from the texture.*/<BR>&nbsp;&nbsp;&nbsp;&nbsp;myShader = Q3TextureShader_New(myTexture);<BR>&nbsp;&nbsp;&nbsp;&nbsp;if (myShader == NULL)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (NULL);<BR>&nbsp;&nbsp;&nbsp;&nbsp;Q3Object_Dispose(myTexture);<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;/*Configure triangle data.*/<BR>&nbsp;&nbsp;&nbsp;&nbsp;/*First, attach uv values to the three vertices.*/<BR>&nbsp;&nbsp;&nbsp;&nbsp;myParam2D.u = 0;<BR>&nbsp;&nbsp;&nbsp;&nbsp;myParam2D.v = 0;<BR>&nbsp;&nbsp;&nbsp;&nbsp;myVertices[0].attributeSet = Q3AttributeSet_New();<BR>&nbsp;&nbsp;&nbsp;&nbsp;Q3AttributeSet_Add(myVertices[0].attributeSet, kQ3AttributeTypeShadingUV, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;myParam2D);<BR>&nbsp;&nbsp;&nbsp;&nbsp;myParam2D.u = 0;<BR>&nbsp;&nbsp;&nbsp;&nbsp;myParam2D.v = 1;<BR>&nbsp;&nbsp;&nbsp;&nbsp;myVertices[1].attributeSet = Q3AttributeSet_New();<BR>&nbsp;&nbsp;&nbsp;&nbsp;Q3AttributeSet_Add(myVertices[1].attributeSet, kQ3AttributeTypeShadingUV,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;myParam2D);<BR>&nbsp;&nbsp;&nbsp;&nbsp;myParam2D.u = 1;<BR>&nbsp;&nbsp;&nbsp;&nbsp;myParam2D.v = 1;<BR>&nbsp;&nbsp;&nbsp;&nbsp;myVertices[2].attributeSet = Q3AttributeSet_New();<BR>&nbsp;&nbsp;&nbsp;&nbsp;Q3AttributeSet_Add(myVertices[2].attributeSet, kQ3AttributeTypeShadingUV, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;myParam2D);<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;/*Define the triangle, using the vertices and uv values just set up.*/<BR>&nbsp;&nbsp;&nbsp;&nbsp;myTriData.vertices[0] = myVertices[0];<BR>&nbsp;&nbsp;&nbsp;&nbsp;myTriData.vertices[1] = myVertices[1];<BR>&nbsp;&nbsp;&nbsp;&nbsp;myTriData.vertices[2] = myVertices[2];<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;/*Attach a texture surface shader as an attribute.*/<BR>&nbsp;&nbsp;&nbsp;&nbsp;myTriData.triangleAttributeSet = Q3AttributeSet_New();<BR>&nbsp;&nbsp;&nbsp;&nbsp;Q3AttributeSet_Add(myTriData.triangleAttributeSet, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kQ3AttributeTypeSurfaceShader, &amp;myShader);<BR></CODE><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=35862"> </A>&nbsp;&nbsp;&nbsp;&nbsp;myTriangle = Q3Triangle_New(&amp;myTriData);<BR>&nbsp;&nbsp;&nbsp;&nbsp;Q3Object_Dispose(myVertices[0].attributeSet);<BR>&nbsp;&nbsp;&nbsp;&nbsp;Q3Object_Dispose(myVertices[1].attributeSet);<BR>&nbsp;&nbsp;&nbsp;&nbsp;Q3Object_Dispose(myVertices[2].attributeSet);<BR></CODE><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=35868"> </A>&nbsp;&nbsp;&nbsp;&nbsp;return(myTriangle);<BR>}<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=3286"> </A><A NAME="marker=35870"> </A>The function <TT CLASS="cv">MyCreateShadedTriangle</TT> defined in <A HREF="qd3dshading.8.htm#11161" CLASS="XRef">Listing&nbsp;7</A> creates a texture from the pixmap it is passed and then creates a new texture shader from that texture. <TT CLASS="cv">MyCreateShadedTriangle</TT> then attaches <I CLASS="italics">uv</I> parameterization values to each of the three triangle vertices and defines the triangle data. Finally, <TT CLASS="cv">MyCreateShadedTriangle</TT> creates a triangle and returns it to its caller. When the triangle is drawn (perhaps by being submitted in a rendering loop), it will have the specified texture mapped onto it.<A NAME="marker=18190"> </A></P><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>