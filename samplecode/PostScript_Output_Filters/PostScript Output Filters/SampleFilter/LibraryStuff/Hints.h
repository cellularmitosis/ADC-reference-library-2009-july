/**	@name Introduction to Hints.h*/	/**		@name Intro/History		This file is the central registry for all our hints.	*//*	File:		Hints.h	Contains:	Central registry for all our hints.  	Version:	Technology:	PrintingLib 8.6.5 				Release:	1.0 	Copyright:	© 1995-1999 by Apple Computer Inc. All Rights Reserved. 	Bugs?:		For bug reports, consult the following page on 				the World Wide Web:  					http://developer.apple.com/bugreporter/*/#ifndef __Hints__#define __Hints__#ifndef __LIMITS__#include <Limits.h>			#endif#ifndef __FILES__#include <Files.h>			#endif#ifndef __PrintingPlugins__#include "PrintingPlugins.h"	#endif#if PRAGMA_ONCE				#pragma once#endif#ifdef __cplusplusextern "C" {#endif#if PRAGMA_IMPORT#pragma import on#endif#if PRAGMA_STRUCT_ALIGN	#pragma options align=mac68k#elif PRAGMA_STRUCT_PACKPUSH	#pragma pack(push, 2)#elif PRAGMA_STRUCT_PACK	#pragma pack(2)#endif/**	@name Hint Types*//*** Constants ***//*	We use the following constants to track the introduction of	hints and indicate the minimum required driver version.*/#define kMinimumVersion84	0x080400#define kMinimumVersion85	0x080500#define kMinimumVersion86	0x080600#define kMinimumVersion861	0x080601#define kMinimumVersion865	0x080605#define kMinimumVersion87	0x080700/**		#kHintAppPrivateTag# allows information storage in PrintingLib collections.		So that applications and non-drivers can store information in the	printer database and other PrintingLib collections, we reserve the	'APPL' tag. A non-driver should use its signature as the id for	their data and the data contents should be a flattened collection.		@version 8.4*/#define kHintAppPrivateTag		'APPL'#define kHintAppPrivateId		kAnyAppSignature		/* This should be the application's signature. - not a real id */#define kHintAppPrivateVar		kFlattenedCollectionVar	/* A flattened collection - not a real variable type */#define kHintAppPrivateMinVers	kMinimumVersion84/** 	#kHintJobTypeTag# specifies the type of PostScript to be generated.	This hint specifies the type of PostScript to be generated.		See Technote 1113.	 	@version 8.4	@see PSHintJobType */    #define kHintJobTypeTag			'jobt'	#define kHintJobTypeId			1	#define kHintJobTypeVar			PSHintJobType	#define kHintJobTypeMinVers		kMinimumVersion84/**		#kHintGenerateConformingTag# forces ConverterLib to generate DSC conforming PostScript.	Force ConverterLib to generate DSC conforming PostScript. If this is not specified	then ConverterLib may generate Page Dependent PostScript output to improve performance,	even when background printing.		@version 8.5*/																			#define kHintGenerateConformingTag		'gdsc'#define kHintGenerateConformingId		1#define kHintGenerateConformingVar		long#define kHintGenerateConformingDef		true						#define kHintGenerateConformingMinVers	kMinimumVersion85/**		#kHintCoverPgTypeTag# indicates the need for a cover page and, if so, at what point in the print job.	The cover page hint indicates whether the client wants a cover page	job included in the file and whether it should be before or after	the bulk of the print job. If the hint is not present, then no cover	page is generated.			@version 8.4	@see PSHintCoverPg*/																			#define kHintCoverPgTypeTag		'covr'#define kHintCoverPgTypeId		1	#define kHintCoverPgTypeVar		PSHintCoverPg#define kHintCoverPgDef			psCoverPgNone#define kHintCoverPgTypeMinVers	kMinimumVersion84/**		#kHintSmoothTag# engages the smoothing of bit map fonts and images.	Use the smooth hint to turn on or off the smoothing of bit map fonts (text)	and bit map images(graphics). If this hint is not present, the default is	no smoothing at all.		@version 8.4	@see PSHintSmooth*/#define kHintSmoothTag			'smth'#define kHintSmoothId			1#define kHintSmoothVar			PSHintSmooth#define kHintSmoothDefText		false#define kHintSmoothDefGraphics	false#define kHintSmoothMinVers		kMinimumVersion84/**		#kHintOrientationTag# instructs the converter how to place drawing on the page.	Use the orientation hint to tell the converter how to place the	drawing on the page. If this hint does not exist, the default is	portrait orientation.		@version 8.4	@see PSOrient*/#define kHintOrientationTag		'ornt'#define kHintOrientationId		1#define kHintOrientationVar		PSOrient#define kHintOrientationDef		kOrientPortrait#define kHintOrientationMinVers	kMinimumVersion84/**		#kHintPageSizeNameTag# reflects the paper name corresponding to the PageSize being printed.	A PageSizeName hint reflects the paper name corresponding to the PageSize being printed.		@version 8.4*/																	#define kHintPageSizeNameTag		'psnt'#define kHintPageSizeNameId			1#define kHintPageSizeNameVar		Str255										#define kHintPageSizeNameMinVers	kMinimumVersion84/**		#kHintFlipTagThis# enables the converter to flip images, if desired, horizontally and/or vertically.	The flip hint can be used to have the converter flip the	image in either the horizantol or the vertical direction,	or neither, or both.		@version 8.4	@see PSFlip*/#define kHintFlipTag		'flip'#define kHintFlipId			1#define kHintFlipVar		PSFlip#define kHintFlipDefH		false#define kHintFlipDefV		false#define kHintFlipMinVers	kMinimumVersion84/**		#kHintBitAlignTag# allows for scaled bit image pixels to fall, as much as possible, on the device pixel. 	The client can be requested to scale bit images so that	the pixels in the image fall (as much as possible) on	device pixels. The default has bit map alignment off.		@version 8.4*/#define kHintBitAlignTag		'algn'#define kHintBitAlignId			1#define kHintBitAlignVar		Boolean#define kHintBitAlignDef		false#define kHintBitAlignMinVers	kMinimumVersion84/**		#kHintInvertTag# causes the converter to invert the printed image.	To have the converter invert the printed image, use the	invert hint.		@version 8.4*/#define kHintInvertTag			'invt'#define kHintInvertId			1#define kHintInvertVar			Boolean#define kHintInvertDef			false#define kHintInvertMinVers		kMinimumVersion84/**		#kHintScaleTag# resizes images.	The scale hint can be used to resize a page. If the hint	is not present, then the image is unscaled.			@version 8.4*/#define kHintScaleTag			'scal'#define kHintScaleId			1#define kHintScaleVar			SInt32#define kHintScaleDef			100#define kHintScaleMinVers		kMinimumVersion84/**		#kHintUDFTag# turns on unlimited downloadable fonts in the converter.	To turn on unlimited downloadable fonts in the converter, use	the UDF hint. If this hint is not present, then UDF is off.			@version 8.4*/#define kHintUDFTag				'udf '#define kHintUDFId				1#define kHintUDFVar				Boolean#define kHintUDFDef				false#define kHintUDFMinVers			kMinimumVersion84/**		#kHintCopiesTag# has the converter request, from the printer, multiple copies of each page. 	To have the converter request multiple copies of each page from the	printer, use the copies hint. If this hint is not present, then	only a single copy of each page is printed.		@version 8.4*/#define kHintCopiesTag			'copy'#define kHintCopiesId			1#define kHintCopiesVar			SInt32#define kHintCopiesDef			1#define kHintCopiesMinVers		kMinimumVersion84/**		#kHintPaperTag# provides the paper (canvas) size and its imageable area.	The paper hint gives the size of the paper (canvas) and the	imageable area within the paper. This representation is	currently the same as the rPaper and rPage rects in a print	record. We'll probably want to make it more abstract. This	hint is currently required!			@version 8.4	@see PSPaper*/#define kHintPaperTag			'papr'#define kHintPaperId			1#define kHintPaperVar			PSPaper#define kHintPaperMinVers		kMinimumVersion84/**		#kHintFontSubTag# enables the substitution of one font for another.	To have one font substituted for another, add one or more	font substitution hints. Each hint is made up of two Pascal	strings and a Fixed number. The second Pascal string and the	Fixed number each begin on word (16 bit) boundaries. In each	hint, the first Pascal string is the name of the font that	should be replaced. The second string is the font that will	be substituted for the first. The Fixed number is the amount	to scale the substituted font.If there are no font substitution	hints, then no font substitution is performed.		@version 8.4*/																	#define kHintFontSubTag			'fsub'///#define kHintFontSubId		Multiple hints, one per font to be substituted.///#define kHintFontVar			PString (word padded), PString (Word padded), Fixed#define kMaxFontNameLen			48											#define kFontSubHintMaxSize 	kMaxFontNameLen * 2 + sizeof(Fixed)			#define kHintFontSubMinVers		kMinimumVersion84/** 	#kHintNoBitmapForPSFontTag# configures the font database code so that it may substitute a 	bitmap version for an unavailable PostScript font.	This hint is used to configure the font database code so that it does or does not	substitute a bitmap version for an unavailable PostScript font. If the font is not	in the printer or on the host and available for downloading, we WILL substitute a	bitmap font, unless this hint is used with the value TRUE.		@version 8.4*/																	#define kHintNoBitmapForPSFontTag		'bsub'#define kHintNoBitmapForPSFontId		1#define kHintNoBitmapForPSFontVar		Boolean#define kHintNoBitmapForPSFontDef		false#define kHintNoBitmapForPSFontMinVers	kMinimumVersion84/**		#kHintPagesTypeTag# reflects the document's total number of pages.	A Number of pages hint that indicates the total number of pages in a document.		@version 8.4	@see PSPagesType*/																	#define kHintPagesTypeTag		'pags'#define kHintPagesTypeId		1#define kHintPagesTypeVar		PSPagesType#define kHintPagesTypeMinVers	kMinimumVersion84enum { kUnknownTotalPages = -1 };	/**		#kHintDocNameTag# displays the name of the printing document.	A Document Name hint that indicates the document name being printed.		@version 8.4*/#define kHintDocNameTag		'dtit'#define kHintDocNameId		1#define kHintDocNameVar		Str255#define kHintDocNameDef		"\pUnknown"#define kHintDocNameMinVers	kMinimumVersion84/**	#kHintAppNameTag# indicates the name of the printing application.	A application name hint. This is the app name of the application doing printing. 		@version 8.4*/#define kHintAppNameTag		'dapp'#define kHintAppNameId		1#define kHintAppNameVar		Str255#define kHintAppNameDef		"\pUnknown"								#define kHintAppNameMinVers	kMinimumVersion84/**		#kHintClientNameTag# holds the client's name through which the application is printing.	A client name hint. This is the name of the client through which the app is printing.	For example it would be LaserWriter 8 or PSPrinter.			@version 8.4*/#define kHintClientNameTag		'dcre'#define kHintClientNameId		1#define kHintClientNameVar		Str255#define kHintClientNameDef		"\pUnknown"							#define kHintClientNameMinVers	kMinimumVersion84/**		#kHintClientVersionTag# indicates the version number string of the client doing the printing.	The version number hint. This is the version number of the client printing.		@version 8.4*/#define kHintClientVersionTag		'dver'#define kHintClientVersionId		1#define kHintClientVersionVar		Str255#define kHintClientVersionDef		"\pUnknown"						#define kHintClientVersionMinVers	kMinimumVersion84/**		#kHintUserNameTag# provides the user's name.	Name of the user printing the document (as set in the File Sharing Control Panel).		@version 8.4*/#define kHintUserNameTag		'dfor'#define kHintUserNameId			1#define kHintUserNameVar		Str255#define kHintUserNameDef		"\pUnknown"							#define kHintUserNameMinVers	kMinimumVersion84/**		#kHintNupTag# indicates the n-up pages layout.	This hint indicates the n-up pages layout for this print job, and, if applicable, the	rotation  nx, ny, frame width, number of frames, page direction, and order of page direction.		@version  8.4	@see PSNupDesc*/															#define kHintNupTag		'nupd'#define kHintNupId		1#define kHintNupVar		PSNupDesc#define kHintNupMinVers	kMinimumVersion84#define kHintNupNumberDef			layout1Up				#define kHintNupFramewidthDef  		kNoFrameWidth			#define kHintNupFramenumberDef 		kNoFrames				#define kHintNupLayoutDirDef		kNupLeftToRight			#define kHintNupLayoutRotationDef	0						#define kHintNupLayoutXPgsDef		1						#define kHintNupLayoutYPgsDef		1						#define kHintNupAcrossBeforeDownDef	kNupAcrossBeforeDown	#define kHintNupNumberMinVers		kMinimumVersion84/**		#kHintColorModeTag# indicates the color usage for the print job.	This hint indicates the color usage for this print job. 		@version  8.4	@see  PSColorMode*/																#define kHintColorModeTag		'cusg'			#define kHintColorModeId		1#define kHintColorModeVar		PSColorMode#define kHintColorModeDef		kColorMode#define kHintColorModeMinVers	kMinimumVersion84/**	#kHintManualFeedTag#.		Manual Feed Hint.  Used to signal to feature code that manual feed is being	used. This indicates the need for manual feed timeouts and also to signal	Print Monitor or Desktop Printing that the print job requires manual feed.	@version  8.4*/													#define kHintManualFeedTag				'manu'		#define kHintManualFeedId				1			#define kHintManualFeedVar				Boolean#define kHintManualFeedDef				false	#define kHintManualFeedMinVers			kMinimumVersion84/**	#kHintEhandlerUsageTag# indicates the error handling mode for this print job..		This hint indicates the error handling mode for this print job.		@version 8.4*/#define kHintEhandlerUsageTag				'ehnd'		#define kHintEhandlerUsageId				1			#define kHintEhandlerUsageVar				UInt8#define kHintEhandlerUsageDef				noErrorHandler	#define kHintEhandlerUsageMinVers			kMinimumVersion84/**		#kHintEighthBitTag#, when the value is 'false', prevents the converter from emitting 	bytes with the high bit set.		When generating PostScript for the output stream, the converter will 	by default use, if needed, characters in the range 0x80-0xFF inclusive. 	Use the 'kHintEighthBitTag'  with a value of 'false' to prevent the converter 	from emitting bytes with the high bit set.		@version 8.4*/														#define kHintEighthBitTag			'bit8'#define kHintDataFormatId			1#define kHintEighthBitId			kHintDataFormatId		#define kHintDataFormatVar			Boolean#define kHintDatFormatDef			true#define kHintEighthBitMinVers		kMinimumVersion84/**		#kHintTransparentChannelTag#, when set with a value of 'false', prevents the converter 	from emitting bytes less than 0x20.		When generating PostScript for the output stream, the converter will by default	use, if needed, characters in the range 0x00-0x1F inclusive. Use the 	'kHintTransparentChannelTag' with a value of 'false' to prevent the converter 	from emitting bytes less than 0x20.		@version  8.4*/#define kHintTransparentChannelTag			'trns'#define kHintTransparentChannelId			1#define kHintTransparentChannelVar			Boolean#define kHintTransparentChannelDef			true#define kHintTransparentChannelMinVers		kMinimumVersion84/**		#kHintResponseTimeoutTag# sets the time at which the converter, if there is no	reply from the printer, returns a timeout error.	After the converter sends a query, it will wait a prescribed amount of	time for a reply from the printer before returning a timeout error. Use	the 'kHintResponseTimeoutTag' to set this timeout value. The value is given	in seconds.		@version  8.4*/#define kHintResponseTimeoutTag			'rsto'#define kHintResponseTimeoutId			1#define kHintResponseTimeoutVar			long#define kHintResponseTimeoutDef			90					#define kHintResponseTimeoutMinVers		kMinimumVersion84/**		#kHintManualFeedTimeoutTag# sets the specific time for a timeout error return after	the converter has requested a manual feed.	When the converter requests manual feed from the printer, it also sets the	manual feed timeout using the following hint. 		@version  8.4*/																	#define kHintManualFeedTimeoutTag		'mnto'#define kHintManualFeedTimeoutId		1#define kHintManualFeedTimeoutVar		long#define kHintManualFeedTimeoutDef		300#define kHintManualFeedTimeoutMinVers	kMinimumVersion84/**		#kHintJobTimeoutTag# sets the value for the job timeout.	The job timeout value can be set with the following hint. 		@version  8.4*/																	#define kHintJobTimeoutTag			'jbto'#define kHintJobTimeoutId			1#define kHintJobTimeoutVar			long#define kHintJobTimeoutDef			600			#define kHintJobTimeoutMinVers		kMinimumVersion84/**		#kHintIncludeFontsTag# consists of a four byte flag followed by a list of	NULL terminated font names.	The font handling hint consists of a four byte flag followed by a list of	NULL terminated font names. If the flag is 'kIncludeNoFontsOtherThan',	then the converter will only include the font definitions of fonts that are	listed after the flag. If there are no fonts names after the flag, then no	font resources are included in the output. If the flag is 'kIncludeAllFontsBut',	then font resources are included in the output unless the font names is listed.	To include all fonts, then use the 'kIncludeAllFontsBut' flag with	no fonts listed afterwards.		See Technote 1113.		@version  8.4	@see  PSFontHandling*/#define kHintIncludeFontsTag		'font'#define kHintIncludeFontsId			1#define kHintIncludeFontsVar		PSFontHandling		/// incomplete struct#define kHintIncludeFontsMinVers	kMinimumVersion84/**		#kHintPrinterNameTag# indicates the PAPA resource for the printer.	This hint indicates the printer name, the printer type, and zone.			Note: A 'papa' hint with an ID of 1 is a plain, non-extended 'papa' resource.		A 'papa' hint with an ID of 2 indicates that the 'papa' resource	has been extended.  It gives the same information as the 'papa' hint with	ID 1 and also gives information specific to extended print records.	Note: For a detailed discussion of the ExtendedPrintRecord, please see the Extended	Papa TechNote: "TN1115: LaserWriter 8.5.1: The Extended 'PAPA' Resource." 	(http://devworld.apple.com/dev/technotes/tn/tn1115.html)		@version  8.4*/#define kHintPrinterNameTag			'papa'#define kHintPrinterNameId			1#define kHintPrinterNameNewId		2	#define kHintPrinterNameVar			EntityName		#define kHintPrinterNameDef			"\pUnknown"#define kHintPrinterNameMinVers		kMinimumVersion84/**		#kHintPPDTag# reflects which PPD is selected for the printer.		This hint indicates whether the printer is setup and, if so, with which PPD	it has been setup. If a printer is setup, that means the driver has successfully	queried the printer for the hints listed below, such as the printer's product name,	its PostScript version, and its resolution.		See Technote 1131.		@version  8.4	@see  WhatPPD*/#define kHintPPDTag				'ppd '#define kHintPPDId				1#define kHintPPDVar				WhatPPD#define kHintPPDMinVers			kMinimumVersion84/**		#kHintParsedPPDTag# holds the FSSpec of the Parsed PPD.  	The FSSpec of the Parsed PPD is held in the kHintParsedPPD hint.	If the hint doesn't exist then the parsed PPD has the same name	as the PPD file specified in the 'kHintPPD' hint and the folder is	the parsed PPD folder. 		See Technote 1131.		@version  8.4*/																#define kHintParsedPPDTag		'pppd'#define kHintParsedPPDId		1#define kHintParsedPPDVar		FSSpec#define kHintParsedPPDMinVers	kMinimumVersion84/**		#kHintADOSpoolerTag# indicates whether the printer is a spooler.	Flag indicating if we're printing to a spooler.		@version  8.4	@see TriState*/#define kHintADOSpoolerTag		'spol'#define kHintADOSpoolerId		1#define kHintADOSpoolerVar		TriState#define kHintADOSpoolerDef		kTriUnknown		#define kHintADOSpoolerMinVers	kMinimumVersion84/**		#kHintADOIsBinaryOKTag# indicates whether communication channel and printer can	handle binary data.		The binary OK flag tells us if communication channel and printer can handle binary.	It is pretty much always true, but some router boxes require that it is set	to false. We don't have any UI at the moment to do this.		See Technote 1113.		@version  8.4	@see TriState*/#define kHintADOIsBinaryOKTag		'bnok'#define kHintADOIsBinaryOKId		1#define kHintADOIsBinaryOKVar		TriState#define kHintADOIsBinaryOKDef		kTriUnknown		#define kHintADOIsBinaryOKMinVers	kMinimumVersion84/** 	#kHintLanguageLevelTag# indicates the PostScript level of the printer.	This hint indicates the printer's PostScript level. -1 indicates unknown, probably because 	we haven't setup the device, or if it's a spooler.		See Technote 1113.		@version   8.4*/#define kHintLanguageLevelTag		'pslv'#define kHintLanguageLevelId		1#define kHintLanguageLevelVar		long			#define kHintLanguageLevelDef		UnknownLevel	#define kHintLanguageLevelMinVers	kMinimumVersion84/** 	#kHintPSVersionTag# holds the PostScript version and revision.	This hint indicates the PostScript version and revision.		@version  8.4	@see  PSVersion*/#define kHintPSVersionTag			'psvr'#define kHintPSVersionId			1#define kHintPSVersionVar			PSVersion#define kHintPSVersionVersDef		"\p"			#define kHintPSVersionRevisionDef	-1				#define kHintPSVersionMinVers		kMinimumVersion84/** 	#kHintPrinterResTag# provides the resolution of the printer.	This hint indicates the resolution of printer in dots per inch.		@version  8.4	@see PSResolution*/#define kHintPrinterResTag		'psrs'#define kHintPrinterResId		1#define kHintPrinterResVar		PSResolution#define kHintPrinterResDef		300				#define kHintPrinterResMinVers	kMinimumVersion84/** 	#kHintFreeVMTag# indicates the amount of free VM.	This hint indicates the amount of free VM. The version kHintFreeVMNoReclaimId	ensures that VM is reclaimed prior to determining the amount of free VM.		@version  8.4*/#define kHintFreeVMTag			'frvm'#define kHintFreeVMWReclaimId		1			#define kHintFreeVMNoReclaimId		2			#define kHintFreeVMVar			long			#define kHintFreeVMDef			-1				#define kHintFreeVMMinVers		kMinimumVersion84/**	#kHintProductTag# indicates the product name returned by the printer.	This hint indicates the product name returned by the printer.		@version  8.4*/#define kHintProductTag			'prod'#define kHintProductId			1#define kHintProductVar			Str63			#define kHintProductDef			"\p"			#define kHintProductMinVers		kMinimumVersion84/**	#kHintColorDeviceTag# is a flag indicating whether the printer is capable of color printing.	Flag indicating if printer is capable of printing in color. 		@version  8.4	@see TriState*/#define kHintColorDeviceTag			'cold'#define kHintColorDeviceId			1#define kHintColorDeviceVar			TriState#define kHintColorDeviceDef			kTriUnknown		#define kHintColorDeviceMinVers		kMinimumVersion84/** 	#kHintRamSizeTag# reflects the size of RAM installed in a printer.	This hint indicates the size of RAM installed in printer. This value might be synthesized	by the query if the ramsize operator system parameter is not available. 	   	@version  8.4*/#define kHintRamSizeTag			'rams'#define kHintRamSizeId			1#define kHintRamSizeVar			long			/// -1 => unknown#define kHintRamSizeDef			-1				#define kHintRamSizeMinVers		kMinimumVersion84/** 	#kHintTTRasterizerTag# provides what kind of TT rasterizer is available.	What kind of TT rasterizer is available/can the printer accept the 	downloaded 68k scaler?		@version  8.4*/#define kHintTTRasterizerTag		'ttra'#define kHintTTRasterizerId			1#define kHintTTRasterizerVar		long			#define kHintTTRasterizerDef		kTTRasterizerUnknown	#define kHintTTRasterizerMinVers	kMinimumVersion84/** 	#kHintColorSepTag# is used to determine if the printer is configured to do color 	separations. 	This hint is used to determine if the printer is configured to do color 	separations.		@version  8.5	@see TriState*/#define kHintColorSepTag		'csep'#define kHintColorSepId			1#define kHintColorSepVar		TriState#define kHintColorSepDef		kTriUnknown#define kHintColorSepMinVers	kMinimumVersion85/**		#kHintFGPrintingPreferredTag# is used to specify a query as to whether the output device 	prefers foreground printing.		Some spoolers may respond true to the query and if so, we configure our	default settings so that foreground printing is selected for that printer.		@version  87	@see TriState*/#define kHintFGPrintingPreferredTag		'fgpf'#define kHintFGPrintingPreferredId			1#define kHintFGPrintingPreferredVar		TriState#define kHintFGPrintingPreferredDef		kTriUnknown#define kHintFGPrintingPreferredVers	kMinimumVersion87/**		#kHintTimeStampTag# the time the printer was queried for setup information.	If we need to record times in hints we use the 'kHintTimeStampTag' tag.	The 'kHintSetupTimeId' is used as the id of the hint which stores	the time we queried the printer for setup information. 		@version  8.4*/														#define kHintTimeStampTag		'time'#define kHintSetupTimeId		1				#define kHintTimeStampVar		unsigned long#define kHintTimeStampMinVers	kMinimumVersion84/**		#kHintRoutingTag#, if present, is used to create a %%Routing DSC	comment.	The 'kHintRoutingTag' hint, if present, is used to create a %%Routing DSC	comment. If the hint is not present, then the %%Routing comment is	not emitted. 		@version  8.4*/														#define kHintRoutingTag			'rout'#define kHintRoutingId			1#define kHintRoutingVar			Str255			#define kHintRoutingMinVers		kMinimumVersion84/**		#kHintProcessColorTag# informs the converter as to the process colors	used on a document or page.	Use the 'kHintProcessColor' hint to tell the converter about the	process colors used on a document/page. The converter uses this hint	to generate %%DocumentProcesssColors and %%PageProcessColors DSC	comments. If a hint doesn't exist for a color then no hint is generated	for that color - the color is assumed not to be used. 		@version  8.4*/#define kHintProcessColorTag		'pcol'#define kHintProcessCyanId			1#define kHintProcessMagentaId		2#define kHintProcessYellowId		3#define kHintProcessBlackId			4#define kHintProcessColorVar		Boolean#define kHintProcessColorDef		false#define kHintProcessColorMinVers	kMinimumVersion84/**	#kHintClientStatusGrabTimeTag# allows clients to instruct the Download Manager (or	potentially other software) how often they want their status	procs called by the underlying communications code.		This hint is to allow clients to instruct the Download Manager	(or potentially other software) how often they want their status	procs called by the underlying communications code.		@version  8.6*/#define kHintClientStatusGrabTimeTag		'cgrb'#define kHintClientStatusGrabTimeId			1#define kHintClientStatusGrabTimeVar		UInt32#define kHintClientStatusGrabTimeDef		6L				#define kHintClientStatusGrabTimeMinVers	kMinimumVersion86/**	#kHintModifyFeatureCodeTag# specifies whether any feature replacement in the existing stream is necessary.		This hint specifies whether to do any feature replacement in the existing	stream. Default is true, which does replacement. This currently only affects	the LowPSConverter and is not relevant to the normal QD->PS conversion.	@version  8.6*/																#define kHintModifyFeatureCodeTag		'lmfc'#define kHintModifyFeatureCodeId		1#define kHintModifyFeatureCodeVar		Boolean#define kHintModifyFeatureCodeDef		true#define kHintModifyFeatureCodeMinVers	kMinimumVersion86/**	#kHintGenerateIncludeFeatureCodeTag# specifies whether to replace the %%Begin/EndFeature comments with the	%%IncludeFeature comment when the feature does not exist in the PPD file.		This hint specifies whether to replace the %%Begin/EndFeature comments with    the %%IncludeFeature comment when the feature does not exist in the PPD file.    Default is true which will do the replacement. This currently only affects    the LowPSConverter and is not relevant to the normal QD->PS conversion.	@version  8.6*/#define kHintGenerateIncludeFeatureCodeTag		'lgif'#define kHintGenerateIncludeFeatureCodeId		1#define kHintGenerateIncludeFeatureCodeVar		Boolean#define kHintGenerateIncludeFeatureCodeDef		true#define kHintGenerateIncludeFeatureCodeMinVers	kMinimumVersion86/**	#kHintDoAutoScalingTag# indicates whether to use auto scaling when generating PS code.		Hint to specify whether to use auto scaling when generating PS code.    The kAutoScalingAction in the feature handling code looks at this hint    to decide whether to do auto scaling. Auto scaling may be turned off when we    the final destination is PDF for example.		@version  8.6*/												#define kHintDoAutoScalingTag		'lbox'#define kHintDoAutoScalingId		1#define kHintDoAutoScalingVar		Boolean#define kHintDoAutoScalingDef		true#define kHintDoAutoScalingMinVers	kMinimumVersion86/**	#kHintSupplyNeededFontsTag# specifies whether to supply needed fonts in to the LowPSConverter output stream.		Hint to indicate whether to supply needed fonts into the LowPSConverter output stream. 	Default is true. This currently only affects the LowPSConverter and is not relevant to	the normal QD->PS conversion.		@version 8.6*/#define kHintSupplyNeededFontsTag		'lunf'#define kHintSupplyNeededFontsId		1#define kHintSupplyNeededFontsVar		Boolean#define kHintSupplyNeededFontsDef		true#define kHintSupplyNeededFontsMinVers	kMinimumVersion86/**	#kHintEPSBBoxTag# is a tag for passing bounding box information to ConverterLib and/or FeatureUtilsLib.		This hint, with tag value kHintEPSBBoxId is used by ConverterLib to capture and record QD bounding box	information when generating EPS files.		This hint, with tag value kHintScalingBBoxId is used by clients of FeatureUtilsLib to single page bounding box	information for use with the autoscaling code that FeatureUtilsLib can provide.		@version  8.4*/#define kHintEPSBBoxTag				'EPBX'		#define kHintEPSBBoxId				1			#define kHintScalingBBoxId			2			#define kHintEPSBBoxVar				Rect#define kHintEPSBBoxMinVers			kMinimumVersion84/**	#kHintDeviceIsGrayOnlyTag# instructs the converter whether to downsample images to grayscale.		This hint tells the converter whether or not to downsample 16 and 32 bit 	sampled images to grayscale. This is done for performance reasons when the	client is confident that the printer is not a color	printer and is also	not doing color separations.		@version  8.4*/#define kHintDeviceIsGrayOnlyTag		'dgry'	#define kHintDeviceIsGrayOnlyId			1#define kHintDeviceIsGrayOnlyVar		Boolean#define kHintDeviceIsGrayOnlyDef		false#define kHintDeviceIsGrayOnlyMinVers	kMinimumVersion84/** 	#kHintLandscapeRotationTag# instructs the converter how to rotate pages for landscape orientation.		This hint tells the converter how to rotate pages for landscape orientation.	This includes not only landscape formatted pages but portrait and landscape	pages which are rotated because of nup effects. If the value of the hint is	false, then the normal converter landscape orientation is used (-90). If the 	value of the hint is true, then the converter does 'reverse' landscape (+90).		@version  8.4*/																#define kHintLandscapeRotationTag		'lrot'	#define kHintLandscapeRotationId		1#define kHintLandscapeRotationVar		Boolean#define kHintLandscapeRotationDef		false#define kHintLandscapeRotationMinVers	kMinimumVersion84/** 	#kHintPapToDiskTag# controls whether stream code generates a PapToDisk file.		This hint controls whether stream code generates a PapToDisk file when printing to a printer.	This hint is ignored by stream code when writing to file.		@version  8.5*/															#define kHintPapToDiskTag		'ptdk'#define kHintPapToDiskId		1#define kHintPapToDiskVar		Boolean#define kHintPapToDiskDef		false#define kHintPapToDiskMinVers	kMinimumVersion85/**		#kDrHintFSSpecTag# enables the file location of the PS/EPS file to be created	and stored as an FSSpec.					The file location of the PS/EPS file to be created is stored as an FSSpec	in the following hint.						@version  8.4	*/#define kDrHintFSSpecTag		'Dspc'#define kDrHintFSSpecId			1#define kDrHintFSSpecVar		FSSpec#define kDrHintFSSpecMinVers	kMinimumVersion84/**		#kDrHintFileTypeTag# holds the type and creator of the PS/EPS we will be creating	on a save to disk.		The file type hint is used to hold the type and creator of the PS/EPS	we will be creating on a save to disk.		   	@version  8.4		@see  HintTypeCreator*/#define kDrHintFileTypeTag		'Dtyp'#define kDrHintFileTypeId		1#define kDrHintFileTypeVar		HintTypeCreator#define kDrHintFileTypeMinVers	kMinimumVersion84/**		#kHintUseCollationTag# allows the client to force collation.		Allow the client to force collation.		@version  8.6*/															#define kHintUseCollationTag			'UsCo'#define kHintUseCollationId				1#define kHintUseCollationDef			1#define kHintUseCollationVar			short#define kHintUseCollationMinVers		kMinimumVersion86/**		#kHintUseResourceFontTag#, if true, generates comments of the form %%IncludeResource:	font instead of %%IncludeFont:.		AdobePS and other clients want to generate comments of the form %%IncludeResource: 	font instead of %%IncludeFont. If this hint is true, this new format is used.		@version  8.5*/#define kHintUseResourceFontTag			'Rfnt'#define kHintUseResourceFontId			1#define kHintUseResourceFontVar			Boolean#define kHintUseResourceFontDef			false																	#define kHintUseResourceFontMinVers		kMinimumVersion85/**	#kHintPlugInCollTag# reflects that plugIn collections are flattened and added.		PlugIn collections are flattened and added as this hint, with the 	ID being a registered signature.		@version  8.7*/																#define kHintPlugInCollTag		'aapl'#define kHintPlugInCollID#define kHintPlugInCollVar		#define kHintPlugInCollMinVers	kMinimumVersion87				/*  Variable Types *//**	@name Variable Types*//**	@name PostScript Levels	This enumeration is used to convey information about the	PostScript language level which must be supported by a given	print job. The positive values correspond to the only language level	that must be supported; this is normally direct printing where the	language level of the device is known.		Negative values returned from this query are associated with either 	an Unknown response or indicate a request for generating output compatible 	with a given minimum language level. 		If the language level returned is UnknownLevel or Level1and2, then typically 	the client should generate output compatible with PostScript language level 1. 	Such output may use language level 2 or language level 3 features but it must do 	so in a way that also executes properly on a language level 1 output device. If 	the value is Level2and3, this indicates that the generated PostScript must be 	compatible with a language level 2 output device. Such output may use PostScript 3 	features but must do so in a way that also executes properly on a language 	level 2 output device.*/	/** PostScriptLevels */	enum PostScriptLevels{		/// Level 2 Compatible		Level2and3 = -3,					/// Level 1 Compatible		Level1and2 = -2,		/// unknown level		UnknownLevel = -1,		/// other level		OtherLevel = 0,		/// level 1		Level1 = 1,		/// level 2		Level2 = 2,		/// level 3		Level3 = 3						};/**	@name HintTypeCreator	Use this data structure with the 'kDrHintFileType' hint.*/	/** HintTypeCreator */	struct HintTypeCreator{		/// type  		OSType type;		/// creator		OSType creator;	};	typedef struct HintTypeCreator HintTypeCreator;/**	@name errorHandlerType 	Indicates the type of error handling support that is	requested by the client.*/                                    	/** errorHandlerType */	enum errorHandlerType {			///  initial value setting		noErrorHandler = 0,		///  summarize		summarizeOnScreen,		///  print		printDetailedReport	};	typedef enum errorHandlerType errorHandlerType;/**	@name TriState	Since ppOptTrue, ppOptFalse, and ppOptUnknown have gone away, we can use	this enum. */	                                 	/** TriState */ 	enum TriState{		/// false		kTriFalse = 0,		/// true		kTriTrue,		/// unknowm		kTriUnknown	};	typedef enum TriState TriState;/**	@name PSHintJobType	A PSHintJobType variable is used in the 'kHintJobTypeTag'*/	/** PSHintJobType */		enum PSHintJobType{		/// PostScript job		psJobPostScript = 0,		/// EPSNoPreview		psJobEPSNoPreview	};	typedef enum PSHintJobType PSHintJobType;/**	@name PSHintCoverPg	Use the (kHintCoverPgTypeTag, kHintCoverPgTypeId) hint to request	a cover page and to indicate where in the job it should be emitted.*/	/** PSHintCoverPg */				enum PSHintCoverPg{		/// no cover page		psCoverPgNone = 0,		/// cover page before job		psCoverPgBefore,		/// cover page after job		psCoverPgAfter	};	typedef enum PSHintCoverPg PSHintCoverPg;/**	@name PSHintSmooth 	The smoothing hint (kHintSmoothTypeTag, kHintSmoothTypeId), should	be used to request the smoothing of bit map fonts (text) and	bit map images (graphics). The default is no smoothing at all.*/	/** PSHintSmooth */	struct PSHintSmooth{		/// is there smoothing of bit map fonts?		Boolean text;		/// is there smoothing of bit map images?		Boolean graphics;	};	typedef struct PSHintSmooth PSHintSmooth;/**	@name PSOrient 	The hint (kHintOrientationTypeTag, kHintOrientationTypeId) tells	the converter how the image should be placed on the paper.	The mode, 'kOrientAltPortrait' is not support and if it is used	the results are undefined. The converter default to portrait.*/	/** PSOrient */	enum PSOrient{		///  default setting		kOrientPortrait = 0,		///  alt portrait		kOrientAltPortrait,				/* Unsupported!	*/		///  landscape		kOrientLandscape,		///  alt landscape		kOrientAltLandscape	};	typedef enum PSOrient PSOrient;/**	@name PSFlip	The flip hint (kHintFlipTypeTag, kHintFlipTypeId) is used to get	horizontal and vertical flipping of the image on a page.*/	/** PSFlip */	struct PSFlip{ 		/// Does the image flip horizontally?		Boolean horizontal;		/// Does the image flip vertically?		Boolean vertical;	};	typedef struct PSFlip PSFlip;/**	@name PSResl 	The resolution hint (kHintReslTag, kHintReslId) tells the converter	the resolution of the QuickDraw data being converted. If this hint	does not exist then 72x72 dpi is used.*/	/** PSResl */	struct PSResl{		/// horizontal		SInt32 horizontal;		/// vertical		SInt32 vertical;	};	typedef struct PSResl PSResl;/**	@name PSRect	A structure for conveying rect data but with a wider	range of values that can be represented than a standard	QD Rect.*/	/** PSRect */	struct PSRect{		/// top		SInt32 top;		/// left		SInt32 left;		/// bottom		SInt32 bottom;		/// right		SInt32 right;	};	typedef struct PSRect PSRect;/**	@name PSPaper 	The paper hint gives the size of the paper (canvas) and the	imageable area within the paper. This representation is	currently the same as the rPaper and rPage rects in a print	record. We'll probably want to make it more abstract.*/	/** PSPaper */ 	struct PSPaper{		///  paper		PSRect paper;		///  image		PSRect image;	};	typedef struct PSPaper PSPaper;/**	@name PSPageOrder 	PageOrder information for DSC comments*/	/** PSPageOrder */	enum PSPageOrder{		/// Pages can be reordered, but the original sorting is unknown.		kPSOrderUnknown,	 		/// Pages can be reordered, but start in an ascending order.		kPSOrderAscending,	 		/// Pages can be reordered, but start in a descending order.		kPSOrderDescending,	 		/// Pages can not be reordered.		kPSSpecial				};	typedef enum PSPageOrder PSPageOrder;/**	@name PSPagesType	A structure to pass data about the number of pages in a document and the page 	ordering information.*/	/** PSPagesType */ 	struct PSPagesType{		///  pages		SInt32 pages;		///  order		PSPageOrder order;	};	typedef struct PSPagesType PSPagesType;/**	@name PSColorMode 	These are the different color modes that ConverterLib can be placed into:	kBlackAndWhiteMode: foreground is always black, background is white. rb382.	kColorMode: 	uncalibrated RGB.	kColorSyncMode: Use ColorSync to perform color matching.	kColorSpaceMode:Turn source profiles into PS color spaces.	kMakeCRDMode: 	Turn destination profiles into CRDs.		This enum must match the order of the options in the color popup.*/	/** PSColorMode */	enum PSColorMode{		///  foreground is always black, background is white.		kBlackAndWhiteMode = 1,											///  uncalibrated RGB.		kColorMode,		///  calibrated color		kCalibratedColorMode,	/* The modes from here on require ColorSync */		///  Use ColorSync to perform color matching.		kColorSyncMode,			///  Turn destination profiles into CRDs.		kMakeCRDMode,		///  gray scale		kGrayscaleMode				};	typedef enum PSColorMode PSColorMode;#define minColorModeUsage kBlackAndWhiteItem	#define maxColorModeUsage kGrayscaleMode  		/**  	@name CustPPDInfo 	For the default PPD, usePPD is TRUE if (we think) the ppd file exists	For the custom PPD, usePPD is TRUE if custom is selected over the default */  	/** CustPPDInfo */	struct CustPPDInfo {		///  is custom selected over the default?		Boolean			usePPD;		///  spec    	FSSpec			fileSpec;	};	typedef struct CustPPDInfo CustPPDInfo, *CustPPDInfoP, **CustPPDHandle;		/**	@name PPDPresetSource 	This enumeration contains the values used in the presetSource field	of the WhatPPD structure. These values indicate where the source	PPD file is located. The value kPPDSourceUnknown indicates that the	source is unknown. THe value kPPDSourceGeneric means that the Generic	PPD (built into PrintingLib) is used as the source PPD. The value	kPPDSourceCustom means that a custom PPD file is the source.*/	/** PPDPresetSource */	enum PPDPresetSource {		///Unknown		kPPDSourceUnknown = -1,		///RSRC - currently unused		kPPDSourceRSRC = 0,		///Generic		kPPDSourceGeneric = 1,		///Custom		kPPDSourceCustom = 2	};/**	@name WhatPPD 	WARNING: the presetSource field of the WhatPPD structure wasn't properly			set prior to LW 8.4.2 so beware. It is recommended that users of this			structure  look at the customPPD.usePPD field instead.  If customPPD.usePPD			is false then the presetSource field should be kPPDSourceGeneric.  If 			customPPD.usePPD is true, then the presetSource field should be kPPDSourceCustom.		presetSource indicates which PPD was actually used, customPPD which PPD	the user would like to be used. If we can't find a custom PPD file, or if	parsing it resulted in an error, we will use the default PPD resource and	presetSource will be 1. isSetup indicates if we've done an auto setup for	the device.*/																			/** WhatPPD */	struct WhatPPD{		/// enum PPDPresetSource		short presetSource;				///  Tristate		TriState isSetup;		///  Custom PPD Info		CustPPDInfo customPPD;	};	typedef struct WhatPPD WhatPPD;/**	@name PSVersion 	The PostScript version and revision corresponding to the 'version' and 'revision' operators. This	data is usually obtained by querying the printer.*/	/** PSVersion */	struct PSVersion{		///  revision		long revision;		/// "\p" => unknown		Str63 version;			};	typedef struct PSVersion PSVersion;/**	@name PSResolution	The device resolution (in dpi) of a PostScript output device. This	data is usually obtained by querying the printer. Note that	some printers can have their resolution changed so this data	may or may not correspond to the device resolution at the time	a given job is executed.		If the resolution is unknown, then both the x and y resolution will	be -1.*/	/** PSResolution */		struct PSResolution{		/// -1 => unknown		long x;						///  y resolution		long y;	};	typedef struct PSResolution PSResolution;/**	@name TTRasterizerType	This type defines the type of support a given PostScript output	device has for TrueType fonts. */	/** TTRasterizerType */	enum TTRasterizerType {		///  unknown		kTTRasterizerUnknown = 0,			///  none		kTTRasterizerNone = 1,				///  accept 68k		kTTRasterizerAccept68K = 2,			/// type 42		kTTRasterizerType42 = 3			};/**	@name Font Inclusion	This is a list of tag values that can be used with the tag field	of the psFontHandling structure.	@see  PSFontHandling*/	/** FontInclusion */	enum FontInclusion{		/// No fonts other than		kIncludeNoFontsOtherThan,		/// All fonts but		kIncludeAllFontsBut	};/**	@name PSFontHandling	This structure is the way that data for the font inclusion hint kHintIncludeFontsTag specifies	its data. The data is a tag, followed by a packed list of Pascal strings which is terminated	by a 0 length name.		The tag field determines the interpretation of the names which follow. If the tag is 	kIncludeNoFontsOtherThan, then the only fonts which need to be included are those in the	list of names. If the tag is kIncludeAllFontsBut then the list of names corresponds to all	the fonts in the output device and fonts which are not in this list should be included.*/	/** PSFontHandling */		struct PSFontHandling{		///  tag		long tag;		/// array of names, length 0 indicates end of list		unsigned char name[1];			 	};	typedef struct PSFontHandling PSFontHandling;#if PRAGMA_STRUCT_ALIGN	#pragma options align=reset#elif PRAGMA_STRUCT_PACKPUSH	#pragma pack(pop)#elif PRAGMA_STRUCT_PACK	#pragma pack()#endif#ifdef PRAGMA_IMPORT_OFF#pragma import off#elif PRAGMA_IMPORT#pragma import reset#endif#ifdef __cplusplus}#endif#endif /* __Hints__		*/