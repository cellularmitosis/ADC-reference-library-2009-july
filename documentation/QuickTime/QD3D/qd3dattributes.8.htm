<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE> Defining Custom Attribute Types</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="H2.Heading2"><A NAME="pgfId=3211"> </A><A NAME="18290"> </A>Defining Custom Attribute Types</H1><P CLASS="T1.Text1"><A NAME="pgfId=3215"> </A>QuickDraw&nbsp;3D allows you to define custom attribute types so that you can attach to a vertex (or&nbsp;face, or geometric object, or group, or view) types of data different from those associated with the basic attribute types defined by QuickDraw&nbsp;3D. Once you have defined and registered your custom attribute type, you manipulate attributes of that type exactly as you manipulate the standard QuickDraw&nbsp;3D attributes. For example, you add a custom attribute to an attribute set by calling <TT CLASS="cv">Q3AttributeSet_Add</TT>, and you retrieve the data associated with a custom attribute by calling <TT CLASS="cv">Q3AttributeSet_Get</TT>.</P><P CLASS="T1.Text1"><A NAME="pgfId=3222"> </A>To define a custom attribute type, you first define the internal structure of the data associated with your custom attribute type. Then you must write an attribute metahandler to define a set of attribute-handling methods. QuickDraw&nbsp;3D calls those methods at certain times to handle operations on attribute sets that contain your custom attribute. For example, when you call <TT CLASS="cv">Q3Triangle_Write</TT> to write a triangle to a file, QuickDraw&nbsp;3D might need to call your attribute's handler to write your custom attribute data to the file.</P><P CLASS="T1.Text1"><A NAME="pgfId=3229"> </A>Suppose that you want to define a custom attribute that contains data about temperature over time. You might use the <TT CLASS="cv">MyTemperatureData</TT> structure, defined like this:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=6086"> </A>typedef struct MyTemperatureData {<BR>&nbsp;&nbsp;&nbsp;&nbsp;unsigned long&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startTime;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*starting time*/<BR>&nbsp;&nbsp;&nbsp;&nbsp;unsigned long&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nTemps;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*no. temps in array*/<BR>&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*temperatures;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*array of temps*/<BR>} MyTemperatureData;<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=3231"> </A>Your attribute metahandler is an application-defined function that returns the addresses of the methods associated with the custom attribute type. A metahandler can define some or all of the methods indicated by these constants:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=6090"> </A>kQ3MethodTypeObjectDelete<BR>kQ3MethodTypeObjectReadData<BR>kQ3MethodTypeObjectTraverse<BR>kQ3MethodTypeObjectWrite<BR>kQ3MethodTypeElementCopyAdd<BR>kQ3MethodTypeElementDelete<BR>kQ3MethodTypeElementCopyDuplicate<BR>kQ3MethodTypeElementCopyGet<BR>kQ3MethodTypeElementCopyReplace<BR>kQ3MethodTypeAttributeInterpolate<BR>kQ3MethodTypeAttributeCopyInherit<BR>kQ3MethodTypeAttributeInherit<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=3238"> </A><A HREF="qd3dattributes.8.htm#23642" CLASS="XRef">Listing&nbsp;10</A> defines a simple attribute metahandler. See <A HREF="qd3dobjects.7.htm#22692" CLASS="XRef">&quot;Defining an Object Metahandler&quot;</A> for a more complete description of metahandlers.</P><P CLASS="L.Listing"><A NAME="pgfId=3241"> </A>Listing&nbsp;10<A NAME="23642"> </A>Reporting custom attribute methods</P><CODE CLASS="CvF.CodeFull"><A NAME="pgfId=6096"> </A>TQ3FunctionPointer MyTemperatureDataMetaHandler (TQ3MethodType methodType)<BR>{<BR>&nbsp;&nbsp;&nbsp;&nbsp;switch (methodType) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case kQ3MethodTypeElementDelete:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (TQ3FunctionPointer) MyTemperatureDataDispose;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case kQ3MethodTypeElementCopyReplace:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (TQ3FunctionPointer) MyTemperatureDataCopyReplace;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case kQ3MethodTypeAttributeCopyInherit:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (TQ3FunctionPointer) kQ3True;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case kQ3MethodTypeAttributeInherit:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (TQ3FunctionPointer) kQ3True;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (NULL);<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR>}<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=3245"> </A><A NAME="marker=6098"> </A>The <TT CLASS="cv">MyTemperatureDataMetaHandler</TT> metahandler simply returns the appropriate function address, or <TT CLASS="cv">NULL</TT> if the metahandler does not implement a particular method type. All the method types listed above are optional. (In fact, you don't need to specify a metahandler at all if you want QuickDraw&nbsp;3D to use its default methods to handle your custom attribute type.)</P><P CLASS="T1.Text1"><A NAME="pgfId=3252"> </A>The metahandler in <A HREF="qd3dattributes.8.htm#23642" CLASS="XRef">Listing&nbsp;10</A> installs the <TT CLASS="cv">MyTemperatureDataDispose</TT> function as the custom attribute's dispose method, which QuickDraw&nbsp;3D calls whenever you clear your custom attribute or replace an existing one. A dispose method is passed a pointer to the data associated with an attribute. Your dispose method should deallocate any storage you allocated, as shown in <A HREF="qd3dattributes.8.htm#12607" CLASS="XRef">Listing&nbsp;11</A>.</P><P CLASS="L.Listing"><A NAME="pgfId=3260"> </A>Listing&nbsp;11<A NAME="12607"> </A>Disposing of a custom attribute's data</P><CODE CLASS="Cv.Code"><A NAME="pgfId=6102"> </A>TQ3Status MyTemperatureDataDispose (MyTemperatureData *tmpData)<BR>{<BR>&nbsp;&nbsp;&nbsp;&nbsp;if (tData-&gt;temperatures != NULL) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(tmpData-&gt;temperatures);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tData-&gt;temperatures = NULL;<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;return kQ3Success;<BR>}<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=3266"> </A><A NAME="marker=6104"> </A>If you do not define a dispose method, QuickDraw&nbsp;3D automatically disposes of the block of data allocated when a custom attribute was added to an attribute set. If the data associated with a custom attribute is always of a fixed size and does not contain any pointers to other data that needs to be disposed of, you do not need to define a dispose or copy method.</P><P CLASS="T1.Text1"><A NAME="pgfId=3270"> </A>The metahandler in <A HREF="qd3dattributes.8.htm#23642" CLASS="XRef">Listing&nbsp;10</A> installs the <TT CLASS="cv">MyTemperatureDataCopyReplace</TT> function as the custom attribute's copy method. A copy method is passed two pointers, specifying the source and target addresses of the data to copy. <A HREF="qd3dattributes.8.htm#25606" CLASS="XRef">Listing&nbsp;12</A> shows a simple copy method.</P><P CLASS="L.Listing"><A NAME="pgfId=3275"> </A>Listing&nbsp;12<A NAME="25606"> </A>Copying a custom attribute's data</P><CODE CLASS="Cv.Code"><A NAME="pgfId=6108"> </A>TQ3Status MyTemperatureDataCopyReplace <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(const MyTemperatureData *src, MyTemperatureData *dst)<BR>{<BR>&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*temp;<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;if (dst-&gt;nTemps != src-&gt;nTemps) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = realloc(dst-&gt;temperatures, nTemps * sizeof(float));<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp == NULL)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (kQ3Failure);<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;dst-&gt;startTime&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= src-&gt;startTime;<BR>&nbsp;&nbsp;&nbsp;&nbsp;dst-&gt;nTemps &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= src-&gt;nTemps;<BR>&nbsp;&nbsp;&nbsp;&nbsp;dst-&gt;temperatures = temp;<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;memcpy(temp, dst-&gt;temperatures, dst-&gt;nTemps * sizeof(float));<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;return (kQ3Success);<BR>}<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=3282"> </A><A NAME="marker=6110"> </A>If you do not define a copy method, QuickDraw&nbsp;3D automatically copies the block of data using a default memory copy method.</P><P CLASS="T1.Text1"><A NAME="pgfId=3302"> </A>The inherit method simply requests a Boolean value that indicates whether you want your custom attribute to be inherited down the class hierarchy. You should return <TT CLASS="cv">kQ3True</TT> if you want your attribute to be inherited or <TT CLASS="cv">kQ3False</TT> if not.</P><P CLASS="T1.Text1"><A NAME="pgfId=3303"> </A>Before you can use a custom attribute type, you need to register your attribute metahandler with QuickDraw&nbsp;3D by calling the <TT CLASS="cv">Q3AttributeClass_Register</TT> function. You might execute the <TT CLASS="cv">MyStartUpQuickDraw3D</TT> function defined in <A HREF="qd3dattributes.8.htm#15574" CLASS="XRef">Listing&nbsp;13</A> at application startup time.</P><P CLASS="L.Listing"><A NAME="pgfId=3314"> </A>Listing&nbsp;13<A NAME="15574"> </A>Initializing QuickDraw&nbsp;3D and registering a custom attribute type</P><CODE CLASS="Cv.Code"><A NAME="pgfId=6114"> </A>TQ3AttributeType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gAttributeType_Temperature;<BR><BR>void MyStartUpQuickDraw3D (void)<BR>{<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3ObjectClass&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myAttrib;<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;if (Q3Initialize() == kQ3Failure)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*initialize QuickDraw&nbsp;3D*/<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyFailRoutine();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*register attribute type*/<BR>&nbsp;&nbsp;&nbsp;&nbsp;myAttrib = Q3AttributeClass_Register(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gAttributeTypeTemperature, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;MyCompany:SurfWorks:Temperature&quot;, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sizeof(MyTemperatureData), <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyTemperatureData_MetaHandler);<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;if (myAttrib == kQ3ObjectTypeInvalid)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyFailRoutine();<BR>}<BR></CODE><hr>&#169; 1997 Apple Computer, Inc.</DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>