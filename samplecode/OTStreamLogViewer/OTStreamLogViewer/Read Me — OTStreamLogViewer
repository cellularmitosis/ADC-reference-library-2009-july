Read Me About OTStreamLogViewer1.0.1b1OTStreamLogViewer is both a sample and a developer tool.  As a sample, it shows how to use the OT raw streams API to communication with modules in the OT kernel. As a tool, it allows you to view the output of the STREAMS logging facility (strlog).  This is extremely helpful when developing OT kernel plug-ins: modules drivers, and port scanners.About STREAMS LoggingThe STREAMS logging facility is documented in Open Transport Advanced Client Programming.  <http://developer.apple.com/macos/opentransport/OTAdvancedClientProg/     StandardModules.html#StreamLogging>Reading Log EventsThe client-side interface to the “log” device is defined in “OpenTransportProtocol.h”. Rather than describe this in detail, I will refer you to the comments in “LogEngine.h” and “LogEngine.c”. These files represent a standalone library which you can use to implement a STREAMS logging facility under Open Transport.Packing ListThe sample includes the following items:• Read Me — OTStreamLogViewer — This document.• OTStreamLogViewer.mcp — A CodeWarrior project to build the OTStreamLogViewer.• OTStreamLogViewer — A compiled version of the above.• OTStreamLogViewer.rsrc — Resources for the above.• OTStreamLogViewer.r — Some more resources for the above.• StreamLogResources.h — C constants for all the resource IDs.• OTStreamLogViewer.c — The bulk of the application code, including the main function. • FileLogging.h, FileLogging.c — The code that implements logging to a file. • LogEngine — A folder containing the log engine, a library that can be extracted from this program to provide client-side logging support in any application.• OTMemoryReserve.h, OTMemoryReserve.c — A module for creating an OT memory reserve so that interrupt-time code does not suffer memory shortages.• OTClassicContext — A library that allows InterfaceLib-based applications to calls the “InContext” OT routines. See Technote 1173 “Understanding Open Transport Asset Tracking” for more details.  <http://developer.apple.com/technotes/tn/tn1173.html>• MoreIsBetter Bits — A bunch of source files, extracted from the DTS MoreIsBetter library of sample code, that provide generally useful extensions to the Mac OS toolbox.  See the main MoreIsBetter distribution for more details.  <http://developer.apple.com/samplecode/Sample_Code/Overview/MoreIsBetter.htm>Building the SampleTo build the sample you will need:• CodeWarrior Pro 6Open the “OTStreamLogViewer.mcp” project file, select the PPC target, and make the project. This results in a fat version of the application.Coding NotesThere are three interesting points in the sample code:• This sample demonstrates the use of a raw stream in asynchronous mode. The notifier in “LogEngine.c” shows how to efficiently read STREAMS messages from the raw stream.• This sample uses the OT memory allocation routines (OTAllocMemInContext and OTFreeMem) for allocating buffers to store log entries in the above notifier (at ‘interrupt time’).  The OT memory allocation routines have a number of important attributes that you should be aware of. There’s a long discussion of this in “OTStreamLogViewer.c”. The OT memory allocation routines are described in detail in Technote 1128 “Understanding Open Transport Memory Management”.  <http://developer.apple.com/technotes/tn/tn1128.html>• The OT raw streams API is not available to emulated clients running on PowerPC-based computers. For this reason, if you decide to roll this code into a 68K version of your application you should always compile your application fat (with 68K and PowerPC code in the same file).Using OTStreamLogViewerAlas, user documentation has been deferred to a future release.  Some hints and tips:• If you want the application to remember window positions, install Internet Config Extension 2.0 or later.• If your kernel code calls strlog in a very bursty fashion, you may want to increase the partition size of the application. The application accepts log entries at interrupt time but can’t process them until system task time. If it receives a large number (say 2000) log entries at interrupt time before it gets system task time, the application will start dropping log entries.• If you turn on file logging, OTStreamLogViewer will log to a text file call “OTStreamLogViewer Log” in the root of the boot volume. Yes, I know it’s lame user interface (–:Credits and Version HistoryOTStreamLogViewer is another fine code sample from Developer Technical Support.  If you find any problems with this sample, mail <DTS@apple.com> and I’ll try to fix them up.Version 1.0b1 (Mar 1998) is the first release version.Version 1.0b2 (Jul 1998) fixes a slight memory leak. Important safety tip: always remove a notifier from a raw stream before closing the stream. Updated to CodeWarrior Pro 2.  Updated to IC 2.0 final stuff.Version 1.0.1b1 (Dec 2000) is a significant update to the code, although the external appearance remains very similar.New features:• There is now a new menu command, Start Logging on Launch, that allows you to put OTStreamLogViewer in your Startup Items folder and have it run all the time!Bug fixes:• The date and time colums are now wide enough to handle standard US dates and times. My clock is always set to 24 hour time so I never noticed that the time column was spilling over into the next column. A real fix for this, dynamically sizing the column based on the longest width entry, is still on the to do list.• The list now draws with a white background.• The OTStreamLogViewer PICT in the about box is now set to srcOr rather than srcCopy, so the enclosed regions in the letters (like the inside of the O) no longer draw in white.Maintenance:• Updated projects to CodeWarrior Pro 6.• Given that CWPro6 has UI 3.3.2, I now no longer need my own IC interfaces and libraries.• OTStreamLogViewer is now PowerPC-only.• Got rid of ASLM dependency.  Yay!  Doing this required a rework of the entire memory handling architecture.  See the OTMemoryReserve module for details.• Zarch individual names from credits to comply with latest Apple policy.• Converted all the IC Pascal files to C, rolled the relevant routines into MoreIsBetter, and now I just depend on MIB.• Updated copyright date.Developer Technical SupportNetworking, Communcations, Hardware22 Dec 2000