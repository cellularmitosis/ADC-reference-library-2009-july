<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE> Types of Transforms</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="H2.Heading2"><A NAME="pgfId=2796"> </A><A NAME="marker=3224"> </A>Types of Transforms</H1><P CLASS="T1.Text1"><A NAME="pgfId=3229"> </A>QuickDraw&nbsp;3D supports a number of different ways of transforming geometric objects. Equivalently, these transforms are ways of transforming coordinate systems containing geometric objects.</P><DIV><H2 CLASS="H3.Heading3"><A NAME="pgfId=1955"> </A>Matrix Transforms</H2><P CLASS="T1.Text1"><A NAME="pgfId=1975"> </A><A NAME="marker=1974"> </A>A <B CLASS="bold">matrix transform</B> is any transform specified by an affine, invertible 4-by-4 matrix. QuickDraw&nbsp;3D does not check that the matrix you specify is affine or invertible, so it is your responsibility to ensure that the matrix has these qualities.<A NAME="marker=1979"> </A></P><P CLASS="T1.Text1"><A NAME="pgfId=1980"> </A>A matrix transform is the most general type of transform and can be used to represent any of the other kinds of transforms. If, however, you just want to apply a translation to an object, it's better to use a translate transform instead of a matrix transform. By using the more specific type of transform object, you allow renderers and shaders to apply optimizations that might not apply to a more general transform.</P></DIV><DIV><H2 CLASS="H3.Heading3"><A NAME="pgfId=3230"> </A>Translate Transforms</H2><P CLASS="T1.Text1"><A NAME="pgfId=3232"> </A><A NAME="marker=3231"> </A>A <B CLASS="bold">translate transform</B> translates an object along the <I CLASS="italics">x</I>, <I CLASS="italics">y</I>, and <I CLASS="italics">z</I> axes by specified values. You specify the desired translation values using a vector. For example, to translate an object by 2 units along the positive <I CLASS="italics">x</I> axis, by 4 units along the positive <I CLASS="italics">y</I> axis, and by 3 units along the positive <I CLASS="italics">z</I> axis, you could define a vector like this:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=5714"> </A>TQ3Vector3D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myVector;<BR>TQ3TransformObject&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myTransform;<BR><BR>Q3Vector3D_Set(&amp;myVector, 2.0, 4.0, 3.0);<BR>myTransform = Q3TranslateTransform_New(&amp;myVector);<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=3238"> </A><A HREF="qd3dtransforms.4.htm#12440" CLASS="XRef">Figure&nbsp;7</A> shows a unit cube before and after a translate transform is applied.<A NAME="marker=3237"> </A></P><P CLASS="Fg.Figure"><A NAME="pgfId=3243"> </A>Figure&nbsp;7<A NAME="12440"> </A>A translate transform</P><DIV><IMG SRC="qd3dtransforms-6.gif"></DIV></DIV><DIV><H2 CLASS="H3.Heading3"><A NAME="pgfId=3244"> </A>Scale Transforms</H2><P CLASS="T1.Text1"><A NAME="pgfId=3246"> </A><A NAME="marker=3245"> </A>A <B CLASS="bold">scale transform</B> scales an object along the <I CLASS="italics">x</I>, <I CLASS="italics">y</I>, and <I CLASS="italics">z</I> axes by specified values. <A HREF="qd3dtransforms.4.htm#17046" CLASS="XRef">Figure&nbsp;8</A> shows a unit cube before and after applying a scale transform.</P><P CLASS="Fg.Figure"><A NAME="pgfId=3257"> </A>Figure&nbsp;8<A NAME="17046"> </A>A scale transform<A NAME="marker=3256"> </A></P><DIV><IMG SRC="qd3dtransforms-7.gif"></DIV><P CLASS="T1.Text1"><A NAME="pgfId=3341"> </A>As with a translate transform, you specify the desired scale transform by using a vector. For example, to scale an object by a factor of 2 along the positive <I CLASS="italics">x</I> axis, by a factor of 4 along the positive <I CLASS="italics">y</I> axis, and by a factor of 3 along the positive <I CLASS="italics">z</I> axis, you could define a vector like this:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=5718"> </A>TQ3Vector3D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myVector;<BR><BR>Q3Vector3D_Set(&amp;myVector, 2.0, 4.0, 3.0);<BR></CODE></DIV><DIV><H2 CLASS="H3.Heading3"><A NAME="pgfId=3265"> </A>Rotate Transforms</H2><P CLASS="T1.Text1"><A NAME="pgfId=3267"> </A><A NAME="marker=3266"> </A>A <B CLASS="bold">rotate transform</B> rotates an object about the <I CLASS="italics">x</I>, <I CLASS="italics">y</I>, or <I CLASS="italics">z</I> axis by a specified number of radians at the origin. </P><P CLASS="T1.Text1"><A NAME="pgfId=3347"> </A>To specify a rotate transform, you fill in the fields of a <B CLASS="bold">rotate transform data structure,</B> which specifies the axis of rotation and the number of radians to rotate. You can use QuickDraw&nbsp;3D macros to convert degrees to radians, if you prefer to work with degrees. (See the chapter <A HREF="qd3dmathfunc.htm#12941" CLASS="XRef">&quot;Mathematical Utilities&quot;</A> for details.) <A HREF="qd3dtransforms.4.htm#27503" CLASS="XRef">Figure&nbsp;9</A> shows a unit cube before and after applying a rotate transform.</P><P CLASS="Fg.Figure"><A NAME="pgfId=3282"> </A>Figure&nbsp;9<A NAME="27503"> </A>A rotate transform<A NAME="marker=3281"> </A></P><DIV><IMG SRC="qd3dtransforms-8.gif"></DIV></DIV><DIV><H2 CLASS="H3.Heading3"><A NAME="pgfId=3283"> </A>Rotate-About-Point Transforms</H2><P CLASS="T1.Text1"><A NAME="pgfId=3285"> </A><A NAME="marker=3284"> </A>A <B CLASS="bold">rotate-about-point transform</B> rotates an object about the <I CLASS="italics">x</I>, <I CLASS="italics">y</I>, or <I CLASS="italics">z</I> axis by a specified number of radians at an arbitrary point in space. To specify a rotate-about-point transform, you fill in the fields of a rotate-about-point transform data structure, which specifies the axis of rotation, the point of rotation, and the number of radians to rotate. <A HREF="qd3dtransforms.4.htm#33393" CLASS="XRef">Figure&nbsp;10</A> shows a unit cube before and after applying a rotate-about-point transform.</P><P CLASS="Fg.Figure"><A NAME="pgfId=3294"> </A>Figure&nbsp;10<A NAME="33393"> </A>A rotate-about-point transform<A NAME="marker=3293"> </A></P><DIV><IMG SRC="qd3dtransforms-9.gif"></DIV></DIV><DIV><H2 CLASS="H3.Heading3"><A NAME="pgfId=3295"> </A>Rotate-About-Axis Transforms</H2><P CLASS="T1.Text1"><A NAME="pgfId=3297"> </A><A NAME="marker=3296"> </A>A <B CLASS="bold">rotate-about-axis transform</B> rotates an object about an arbitrary axis in space by a specified number of radians at an arbitrary point in space. To specify a rotate-about-axis transform, you fill in the fields of a rotate-about-axis transform data structure, which specifies the axis of rotation, the point of rotation, and the number of radians to rotate. <A HREF="qd3dtransforms.4.htm#20025" CLASS="XRef">Figure&nbsp;11</A> shows a unit cube before and after applying a rotate-about-axis transform.</P><P CLASS="Fg.Figure"><A NAME="pgfId=3306"> </A>Figure&nbsp;11<A NAME="20025"> </A>A rotate-about-axis transform<A NAME="marker=3305"> </A></P><DIV><IMG SRC="qd3dtransforms-10.gif"></DIV></DIV><DIV><H2 CLASS="H3.Heading3"><A NAME="pgfId=3307"> </A>Quaternion Transforms</H2><P CLASS="T1.Text1"><A NAME="pgfId=3309"> </A><A NAME="marker=3308"> </A>A <B CLASS="bold">quaternion transform</B> rotates and twists an object according to the mathematical properties of quaternions.<A NAME="marker=2378"> </A></P></DIV><DIV><H2 CLASS="H3.Heading3"><A NAME="pgfId=2830"> </A><A NAME="29680"> </A>The Reset Transform</H2><P CLASS="T1.Text1"><A NAME="pgfId=2822"> </A>When transforms are submitted to a view, either directly through an immediate-mode call such as <TT CLASS="cv">Q3ScaleTransform_Submit</TT> or a retained-mode call such as <TT CLASS="cv">Q3Transform_Submit</TT>, or indirectly by inclusion in a group, the view's current transformation matrix is concatenated with the submitted matrix to form the new current transformation matrix.</P><P CLASS="T1.Text1"><A NAME="pgfId=2824"> </A>An application can take advantage of this transformation stacking behavior in hierarchical modelling; the view can maintain a stack of transformations that the application may push and pop. The application can do this explicitly, using <TT CLASS="cv">Q3View_Push</TT> and <TT CLASS="cv">Q3View_Pop</TT>, or implicitly by using groups, which push and pop transformations when they are entered and exited.  In a push, the current transformation is pushed onto a stack, but a copy remains as the current transfomation. Subsequent transformation submissions concatenate their matrices with the current transformation.</P><P CLASS="T1.Text1"><A NAME="pgfId=2825"> </A>However, this behavior is not always desirable. Suppose an application traverses a hierarchy, either in mixed or immediate mode, using sequences of push-transform-polygon-pop actions. If the application wants to draw a shape untransformed in the middle of such a sequence, (because, for example, the shape is already drawn in world space coordinates), then the application would have to get the current transformation, invert it, and submit the inverted transformation, thereby resolving the current transformation in the view to the identity matrix. Such a sequence of actions would usually be bracketed by a push-pop sequence. Because obtaining the current matrix, inverting it, and submitting the inverted matrix require significant amounts of processing time, and because inversion cannot be perfectly precise (because of floating-point approximations), QuickDraw 3D includes a <B CLASS="bold">reset transform.</B> It resets the current transformation to identity (that is, equivalent to the 4x4 identity matrix).</P><P CLASS="T1.Text1"><A NAME="pgfId=2956"> </A>The routines that implement the reset transform are described in <A HREF="qd3dtransforms.13.htm#27891" CLASS="XRef">&quot;Creating and Submitting the Reset Transform&quot;</A>.</P></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>