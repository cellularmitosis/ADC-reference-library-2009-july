<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE> Reference Counts</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="H2.Heading2"><A NAME="pgfId=7032"> </A><A NAME="23868"> </A>Reference Counts</H1><P CLASS="T1.Text1"><A NAME="pgfId=3310"> </A><A NAME="marker=3760"> </A>As mentioned in <A HREF="qd3dobjects.3.htm#40669" CLASS="XRef">&quot;QuickDraw&nbsp;3D Object Subclasses&quot;</A>, a shared object is a QuickDraw&nbsp;3D object that can be shared by two or more other QuickDraw&nbsp;3D objects. QuickDraw&nbsp;3D maintains an internal reference count for each shared object to keep track of the number of times an object is being shared. Certain operations on the object increase the reference count, and other operations decrease it. For example, when you first create a spot light (by&nbsp;calling <TT CLASS="cv">Q3SpotLight_New</TT>), its reference count is set to 1. If you later share that light (for example, by adding it to a group object), the reference count of the light is increased to indicate the additional link to the light. <A HREF="qd3dobjects.4.htm#27910" CLASS="XRef">Figure&nbsp;6</A> illustrates a series of operations involving a spot light and a group.</P><P CLASS="T1.Text1"><A NAME="pgfId=13975"> </A>In step 1, an application creates a new spot light by calling <TT CLASS="cv">Q3SpotLight_New</TT>. As indicated above, the reference count of the new spot light is set to 1. Then, in step 2, the application creates a new light group. A light group is a shared object and hence also has a reference count, which is set to 1 upon its creation. In step 3, the application adds the spot light to the light group by calling <TT CLASS="cv">Q3Group_AddObject</TT>. The reference count of the spot light is therefore increased to 2, because both the application and the light group possess references to the spot light. Note that the reference count of the group remains at 1.</P><P CLASS="T1.Text1"><A NAME="pgfId=13976"> </A>In general, when you create a light and add it to a group, you can dispose of your application's reference to the light by calling <TT CLASS="cv">Q3Object_Dispose</TT>. When this is done, in step 4, the reference count of the light is decremented to 1. The only remaining reference to the light is maintained by the group, not by the application. Finally, when you have finished using the light, you can dispose of the group object by calling <TT CLASS="cv">Q3Object_Dispose</TT> once again (step 5). When that happens, the objects in the group are disposed of and the group itself is disposed of. The reference counts of both the light and the group fall to 0, in which case they are both removed from memory.</P><P CLASS="T1.Text1"><A NAME="pgfId=13980"> </A>If the application had <I CLASS="italics">not</I> explicitly disposed of the spot light (as happened in step 4), the reference count of the light would have remained at 2 until the group was disposed of (step 5), at which time it would have decreased to 1. The application could then call <TT CLASS="cv">Q3Object_Dispose</TT> to decrease the reference count to 0, thereby disposing of the light object. In effect, <TT CLASS="cv">_New</TT> and <TT CLASS="cv">_Dispose</TT> calls define the scope of an object inside your application. You cannot operate on the object until you've created it using a <TT CLASS="cv">_New</TT> call, and you cannot in general operate on an object after you've disposed of it by calling <TT CLASS="cv">Q3Object_Dispose</TT>.</P><P CLASS="Fg.Figure"><A NAME="pgfId=3597"> </A>Figure&nbsp;6<A NAME="27910"> </A>Incrementing and decrementing reference counts</P><DIV><IMG SRC="qd3dobjects-2.gif"></DIV><P CLASS="T1.Text1"><A NAME="pgfId=3600"> </A>Certain operations increase the reference counts of shared objects, including</P><UL><LI CLASS="B1.Bullet1"><A NAME="pgfId=3711"> </A>creating a new shared object (the reference count is set to 1)</LI><LI CLASS="B1.Bullet1"><A NAME="pgfId=3715"> </A>getting a reference to a shared object</LI><LI CLASS="B1.Bullet1"><A NAME="pgfId=3686"> </A>adding a shared object to a group</LI><LI CLASS="B1.Bullet1"><A NAME="pgfId=3690"> </A>setting the shared object located at a certain position in a group</LI></UL><P CLASS="T1.Text1"><A NAME="pgfId=18490"> </A>Naturally, the inverse operations decrease the reference counts of shared objects, including</P><UL><LI CLASS="B1.Bullet1"><A NAME="pgfId=3725"> </A>disposing of a shared object</LI><LI CLASS="B1.Bullet1"><A NAME="pgfId=3729"> </A>removing a shared object from a group</LI><LI CLASS="B1.Bullet1"><A NAME="pgfId=3735"> </A>disposing of a group that contains a shared object</LI><LI CLASS="B1.Bullet1"><A NAME="pgfId=3745"> </A>replacing a shared object in any object (for example, a group or a view) with another shared object</LI></UL><P CLASS="T1.Text1"><A NAME="pgfId=18494"> </A>For example, the following code gets and disposes of the camera object associated with a view:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=20995"> </A>TQ3ViewObject &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view;<BR>TQ3CameraObject&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;camera;<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=20999"> </A>Q3View_GetCamera(view, &amp;camera);<BR>Q3Object_Dispose(camera);<BR>camera = NULL;<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=18507"> </A>The following code shows how a reference count is increased when obtaining an object at a given position in a group. Note that the transform which <TT CLASS="cv">Q3Group_GetPositionObject</TT> returned from the group must be disposed of:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=21003"> </A>TQ3GroupObject&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group;<BR>TQ3GroupPosition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position;<BR>TQ3TransformObject&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transform;<BR>TQ3Matrix4x4 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;matrix;<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=21007"> </A>Q3Group_GetPositionObject(group, position, &amp;transform);<BR>Q3Transform_GetMatrix(transform, &amp;matrix);<BR>Q3Object_Dispose(transform);<BR>transform = NULL;<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=7043"> </A>If you do not directly or indirectly balance every operation that increments an object's reference count with an operation that decrements the reference count, you risk creating memory leaks. See the <A HREF="qd3dintroduction.d.htm" CLASS="XRef">Listing&nbsp;1-6</A> for examples of how to balance an object's reference count.</P><P CLASS="T1.Text1"><A NAME="pgfId=7047"> </A>You need to directly dispose only of an object reference that your application receives when it creates a QuickDraw&nbsp;3D object. Any other reference to the object must be indirectly disposed of. For example, suppose that you create a translate transform object and then add it to a group twice, as follows:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=21011"> </A>myTransform = Q3TranslateTransform_New(&amp;myVector3D);<BR>Q3Group_AddObject(myGroup, myTransform);<BR>Q3Group_AddObject(myGroup, myTransform);<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=5510"> </A>In this example, the reference count is incremented each time you call <TT CLASS="cv">Q3Group_AddObject</TT>. However, you should dispose of the transform object only once, because the transform's reference count is decremented twice when you dispose of the group.<A NAME="marker=3761"> </A></P><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>