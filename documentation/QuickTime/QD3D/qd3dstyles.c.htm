<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE> Anti-Alias Style</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="H2.Heading2"><A NAME="pgfId=2608"> </A>Anti-Alias Style</H1><P CLASS="T1.Text1"><A NAME="pgfId=2612"> </A>Many renderers implement scan-conversion and rasterization algorithms by displaying pixels at the borders of lines and polygons either completely on or completely off. This may result in &quot;jaggies,&quot; a staircase-like appearance at edges that are not perfectly horizontal or vertical. Such artifacts are visually unpleasant, both in static scenes and in dynamically updated sequences of frames, where they can produce apparent motion across lines or the edges of polygons.</P><P CLASS="T1.Text1"><A NAME="pgfId=2614"> </A>Many renderers support <B CLASS="bold">anti-aliasing</B> techniques, which reduce or eliminate this problem. For more complete information about anti-aliasing, consult a book such as <I CLASS="italics">Computer Graphics: Principles and Practice</I> by Foley and Van Dam.</P><P CLASS="T1.Text1"><A NAME="pgfId=2615"> </A>QuickDraw 3D provides an anti-alias style to invoke and control anti-aliasing in renderers. Because different renderers support a variety of anti-aliasing algorithms, QuickDraw 3D provides control at an abstract level, with its interpretation left to the renderer. The control structures for anti-alias style are the following:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=5979"> </A>typedef enum TQ3AntiAliasModeMasks {<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3AntiAliasModeMaskEdges&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= 1 &lt;&lt; 0,<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3AntiAliasModeMaskFilled&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= 1 &lt;&lt; 1<BR>} TQ3AntiAliasModeMasks;<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=5985"> </A>typedef unsigned long TQ3AntiAliasMode;<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=5991"> </A>typedef struct TQ3AntiAliasStyleData {<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3Switch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state;<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3AntiAliasMode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mode;<BR>&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quality;<BR>} TQ3AntiAliasStyleData;<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=2629"> </A>You can use the <TT CLASS="cv">state</TT> field, of type <TT CLASS="cv">TQ3Switch</TT>, to turn anti-aliasing on and off. It lets you leave the other state variables set to desired values (either in the data structure or in a style object) and turn anti-aliasing on and off without needing to reinitialize the rest of the state.</P><P CLASS="T1.Text1"><A NAME="pgfId=2630"> </A>You can use the mode field to control which primitives the anti-aliasing techniques affect. If the field is set to <TT CLASS="cv">kQ3AntiAliasModeMaskEdges</TT>, then lines, polylines, and ellipses are anti-aliased, plus all other primitives if you are using an edge fill style. Filled primitives (triangles, NURB surfaces, polyhedra, etc.) are anti-aliased if the mode is set to <TT CLASS="cv">kQ3AntiAliasModeMaskFilled</TT>. Both classes of primitives are anti-aliased if the field is set to <TT CLASS="cv">kQ3AntiAliasModeMaskEdges</TT> | <TT CLASS="cv">kQ3AntiAliasModeMaskFilled</TT>.</P><P CLASS="T1.Text1"><A NAME="pgfId=2609"> </A>Setting the <TT CLASS="cv">quality</TT> field to a value between 0 and 1 provides general control over the level of anti-aliasing. The effect of this value depends on the anti-aliasing algorithm and how the renderer implements it, but in general 0 means a very low level of anti-aliasing and 1 means a very high level. A <TT CLASS="cv">quality</TT> value of 0 does not necessarily mean that anti-aliasing is off, but rather that it is at the lowest level implemented by the renderer. </P><P CLASS="T1.Text1"><A NAME="pgfId=2640"> </A>Routines that help you control anti-aliasing are described in <A HREF="qd3dstyles.1c.htm#27848" CLASS="XRef">&quot;Managing the Anti-Alias Style&quot;</A>.</P><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>