<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Managing Unknown Objects</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=3780"> </A>Managing Unknown Objects</H1><P CLASS="T1.Text1"><A NAME="pgfId=3785"> </A><A NAME="marker=3781"> </A>QuickDraw&nbsp;3D creates an unknown object when it encounters an unrecognized type of object while reading a metafile. Your application might know how to handle objects of that type, so QuickDraw&nbsp;3D provides routines that you can use to get the type and contents of an unknown object.<A NAME="marker=3789"> </A></P><P CLASS="Note"><A NAME="pgfId=3793"> </A>You cannot explicitly create an unknown object. </P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3794"> </A>Q3Unknown_GetType</H2><P CLASS="T1.Text1"><A NAME="pgfId=3796"> </A><A NAME="marker=3795"> </A><A NAME="marker=1588"> </A>You can use the <TT CLASS="cv">Q3Unknown_GetType</TT> function to get the type of an unknown object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13274"> </A>TQ3ObjectType Q3Unknown_GetType (TQ3UnknownObject unknownObject);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13276"> </A><TT CLASS="cv">unknownObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3798"> </A> An unknown object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3799"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3800"> </A>The <TT CLASS="cv">Q3Unknown_GetType</TT> function returns, as its function result, the type of the unknown object specified by the <TT CLASS="cv">unknownObject</TT> parameter. If successful, <TT CLASS="cv">Q3Unknown_GetType</TT> returns one of these constants:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=13288"> </A>kQ3UnknownTypeBinary<BR>kQ3UnknownTypeText<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=3802"> </A>If the type cannot be determined or is invalid, <TT CLASS="cv">Q3Unknown_GetType</TT> returns the value <TT CLASS="cv">kQ3ObjectTypeInvalid</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3803"> </A>Q3Unknown_GetDirtyState</H2><P CLASS="T1.Text1"><A NAME="pgfId=3804"> </A><A NAME="marker=1598"> </A>You can use the <TT CLASS="cv">Q3Unknown_GetDirtyState</TT> function to get the current dirty state of an unknown object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13294"> </A>TQ3Status Q3Unknown_GetDirtyState (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3UnknownObject unknownObject, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean *isDirty);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13296"> </A><TT CLASS="cv">unknownObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3806"> </A> An unknown object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13306"> </A><TT CLASS="cv">isDirty</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3807"> </A>On exit, a Boolean value that indicates whether the specified unknown object is dirty (<TT CLASS="cv">kQ3True</TT>) or not (<TT CLASS="cv">kQ3False</TT>).</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3808"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3809"> </A>The <TT CLASS="cv">Q3Unknown_GetDirtyState</TT> function returns, in the <TT CLASS="cv">isDirty</TT> parameter, the current dirty state of the unknown object specified by the <TT CLASS="cv">unknownObject</TT> parameter. The <B CLASS="bold">dirty state</B> of an unknown object is a Boolean value that indicates whether an unknown object is preserved in its original state (<TT CLASS="cv">kQ3False</TT>) or should be updated when written back to the file object from which it was originally read (<TT CLASS="cv">kQ3True</TT>).</P><P CLASS="T1.Text1"><A NAME="pgfId=3810"> </A>An unknown object is marked as dirty when it's first read into memory. You can mark the object as not dirty (by calling <TT CLASS="cv">Q3Unknown_SetDirtyState</TT>) if you know that no state or contextual information has changed in the object. The application that generated the unknown data is responsible for either discarding any dirty data or attempting to preserve it.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3811"> </A>Q3Unknown_SetDirtyState</H2><P CLASS="T1.Text1"><A NAME="pgfId=3812"> </A><A NAME="marker=1608"> </A>You can use the <TT CLASS="cv">Q3Unknown_SetDirtyState</TT> function to set the dirty state of an unknown object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13317"> </A>TQ3Status Q3Unknown_SetDirtyState (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3UnknownObject unknownObject, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean isDirty);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13319"> </A><TT CLASS="cv">unknownObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3814"> </A> An unknown object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13329"> </A><TT CLASS="cv">isDirty</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3815"> </A>A Boolean value that indicates whether the specified unknown object is dirty (<TT CLASS="cv">kQ3True</TT>) or not (<TT CLASS="cv">kQ3False</TT>).</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3816"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3817"> </A>The <TT CLASS="cv">Q3Unknown_SetDirtyState</TT> function sets the dirty state of the unknown object specified by the <TT CLASS="cv">unknownObject</TT> parameter to the Boolean value passed in the <TT CLASS="cv">isDirty</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3818"> </A>Q3UnknownText_GetData</H2><P CLASS="T1.Text1"><A NAME="pgfId=3819"> </A><A NAME="marker=1617"> </A>You can use the <TT CLASS="cv">Q3UnknownText_GetData</TT> function to get the data of an unknown text object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13340"> </A>TQ3Status Q3UnknownText_GetData (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3UnknownObject unknownObject, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3UnknownTextData *unknownTextData);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13342"> </A><TT CLASS="cv">unknownObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3821"> </A> An unknown text object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13352"> </A><TT CLASS="cv">unknownTextData</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3822"> </A> A pointer to an unknown text data structure.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3823"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3824"> </A>The <TT CLASS="cv">Q3UnknownText_GetData</TT> function returns, in the <TT CLASS="cv">objectName</TT> and <TT CLASS="cv">contents</TT> fields of the unknown text data structure pointed to by the <TT CLASS="cv">unknownTextData</TT> parameter, pointers to the name and contents of an unknown text object (that is, an unknown object of type <TT CLASS="cv">kQ3UnknownTypeText</TT>) specified by the <TT CLASS="cv">unknownObject</TT> parameter. The <TT CLASS="cv">contents</TT> field of the unknown text data structure points to the data stored in the text metafile, excluding any excess white space and any delimiter characters (that is, outermost parentheses).</P><P CLASS="T1.Text1"><A NAME="pgfId=3825"> </A>Your application is responsible for allocating the memory occupied by the <TT CLASS="cv">unknownTextData</TT> parameter. <TT CLASS="cv">Q3UnknownText_GetData</TT> allocates memory to hold the name and contents pointed to by the fields of that structure. You must make certain to call <TT CLASS="cv">Q3UnknownText_EmptyData</TT> to release the memory allocated by <TT CLASS="cv">Q3UnknownText_GetData</TT> when you are finished using the data.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3826"> </A>Q3UnknownText_EmptyData</H2><P CLASS="T1.Text1"><A NAME="pgfId=3828"> </A><B CLASS="bold"></B><A NAME="marker=3827"> </A><A NAME="marker=1628"> </A>You can use the <TT CLASS="cv">Q3UnknownText_EmptyData</TT> function to dispose of the memory allocated by a previous call to <TT CLASS="cv">Q3UnknownText_GetData</TT>.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13364"> </A>TQ3Status Q3UnknownText_EmptyData (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3UnknownTextData *unknownTextData);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13366"> </A><TT CLASS="cv">unknownTextData</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3830"> </A> A pointer to an unknown text data structure that was filled in by a previous call to <TT CLASS="cv">Q3UnknownText_GetData</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3831"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3832"> </A>The <TT CLASS="cv">Q3UnknownText_EmptyData</TT> function deallocates the memory pointed to by the fields of the <TT CLASS="cv">unknownTextData</TT> parameter. If successful, <TT CLASS="cv">Q3UnknownText_EmptyData</TT> sets those fields to the value <TT CLASS="cv">NULL</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3833"> </A>Q3UnknownBinary_GetData</H2><P CLASS="T1.Text1"><A NAME="pgfId=3834"> </A><A NAME="marker=1636"> </A>You can use the <TT CLASS="cv">Q3UnknownBinary_GetData</TT> function to get the data of an unknown binary object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13378"> </A>TQ3Status Q3UnknownBinary_GetData (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3UnknownObject unknownObject, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3UnknownBinaryData *unknownBinaryData);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13380"> </A><TT CLASS="cv">unknownObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3836"> </A> An unknown binary object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13390"> </A><TT CLASS="cv">unknownBinaryData</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3837"> </A> A pointer to an unknown binary data structure.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3838"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3839"> </A>The <TT CLASS="cv">Q3UnknownBinary_GetData</TT> function returns, in the <TT CLASS="cv">contents</TT> field of the unknown binary data structure pointed to by the <TT CLASS="cv">unknownBinaryData</TT> parameter, a pointer to a copy of the contents of the unknown binary object (that is, an unknown object of type <TT CLASS="cv">kQ3UnknownTypeBinary</TT>) specified by the <TT CLASS="cv">unknownObject</TT> parameter. <TT CLASS="cv">Q3UnknownBinary_GetData</TT> also returns, in the <TT CLASS="cv">objectType</TT> and <TT CLASS="cv">size</TT> fields of the unknown binary data structure, the type of the unknown binary object and the size, in bytes, of the data pointed to by the <TT CLASS="cv">contents</TT> field.</P><P CLASS="T1.Text1"><A NAME="pgfId=3840"> </A>Your application is responsible for allocating the memory occupied by the <TT CLASS="cv">unknownBinaryData</TT> parameter. <TT CLASS="cv">Q3UnknownBinary_GetData</TT> allocates memory to hold the data pointed to by the <TT CLASS="cv">contents</TT> field of that structure. You must make certain to call <TT CLASS="cv">Q3UnknownBinary_EmptyData</TT> to release the memory allocated by <TT CLASS="cv">Q3UnknownBinary_GetData</TT> when you are finished using the data.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3841"> </A>Q3UnknownBinary_EmptyData</H2><P CLASS="T1.Text1"><A NAME="pgfId=3843"> </A><B CLASS="bold"></B><A NAME="marker=3842"> </A><A NAME="marker=1647"> </A>You can use the <TT CLASS="cv">Q3UnknownBinary_EmptyData</TT> function to dispose of the memory allocated by a previous call to <TT CLASS="cv">Q3UnknownBinary_GetData</TT>.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13402"> </A>TQ3Status Q3UnknownBinary_EmptyData (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3UnknownBinaryData *unknownBinaryData);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13404"> </A><TT CLASS="cv">unknownBinaryData</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3845"> </A> A pointer to an unknown binary data structure that was filled in by a previous call to <TT CLASS="cv">Q3UnknownBinary_GetData</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3846"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3847"> </A>The <TT CLASS="cv">Q3UnknownBinary_EmptyData</TT> function deallocates the memory pointed to by the <TT CLASS="cv">contents</TT> field of the <TT CLASS="cv">unknownBinaryData</TT> parameter. If successful, <TT CLASS="cv">Q3UnknownBinary_EmptyData</TT> sets that field to the value <TT CLASS="cv">NULL</TT>. It also sets the <TT CLASS="cv">objectType</TT> and <TT CLASS="cv">size</TT> fields to default values.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=8427"> </A>Q3UnknownBinary_GetTypeString</H2><P CLASS="T1.Text1"><A NAME="pgfId=8429"> </A><A NAME="marker=8428"> </A>You can use the <TT CLASS="cv">Q3UnknownBinary_GetTypeString</TT> function to get the type string of an unknown binary object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13416"> </A>TQ3Status Q3UnknownBinary_GetTypeString (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3UnknownObject unknownObject, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char **typeString);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13418"> </A><TT CLASS="cv">unknownObject</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=8431"> </A> An unknown binary object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13428"> </A>typeString</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=8432"> </A> A handle to the type string of an unknown binary data structure.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=8433"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=8434"> </A>The <TT CLASS="cv">Q3UnknownBinary_GetTypeString</TT> function returns a handle to the type string of an unknown binary object.</P><P CLASS="T1.Text1"><A NAME="pgfId=8435"> </A>Your application is responsible for allocating the memory occupied by the typeString parameter. You must call <TT CLASS="cv">Q3UnknownBinary_EmptyTypeString</TT> to release the memory allocated by <TT CLASS="cv">Q3UnknownBinary_GetTypeString</TT> when you are finished using the data.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=8436"> </A>Q3UnknownBinary_EmptyTypeString</H2><P CLASS="T1.Text1"><A NAME="pgfId=8439"> </A><B CLASS="bold"></B><A NAME="marker=8437"> </A><A NAME="marker=8438"> </A>You can use the <TT CLASS="cv">Q3UnknownBinary_EmptyTypeString</TT> function to dispose of the memory allocated by a previous call to <TT CLASS="cv">Q3UnknownBinary_GetTypeString</TT>.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13440"> </A>TQ3Status Q3UnknownBinary_EmptyTypeString (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char **typeString);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13442"> </A>typeString</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=8441"> </A>A handle to the type string of an unknown binary data structure.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=8442"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=8425"> </A>The <TT CLASS="cv">Q3UnknownBinary_EmptyTypeString</TT> function deallocates the memory used by a previous call to <TT CLASS="cv">Q3UnknownBinary_GetTypeString</TT>.<B CLASS="bold"></B><A NAME="marker=3848"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>