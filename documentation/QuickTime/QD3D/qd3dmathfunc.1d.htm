<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Managing Bounding Spheres</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=4352"> </A>Managing Bounding Spheres</H1><P CLASS="T1.Text1"><A NAME="pgfId=4357"> </A><A NAME="marker=4353"> </A>QuickDraw&nbsp;3D provides routines that you can use to manage bounding spheres.</P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4358"> </A>Q3BoundingSphere_Copy</H2><P CLASS="T1.Text1"><A NAME="pgfId=4359"> </A><A NAME="marker=2156"> </A>You can use the <TT CLASS="cv">Q3BoundingSphere_Copy</TT> function to make a copy of a bounding sphere.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=11216"> </A>TQ3BoundingSphere *Q3BoundingSphere_Copy (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3BoundingSphere *src, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3BoundingSphere *dest);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11218"> </A><TT CLASS="cv">src</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4361"> </A>A pointer to the bounding sphere to be copied.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11227"> </A><TT CLASS="cv">dest</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4362"> </A>On entry, a pointer to a buffer large enough to hold a bounding sphere. On exit, a pointer to a copy of the bounding sphere specified by the <TT CLASS="cv">src</TT> parameter.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4363"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4364"> </A>The <TT CLASS="cv">Q3BoundingSphere_Copy</TT> function returns, as its function result and in the <TT CLASS="cv">dest</TT> parameter, a copy of the bounding sphere specified by the <TT CLASS="cv">src</TT> parameter. <TT CLASS="cv">Q3BoundingSphere_Copy</TT> does not allocate any memory for the destination bounding sphere; the <TT CLASS="cv">dest</TT> parameter must point to space allocated in the heap or on the stack before you call <TT CLASS="cv">Q3BoundingSphere_Copy</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4365"> </A>Q3BoundingSphere_Union</H2><P CLASS="T1.Text1"><A NAME="pgfId=4366"> </A><A NAME="marker=2165"> </A>You can use the <TT CLASS="cv">Q3BoundingSphere_Union</TT> function to find the union of two bounding spheres.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=11238"> </A>TQ3BoundingSphere *Q3BoundingSphere_Union (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3BoundingSphere *s1, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3BoundingSphere *s2, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3BoundingSphere *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11240"> </A><TT CLASS="cv">s1</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4368"> </A>A pointer to a bounding sphere.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11249"> </A><TT CLASS="cv">s2</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4369"> </A>A pointer to a bounding sphere.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11258"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4370"> </A>On exit, a pointer to the union of the bounding spheres <TT CLASS="cv">s1</TT> and <TT CLASS="cv">s2</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4371"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4372"> </A>The <TT CLASS="cv">Q3BoundingSphere_Union</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, a pointer to the bounding sphere that is the union of the two bounding spheres specified by the parameters <TT CLASS="cv">s1</TT> and <TT CLASS="cv">s2</TT>. The <TT CLASS="cv">result</TT> parameter can point to the memory occupied by either <TT CLASS="cv">s1</TT> or <TT CLASS="cv">s2</TT>, thereby performing the union operation in place.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4373"> </A>Q3BoundingSphere_Set</H2><P CLASS="T1.Text1"><A NAME="pgfId=4374"> </A><A NAME="marker=2175"> </A>You can use the <TT CLASS="cv">Q3BoundingSphere_Set</TT> function to set the defining origin and radius of a bounding sphere.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=11269"> </A>TQ3BoundingSphere *Q3BoundingSphere_Set (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3BoundingSphere *bSphere, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point3D *origin, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float radius, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean isEmpty);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11271"> </A><TT CLASS="cv">bSphere</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4376"> </A>A pointer to a bounding sphere.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11280"> </A><TT CLASS="cv">origin</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4377"> </A>A pointer to a three-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11289"> </A><TT CLASS="cv">radius</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4378"> </A>A floating-point value that specifies the desired radius of the bounding sphere.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11298"> </A><TT CLASS="cv">isEmpty</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4379"> </A>A Boolean value that indicates whether the specified bounding sphere is empty (<TT CLASS="cv">kQ3True</TT>) or not (<TT CLASS="cv">kQ3False</TT>).</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4380"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4381"> </A>The <TT CLASS="cv">Q3BoundingSphere_Set</TT> function assigns the values <TT CLASS="cv">origin</TT> and <TT CLASS="cv">radius</TT> to the <TT CLASS="cv">origin</TT> and <TT CLASS="cv">radius</TT> fields of the bounding sphere specified by the <TT CLASS="cv">bSphere</TT> parameter. <TT CLASS="cv">Q3BoundingSphere_Set</TT> also assigns the value of the <TT CLASS="cv">isEmpty</TT> parameter to the <TT CLASS="cv">isEmpty</TT> field of the bounding sphere.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4382"> </A>Q3BoundingSphere_UnionPoint3D</H2><P CLASS="T1.Text1"><A NAME="pgfId=4383"> </A><A NAME="marker=2186"> </A>You can use the <TT CLASS="cv">Q3BoundingSphere_UnionPoint3D</TT> function to find the union of a bounding sphere and a three-dimensional point.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=11309"> </A>TQ3BoundingSphere *Q3BoundingSphere_UnionPoint3D (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3BoundingSphere *bSphere, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point3D *pt3D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3BoundingSphere *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11311"> </A><TT CLASS="cv">bSphere</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4385"> </A>A pointer to a bounding sphere.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11320"> </A><TT CLASS="cv">pt3D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4386"> </A>A three-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11329"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4387"> </A>On exit, a pointer to the union of the specified bounding sphere and the specified point.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4388"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4389"> </A>The <TT CLASS="cv">Q3BoundingSphere_UnionPoint3D</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, a pointer to the bounding sphere that is the union of the bounding sphere specified by the <TT CLASS="cv">bSphere</TT> parameter and the three-dimensional point specified by the <TT CLASS="cv">pt3D</TT> parameter. The <TT CLASS="cv">result</TT> parameter can point to the memory pointed to by <TT CLASS="cv">bSphere</TT>, thereby performing the union operation in place.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4390"> </A>Q3BoundingSphere_UnionRationalPoint4D</H2><P CLASS="T1.Text1"><A NAME="pgfId=4391"> </A><A NAME="marker=2196"> </A>You can use the <TT CLASS="cv">Q3BoundingSphere_UnionRationalPoint4D</TT> function to find the union of a bounding sphere and a rational four-dimensional point.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=11340"> </A>TQ3BoundingSphere *Q3BoundingSphere_UnionRationalPoint4D (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3BoundingSphere *bSphere, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3RationalPoint4D *pt4D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3BoundingSphere *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11342"> </A><TT CLASS="cv">bSphere</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4393"> </A>A pointer to a bounding sphere.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11351"> </A><TT CLASS="cv">pt4D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4394"> </A>A rational four-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11360"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4395"> </A>On exit, a pointer to the union of the specified bounding sphere and the specified point.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4396"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4397"> </A>The <TT CLASS="cv">Q3BoundingSphere_UnionRationalPoint4D</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, a pointer to the bounding sphere that is the union of the bounding sphere specified by the <TT CLASS="cv">bSphere</TT> parameter and the rational four-dimensional point specified by the <TT CLASS="cv">pt4D</TT> parameter. The <TT CLASS="cv">result</TT> parameter can point to the memory pointed to by <TT CLASS="cv">bSphere</TT>, thereby performing the union operation in place.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4398"> </A>Q3BoundingSphere_SetFromPoints3D</H2><P CLASS="T1.Text1"><A NAME="pgfId=4399"> </A><A NAME="marker=2206"> </A>You can use the <TT CLASS="cv">Q3BoundingSphere_SetFromPoints3D</TT> function to find the bounding sphere that bounds an arbitrary list of three-dimensional points.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=11371"> </A>TQ3BoundingSphere *Q3BoundingSphere_SetFromPoints3D (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3BoundingSphere *bSphere, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point3D *pts, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long nPts, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long structSize);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11373"> </A><TT CLASS="cv">bSphere</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4401"> </A>A pointer to a bounding sphere.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11382"> </A><TT CLASS="cv">pts</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4402"> </A>A pointer to a list of three-dimensional points.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11391"> </A><TT CLASS="cv">nPts</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4403"> </A>The number of points in the specified list.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11400"> </A><TT CLASS="cv">structSize</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4404"> </A>The number of bytes of data that separate two successive points in the specified list of points.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4405"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4406"> </A>The <TT CLASS="cv">Q3BoundingSphere_SetFromPoints3D</TT> function returns, as its function result and in the <TT CLASS="cv">bSphere</TT> parameter, a pointer to a bounding sphere that contains all the points in the list of three-dimensional points specified by the <TT CLASS="cv">pts</TT> parameter. The <TT CLASS="cv">nPts</TT> parameter indicates how many points are in that list, and the <TT CLASS="cv">structSize</TT> parameter indicates the offset between any two successive points in the list. By suitably specifying the value of the <TT CLASS="cv">structSize</TT> parameter, you can have QuickDraw&nbsp;3D extract points that are embedded in an array of larger data structures.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4410"> </A>Q3BoundingSphere_SetFromRationalPoints4D</H2><P CLASS="T1.Text1"><A NAME="pgfId=4411"> </A><A NAME="marker=2220"> </A>You can use the <TT CLASS="cv">Q3BoundingSphere_SetFromRationalPoints4D</TT> function to find the bounding sphere that bounds an arbitrary list of rational four-dimensional points.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=11415"> </A>TQ3BoundingSphere *Q3BoundingSphere_SetFromRationalPoints4D (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3BoundingSphere *bSphere, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3RationalPoint4D *pts, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long nPts, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long structSize);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11417"> </A><TT CLASS="cv">bSphere</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4413"> </A>A pointer to a bounding sphere.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11426"> </A><TT CLASS="cv">pts</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4414"> </A>A pointer to a list of rational four-dimensional points.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11435"> </A><TT CLASS="cv">nPts</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4415"> </A>The number of points in the specified list.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11444"> </A><TT CLASS="cv">structSize</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4416"> </A>The number of bytes of data that separate two successive points in the specified list of points.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4417"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4418"> </A>The <TT CLASS="cv">Q3BoundingSphere_SetFromRationalPoints4D</TT> function returns, as its function result and in the <TT CLASS="cv">bSphere</TT> parameter, a pointer to a bounding sphere that contains all the points in the list of rational four-dimensional points specified by the <TT CLASS="cv">pts</TT> parameter. The <TT CLASS="cv">nPts</TT> parameter indicates how many points are in that list, and the <TT CLASS="cv">structSize</TT> parameter indicates the offset between any two successive points in the list. By suitably specifying the value of the <TT CLASS="cv">structSize</TT> parameter, you can have QuickDraw&nbsp;3D extract points that are embedded in an array of larger data structures.<A NAME="marker=4422"> </A><A NAME="marker=4423"> </A></P><P CLASS="T1.Text1"><A NAME="pgfId=4716"> </A><A NAME="marker=4715"> </A>&nbsp;</P><P CLASS="T1.Text1"><A NAME="pgfId=2900"> </A>&nbsp;</P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>