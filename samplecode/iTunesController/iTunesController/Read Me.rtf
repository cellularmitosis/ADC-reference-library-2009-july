{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf330
{\fonttbl\f0\fnil\fcharset77 Verdana-Bold;\f1\fnil\fcharset77 Verdana;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww12420\viewh9800\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qc\pardirnatural

\f0\b\fs48 \cf0 iTunesController
\f1\b0\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 \
\
iTunesController allows you to control iTunes without having to bring it to the foreground.\
\
Ever find yourself in the middle of replying to an email, and a song comes on that you want to skip over?  Instead of stopping what you're doing, bringing iTunes to the front, advancing to the next song, and then going back to what it was you were previously doing.  Now just <Command><Right Arrow> directly from within your email application! That's it!\
\
While iTunesControl is running simple iTunes command keys are forwarded onto the iTunes application.\
\
<Command><Right Arrow>		= Next Song\
<Command><Left Arrow>		= Previous Song\
<Command><Up Arrow>		= Volume Up\
<Command><Down Arrow>		= Volume Down\
<Command><Number Pad 0>	= Play / Pause\
\
\
The sample makes use of the \CocoaLigature0 RegisterEventHotKey API which allows you to register to receive hotkey events while in the foreground or background.  Registering for a hotkey such as <command>-P causes problems because, once registered for a hotkey, that event does NOT get propagated to the frontmost application, and in this case, would intercept it from printing.  We overcome this problem, in the routine PostHotKeyKeyboardEvent, by first unregestering for hotkeys, posting the event to the frontmost application using CGPostKeyboardEvent, and then re-registering for hotkeys.  This sample also demonstrates how to communicate with iTunes through an AppleScript in our timer routine, PeriodicTimerAction.}