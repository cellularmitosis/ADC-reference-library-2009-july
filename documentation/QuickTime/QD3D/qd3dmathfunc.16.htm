<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Converting Points from Cartesian to Polar or Spherical Form</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=3762"> </A>Converting Points from Cartesian to Polar or Spherical Form</H1><P CLASS="T1.Text1"><A NAME="pgfId=3768"> </A><A NAME="marker=3763"> </A><A NAME="marker=3764"> </A>QuickDraw&nbsp;3D provides routines that you can use to convert two-dimensional points from Cartesian form (<I CLASS="italics">x</I>,&nbsp;<I CLASS="italics">y</I>) to polar form (<I CLASS="italics">r</I>,&nbsp;), and vice versa. QuickDraw&nbsp;3D also provides routines that you can use to convert three-dimensional points from Cartesian form (<I CLASS="italics">x</I>,&nbsp;<I CLASS="italics">y</I>,&nbsp;<I CLASS="italics">z</I>) to spherical form (,&nbsp;,&nbsp;), and vice versa.</P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3772"> </A>Q3Point2D_ToPolar</H2><P CLASS="T1.Text1"><A NAME="pgfId=3773"> </A><A NAME="marker=1446"> </A>You can use the <TT CLASS="cv">Q3Point2D_ToPolar</TT> function to convert a two-dimensional point from Cartesian form to polar form.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9390"> </A>TQ3PolarPoint *Q3Point2D_ToPolar (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point2D *point2D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3PolarPoint *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9392"> </A><TT CLASS="cv">point2D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3775"> </A>A two-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9401"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3776"> </A>On exit, a polar point.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3777"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3778"> </A>The <TT CLASS="cv">Q3Point2D_ToPolar</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, a polar point that is the same point as the two-dimensional point specified by the <TT CLASS="cv">point2D</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3779"> </A>Q3PolarPoint_ToPoint2D</H2><P CLASS="T1.Text1"><A NAME="pgfId=3780"> </A><A NAME="marker=1455"> </A>You can use the <TT CLASS="cv">Q3PolarPoint_ToPoint2D</TT> function to convert a polar point to Cartesian form.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9412"> </A>TQ3Point2D *Q3PolarPoint_ToPoint2D (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3PolarPoint *polarPoint, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Point2D *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9414"> </A><TT CLASS="cv">polarPoint</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3782"> </A>A polar point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9423"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3783"> </A>On exit, a two-dimensional point.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3784"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3785"> </A>The <TT CLASS="cv">Q3PolarPoint_ToPoint2D</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, the two-dimensional point that is the same point as the polar point specified by the <TT CLASS="cv">polarPoint</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3786"> </A>Q3Point3D_ToSpherical</H2><P CLASS="T1.Text1"><A NAME="pgfId=3787"> </A><A NAME="marker=1464"> </A>You can use the <TT CLASS="cv">Q3Point3D_ToSpherical</TT> function to convert a three-dimensional point from Cartesian form to spherical form.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9438"> </A>TQ3SphericalPoint *Q3Point3D_ToSpherical (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point3D *point3D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3SphericalPoint *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9440"> </A><TT CLASS="cv">point3D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3789"> </A>A three-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9449"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3790"> </A>On exit, a spherical point.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3791"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3316"> </A>The <TT CLASS="cv">Q3Point3D_ToSpherical</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, a spherical point that is the same point as the three-dimensional point specified by the <TT CLASS="cv">point3D</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3793"> </A>Q3SphericalPoint_ToPoint3D</H2><P CLASS="T1.Text1"><A NAME="pgfId=3794"> </A><A NAME="marker=1473"> </A>You can use the <TT CLASS="cv">Q3SphericalPoint_ToPoint3D</TT> function to convert a spherical point to Cartesian form.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9460"> </A>TQ3Point3D *Q3SphericalPoint_ToPoint3D (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3SphericalPoint *sphericalPoint, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Point3D *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9462"> </A><TT CLASS="cv">sphericalPoint</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3796"> </A> A spherical point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9472"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3797"> </A>On exit, a three-dimensional point.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3798"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3799"> </A>The <TT CLASS="cv">Q3SphericalPoint_ToPoint3D</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, the three-dimensional point that is the same point as the spherical point specified by the <TT CLASS="cv">sphericalPoint</TT> parameter.<A NAME="marker=3800"> </A><A NAME="marker=3801"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>