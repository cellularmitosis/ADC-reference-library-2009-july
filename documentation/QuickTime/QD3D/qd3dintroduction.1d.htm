<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Managing Strings</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=4603"> </A>Managing Strings</H1><P CLASS="T1.Text1"><A NAME="pgfId=4608"> </A><A NAME="marker=4604"> </A>QuickDraw&nbsp;3D provides routines that you can use to manage string objects (or strings). </P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4609"> </A>Q3String_GetType</H2><P CLASS="T1.Text1"><A NAME="pgfId=4611"> </A><A NAME="marker=4610"> </A><A NAME="marker=2359"> </A>You can use the <TT CLASS="cv">Q3String_GetType</TT> function to get the type of a string.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=11528"> </A>TQ3ObjectType Q3String_GetType (TQ3StringObject stringObj);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11530"> </A><TT CLASS="cv">stringObj</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4613"> </A>A string object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4614"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4615"> </A>The <TT CLASS="cv">Q3String_GetType</TT> function returns, as its function result, the type of the string specified by the <TT CLASS="cv">stringObj</TT> parameter. The type of string currently supported by QuickDraw&nbsp;3D is defined by a constant:<A NAME="marker=4619"> </A></P><CODE CLASS="Cv.Code"><A NAME="pgfId=11541"> </A>kQ3StringTypeCString<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=4621"> </A>If the type of the string cannot be determined or is invalid, <TT CLASS="cv">Q3String_GetType</TT> returns the value <TT CLASS="cv">kQ3ObjectTypeInvalid</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4624"> </A>Q3CString_New</H2><P CLASS="T1.Text1"><A NAME="pgfId=4626"> </A><A NAME="marker=4625"> </A><A NAME="marker=2376"> </A>You can use the <TT CLASS="cv">Q3CString_New</TT> function to create a new C string.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=11547"> </A>TQ3StringObject Q3CString_New (const char *string);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11549"> </A><TT CLASS="cv">string</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4628"> </A>A pointer to a null-terminated C string.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4629"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4630"> </A>The <TT CLASS="cv">Q3CString_New</TT> function returns, as its function result, a new string object of type <TT CLASS="cv">kQ3StringTypeCString</TT> using the sequence of characters pointed to by the <TT CLASS="cv">string</TT> parameter. That sequence of characters should be a standard C string (that is, an array of characters terminated by the null character). The characters are copied into the new string object's private data, so you can dispose of the array pointed to by the <TT CLASS="cv">string</TT> parameter if <TT CLASS="cv">Q3CString_New</TT> returns successfully. If <TT CLASS="cv">Q3CString_New</TT> cannot allocate memory for the string, it returns the value <TT CLASS="cv">NULL</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4631"> </A>Q3CString_GetLength</H2><P CLASS="T1.Text1"><A NAME="pgfId=4633"> </A><A NAME="marker=4632"> </A><A NAME="marker=2385"> </A>You can use the <TT CLASS="cv">Q3CString_GetLength</TT> function to get the length of a C string object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=11564"> </A>TQ3Status Q3CString_GetLength (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3StringObject stringObj, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *length);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11566"> </A><TT CLASS="cv">stringObj</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4635"> </A>A C string object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11575"> </A><TT CLASS="cv">length</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4636"> </A>On exit, the length of the specified C string object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4637"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4638"> </A>The <TT CLASS="cv">Q3CString_GetLength</TT> function returns, in the <TT CLASS="cv">length</TT> parameter, the number of characters in the data associated with the C string object specified by the <TT CLASS="cv">stringObj</TT> parameter. The length returned does not include the null character that terminates a C string. You should use <TT CLASS="cv">Q3CString_GetLength</TT> to get the length of only string objects of type <TT CLASS="cv">kQ3StringTypeCString</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4639"> </A>Q3CString_GetString</H2><P CLASS="T1.Text1"><A NAME="pgfId=4641"> </A><A NAME="marker=4640"> </A><A NAME="marker=2395"> </A>You can use the <TT CLASS="cv">Q3CString_GetString</TT> function to get the character data of a C string object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=11586"> </A>TQ3Status Q3CString_GetString (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3StringObject stringObj, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char **string);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11588"> </A><TT CLASS="cv">stringObj</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4643"> </A>A C string object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11597"> </A><TT CLASS="cv">string</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4644"> </A>On entry, the value <TT CLASS="cv">NULL</TT>. On exit, a pointer to a copy of the character data associated with the specified C string object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4645"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4646"> </A>The <TT CLASS="cv">Q3CString_GetString</TT> function returns, through the <TT CLASS="cv">string</TT> parameter, a pointer to a copy of the character data associated with the C string object specified by the <TT CLASS="cv">stringObj</TT> parameter. The value of the <TT CLASS="cv">string</TT> parameter must be <TT CLASS="cv">NULL</TT> when you call <TT CLASS="cv">Q3CString_GetString</TT>, because it allocates memory and overwrites the <TT CLASS="cv">string</TT> parameter. For instance, the following sequence of calls will cause a memory leak:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=11608"> </A>myStatus = Q3CString_GetString(myStringObj, &amp;myString);<BR>myStatus = Q3CString_GetString(myStringObj, &amp;myString);<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=4648"> </A>After the second call to <TT CLASS="cv">Q3CString_GetString</TT>, the memory allocated by the first call to <TT CLASS="cv">Q3CString_GetString</TT> is leaked; you cannot deallocate that memory because you've lost its address. You must make certain to call <TT CLASS="cv">Q3CString_EmptyData</TT> to release the memory allocated by <TT CLASS="cv">Q3CString_GetString</TT> when you are finished using the string data, and always before calling <TT CLASS="cv">Q3CString_GetString</TT> with the same string pointer. Here is an example:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=11612"> </A>myStatus = Q3CString_GetString(myStringObj, &amp;myString);<BR>myStatus = Q3CString_EmptyData(&amp;myString);<BR>myStatus = Q3CString_GetString(myStringObj, &amp;myString);<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=4650"> </A>If the value of the <TT CLASS="cv">string</TT> parameter is not <TT CLASS="cv">NULL</TT>, <TT CLASS="cv">Q3CString_GetString</TT> generates a warning.</P><P CLASS="T1.Text1"><A NAME="pgfId=4651"> </A>You should use <TT CLASS="cv">Q3CString_GetString</TT> only with string objects of type <TT CLASS="cv">kQ3StringTypeCString</TT>.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4652"> </A>ERRORS AND WARNINGS</H3><P CLASS="T1.Text1"><A NAME="pgfId=4653"> </A><TT CLASS="cv">kQ3WarningPossibleMemoryLeak</TT></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4654"> </A>Q3CString_SetString</H2><P CLASS="T1.Text1"><A NAME="pgfId=4656"> </A><A NAME="marker=4655"> </A><A NAME="marker=2412"> </A>You can use the <TT CLASS="cv">Q3CString_SetString</TT> function to set the character data of a C string object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=11616"> </A>TQ3Status Q3CString_SetString (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3StringObject stringObj, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *string);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11618"> </A><TT CLASS="cv">stringObj</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4658"> </A>A C string object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11627"> </A><TT CLASS="cv">string</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4659"> </A>On entry, a pointer a C string specifying the character data to be associated with the specified C string object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4660"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4661"> </A>The <TT CLASS="cv">Q3CString_SetString</TT> function sets the character data associated with the C string object specified by the <TT CLASS="cv">stringObj</TT> parameter to the sequence of characters pointed to by the <TT CLASS="cv">string</TT> parameter. That sequence of characters should be a standard C string (that is, an array of characters terminated by the null character). The characters are copied into the specified string object's private data, so you can dispose of the array pointed to by the <TT CLASS="cv">string</TT> parameter if <TT CLASS="cv">Q3CString_SetString</TT> returns successfully.</P><P CLASS="T1.Text1"><A NAME="pgfId=4662"> </A>You should use <TT CLASS="cv">Q3CString_SetString</TT> only with string objects of type <TT CLASS="cv">kQ3StringTypeCString</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=4663"> </A>Q3CString_EmptyData</H2><P CLASS="T1.Text1"><A NAME="pgfId=4665"> </A><A NAME="marker=4664"> </A><A NAME="marker=2423"> </A>You can use the <TT CLASS="cv">Q3CString_EmptyData</TT> function to dispose of the memory allocated by a previous call to <TT CLASS="cv">Q3CString_GetString</TT>.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=11638"> </A>TQ3Status Q3CString_EmptyData (char **string);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=11640"> </A><TT CLASS="cv">string</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4667"> </A>On entry, a pointer to a copy of the character data returned by a previous call to <TT CLASS="cv">Q3CString_GetString</TT>. On exit, the value <TT CLASS="cv">NULL</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=4668"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4669"> </A>The <TT CLASS="cv">Q3CString_EmptyData</TT> function deallocates the memory pointed to by the <TT CLASS="cv">string</TT> parameter. The value of the <TT CLASS="cv">string</TT> parameter must have been returned by a previous call to the <TT CLASS="cv">Q3CString_GetString</TT> function. If successful, <TT CLASS="cv">Q3CString_EmptyData</TT> sets the value of the <TT CLASS="cv">string</TT> parameter to <TT CLASS="cv">NULL</TT>. Thus, you can alternate calls to <TT CLASS="cv">Q3CString_GetString</TT> and <TT CLASS="cv">Q3CString_EmptyData</TT> without explicitly setting the character pointer to <TT CLASS="cv">NULL</TT>.</P><P CLASS="T1.Text1"><A NAME="pgfId=4670"> </A>You should use <TT CLASS="cv">Q3CString_EmptyData</TT> only with string objects of type <TT CLASS="cv">kQ3StringTypeCString</TT>.<A NAME="marker=4671"> </A><A NAME="marker=4672"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>