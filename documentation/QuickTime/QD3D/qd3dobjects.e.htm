<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Analyzing the Object Hierarchy</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=14427"> </A>Analyzing the Object Hierarchy</H1><P CLASS="T1.Text1"><A NAME="pgfId=14431"> </A>QuickDraw&nbsp;3D provides routines to help you analyze its object hierarchy.</P><P CLASS="T1.Text1"><A NAME="pgfId=15560"> </A>An example of using <A NAME="marker=17709"> </A>object hierarchy analysis functions is given in <A HREF="qd3dobjects.e.htm#33346" CLASS="XRef">Listing&nbsp;4</A>. This example recursively prints all the subclasses for a particular class to <TT CLASS="cv">stdout</TT>, assuming that an ANSI C support library is available. If you wanted to print out the entire class hierarchy for QuickDraw&nbsp;3D, you could use this routine in the way shown at the end of the example.</P><P CLASS="L.Listing"><A NAME="pgfId=15550"> </A>Listing&nbsp;4<A NAME="33346"> </A>Example of hierarchy analysis</P><CODE CLASS="Cv.Code"><A NAME="pgfId=21205"> </A>void PrintClassAndRecurse(<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3ObjectType &nbsp;&nbsp;objectClassType, <BR>&nbsp;&nbsp;&nbsp;&nbsp;int &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depth)<BR>{<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3SubClassData&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subClassData;<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3ObjectClassNameString &nbsp;&nbsp;&nbsp;objectClassString;<BR>&nbsp;&nbsp;&nbsp;&nbsp;unsigned long&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index;<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=21209"> </A>&nbsp;&nbsp;&nbsp;&nbsp;depth++;<BR>&nbsp;&nbsp;&nbsp;&nbsp;if (objectClassType != kQ3ObjectTypeInvalid) {<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=21213"> </A>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3ObjectHierarchy_GetStringFromType(objectClassType, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;objectClassString);<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=21217"> </A>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (index = 0; index &lt; depth; index++) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot; &quot;);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=21221"> </A>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;%s\n&quot;, objectClassString);<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=21225"> </A>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3ObjectHierarchy_GetSubClassData(objectClassType, &amp;subClassData);<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=21229"> </A>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (index = 0; index &lt; subClassData.numClasses; index++) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* recurse on each subclass type */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PrintClassAndRecurse(subClassData.classTypes[index], depth);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=21233"> </A>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3ObjectHierarchy_EmptySubClassData(&amp;subClassData);<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;depth--;<BR>}<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=21237"> </A>/*<BR>*&nbsp;&nbsp;&nbsp;The class &quot;Object&quot; is in fact a virtual base class -- it is not<BR>*&nbsp;&nbsp;&nbsp;possible to instantiate this class. At the root of the hierarchy<BR>*&nbsp;&nbsp;&nbsp;are four classes: View, Pick, Element, and Shared. So we can go from<BR>*&nbsp;&nbsp;&nbsp;each of these classes, instead of going from &quot;Object&quot;.<BR>*/<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=21241"> </A>&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Root Object (virtual metaclass)\n&quot;);<BR>&nbsp;&nbsp;&nbsp;&nbsp;PrintClassAndRecurse(kQ3ObjectTypeView, 0);<BR>&nbsp;&nbsp;&nbsp;&nbsp;PrintClassAndRecurse(kQ3ObjectTypeElement, 0);<BR>&nbsp;&nbsp;&nbsp;&nbsp;PrintClassAndRecurse(kQ3ObjectTypePick, 0);<BR>&nbsp;&nbsp;&nbsp;&nbsp;PrintClassAndRecurse(kQ3ObjectTypeShared, 0);<BR></CODE><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=15633"> </A>Q3ObjectHierarchy_GetTypeFromString</H2><P CLASS="T1.Text1"><A NAME="pgfId=14009"> </A>You can use the Q3ObjectHierarchy_GetTypeFromString function to obtain the class type for a given class name.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=21245"> </A>typedef char &nbsp;&nbsp;&nbsp;TQ3ObjectClassNameString[kQ3StringMaximumLength];<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=18436"> </A><TT CLASS="cv">kQ3StringMaximumLength = 1024</TT></P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21251"> </A>TQ3Status Q3ObjectHierarchy_GetTypeFromString(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ObjectClassNameString&nbsp;&nbsp;&nbsp;&nbsp;objectClassString,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ObjectType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*objectClassType);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21253"> </A>objectClassString</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=14011"> </A> 	A class name as a C string.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21263"> </A>objectClassType</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=14012"> </A> 	On return, the class type.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=14014"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=14015"> </A>The Q3ObjectHierarchy_GetTypeFromString function returns, in the objectClassType parameter, the class type associated with the name in the objectClassString parameter. If objectClassString is invalid, the routine will return <TT CLASS="cv">kQ3Failure</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=14021"> </A>Q3ObjectHierarchy_GetStringFromType</H2><P CLASS="T1.Text1"><A NAME="pgfId=14022"> </A>You can use the Q3ObjectHierarchy_GetStringFromType function to obtain the class name for a given class type.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21275"> </A>TQ3Status Q3ObjectHierarchy_GetStringFromType(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ObjectType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;objectClassType,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ObjectClassNameString&nbsp;&nbsp;&nbsp;&nbsp;objectClassString);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21277"> </A>objectClassType</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=14024"> </A> 	A class type.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21287"> </A>objectClassString</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=14025"> </A> 	On return, a class name as a C string.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=14027"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=14028"> </A>The Q3ObjectHierarchy_GetStringFromType function returns, in the objectClassString parameter, the class name associated with the type in the objectClassType parameter. If objectClassType is invalid, the routine will return <TT CLASS="cv">kQ3Failure</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=14030"> </A>Q3ObjectHierarchy_IsTypeRegistered</H2><P CLASS="T1.Text1"><A NAME="pgfId=14031"> </A>You can use the Q3ObjectHierarchy_IsTypeRegistered function to determine if a class type is registered.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21299"> </A>TQ3Boolean Q3ObjectHierarchy_IsTypeRegistered(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ObjectType&nbsp;&nbsp;&nbsp;&nbsp;objectClassType);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21301"> </A>objectClassType</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=14033"> </A> 	A class type.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=14036"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=14037"> </A>The Q3ObjectHierarchy_IsTypeRegistered function returns <TT CLASS="cv">TRUE</TT> if the class type specified by objectClassType is registered and <TT CLASS="cv">FALSE</TT> otherwise.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=14043"> </A>Q3ObjectHierarchy_IsNameRegistered</H2><P CLASS="T1.Text1"><A NAME="pgfId=14044"> </A>You can use the Q3ObjectHierarchy_IsNameRegistered function to determine if a class name is registered.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21313"> </A>TQ3Boolean Q3ObjectHierarchy_IsNameRegistered(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char&nbsp;&nbsp;&nbsp;&nbsp;*objectClassName);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21315"> </A>objectClassName</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=14046"> </A> 	A class name as a C string.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=14049"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=14050"> </A>The Q3ObjectHierarchy_IsNameRegistered function returns <TT CLASS="cv">TRUE</TT> if the class name specified by objectClassName is registered and <TT CLASS="cv">FALSE</TT> otherwise.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=14054"> </A>Q3ObjectHierarchy_GetSubClassData</H2><P CLASS="T1.Text1"><A NAME="pgfId=14055"> </A>You can use the Q3ObjectHierarchy_GetSubClassData function to obtain the number and class types of all the subclasses immediately below a class in the QuickDraw&nbsp;3D class hierarchy.</P><CODE CLASS="Cv.Code"><A NAME="pgfId=21327"> </A>typedef struct TQ3SubClassData {<BR>&nbsp;&nbsp;&nbsp;&nbsp;unsigned long&nbsp;&nbsp;&nbsp;&nbsp;numClasses;&nbsp;&nbsp;&nbsp;&nbsp;/* the # of subclass types found */<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3ObjectType&nbsp;&nbsp;&nbsp;&nbsp;*classTypes;&nbsp;&nbsp;&nbsp;/* an array of class types */<BR>} TQ3SubClassData;<BR></CODE><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21333"> </A>TQ3Status Q3ObjectHierarchy_GetSubClassData(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ObjectType&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;objectClassType,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3SubClassData&nbsp;&nbsp;&nbsp;&nbsp;*subClassData);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21337"> </A>objectClassType</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=14057"> </A> 	An object class type.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21348"> </A>subClassData</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=14338"> </A>Pointer to a TQ3SubClassData struct containing the number and class types of the subclasses below objectClassType.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=14339"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=14061"> </A>The Q3ObjectHierarchy_GetSubClassData function returns, in the subClassData parameter, the number and class types of all the subclasses immediately below the class designated by objectClassType.</P><P CLASS="T1.Text1"><A NAME="pgfId=14309"> </A>This call must be followed by a call to Q3ObjectHierarchy_EmptySubClassData to avoid memory leaks.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=14067"> </A>Q3ObjectHierarchy_EmptySubClassData</H2><P CLASS="T1.Text1"><A NAME="pgfId=14068"> </A>You must use the Q3ObjectHierarchy_EmptySubClassData function to free memory allocated by Q3ObjectHierarchy_GetSubClassData.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=21359"> </A>TQ3Status Q3ObjectHierarchy_EmptySubClassData(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3SubClassData&nbsp;&nbsp;&nbsp;&nbsp;*subClassData);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=21361"> </A>subClassData</DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=14070"> </A>Pointer to a TQ3SubClassData struct.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=14073"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=14074"> </A>The Q3ObjectHierarchy_EmptySubClassData function frees memory allocated for subClassData by a previous call to Q3ObjectHierarchy_GetSubClassData.</P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>