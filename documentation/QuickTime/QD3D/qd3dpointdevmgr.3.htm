<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE> Controllers</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="H2.Heading2"><A NAME="pgfId=3094"> </A>Controllers</H1><P CLASS="T1.Text1"><A NAME="pgfId=3096"> </A><A NAME="marker=3095"> </A>In order for a user to interact successfully with the objects in a three-dimensional model, it's necessary for the computer to provide some means of manipulating positions along three independent axes. Most existing computer systems support only two-dimensional input devices, such as mouse pointers or graphics tablets. QuickDraw&nbsp;3D provides a standard interface between applications and devices that allows users to work with any available 3D pointing devices. In addition, the QuickDraw&nbsp;3D Pointing Device Manager provides routines that you can use to determine what kinds of 3D pointing devices are available and to assign certain of them to specific uses in your application.</P><P CLASS="T1.Text1"><A NAME="pgfId=3104"> </A>A <B CLASS="bold">3D pointing device</B><A NAME="marker=3103"> </A> is any physical device capable of controlling movements or specifying positions in three-dimensional space. QuickDraw&nbsp;3D represents 3D pointing devices as <B CLASS="bold">controller objects</B> (or, more briefly, <B CLASS="bold">controllers</B>). A user can attach more than one 3D pointing device to a computer. Accordingly, QuickDraw&nbsp;3D can support more than one controller at a time. When several 3D pointing devices are present, they can all contribute to the movement of a single user interface element (such as the position of the selected object), or they can control different elements. For example, a particular 3D pointing device can be dedicated to controlling a view's camera, and another 3D pointing device can drive the position of the selected object.</P><P CLASS="T1.Text1"><A NAME="pgfId=3111"> </A>The position and orientation of a single element in your application's user interface are represented by a <B CLASS="bold">tracker object</B> (or, more briefly, a <B CLASS="bold">tracker</B>). For instance, the position and orientation of a selected object are represented by a tracker, as is any other interface element you've assigned to some controller. Each controller can affect only one tracker, but a tracker can be affected by one or more controllers. <A HREF="qd3dpointdevmgr.3.htm#15682" CLASS="XRef">Figure&nbsp;2</A> illustrates a possible arrangement of devices, controllers, and trackers.<A NAME="marker=3115"> </A><A NAME="marker=3116"> </A></P><P CLASS="Fg.Figure"><A NAME="pgfId=3121"> </A>Figure&nbsp;2<A NAME="15682"> </A>A sample configuration of input devices, controllers, and trackers</P><DIV><IMG SRC="qd3dpointdevmgr-1.gif"></DIV><P CLASS="T1.Text1"><A NAME="pgfId=3122"> </A>The controller object associated with a particular 3D pointing device is usually created by a device driver, the software that communicates with the device using whatever low-level protocols are appropriate for the device. The device can be connected to the computer through a serial port, via ADB connections, through an expansion card, or by other means. The device driver receives data from the device and passes it to the associated controller. As already indicated, a controller is associated with exactly one tracker. Changes in the position or orientation of the pointing device thereby result in changes in the position or orientation of the associated tracker.</P><P CLASS="I.Important"><A NAME="pgfId=3123"> </A>By default, a controller contributes to the position of the system's cursor. You can, if you wish, reassign a particular controller to control the position or orientation of some other user interface element. </P><P CLASS="T1.Text1"><A NAME="pgfId=3124"> </A>All controllers are capable of controlling positions, and some controllers are capable of controlling orientations as well. Pointing devices contain one or more buttons; the associated controller must be capable of reading button states (up or down) from the pointing device and reporting those states to the tracker. Currently, QuickDraw&nbsp;3D supports up to 32 buttons on a 3D pointing device. More generally, a pointing device may support additional input and output modes as well. For example, it's possible to construct a 3D pointing device that contains a number of dials and alphanumeric displays labeling those dials. The device's controller must then be able to communicate information about dials and labels between the device and an application using that device.</P><P CLASS="T1.Text1"><A NAME="pgfId=3125"> </A>Any piece of information, beyond the standard position, orientation, and buttons, that the user sends to the application by means of an input device is called a <B CLASS="bold">controller value.</B> Any piece of information sent from the application to the input device is called a <B CLASS="bold">controller channel.</B> A dial position, for example, is a controller value, whereas an alphanumeric label generated by the application is a controller channel.<A NAME="marker=3126"> </A></P><P CLASS="T1.Text1"><A NAME="pgfId=3136"> </A>In general, your application does not need to communicate with controllers directly. As&nbsp;already indicated, controllers are almost always created by their associated device drivers, which read data from the devices and pass it to the associated controller. Moreover, a controller is by default connected to the cursor. Your application needs to access a controller only to assign it to some interface element other than the cursor or to read controller data other than position, orientation, and button states. To get information about other controller values, for instance, you need to call routines that query the controller directly.</P><P CLASS="T1.Text1"><A NAME="pgfId=3140"> </A>QuickDraw&nbsp;3D maintains a list of all the controllers that are available on a computer. A controller is identified by its signature, which is a string that uniquely identifies the manufacturer and model of the controller. You can search for a controller by signature by calling QuickDraw&nbsp;3D Pointing Device Manager routines. Once a controller is added to the list of available controllers, it cannot be removed from it, but it can be made inactive. If for some reason a device becomes unavailable, the device driver should mark the controller as inactive. The device might later become available, in which case the driver can reactivate the controller. You should always check that a controller is active before directly accessing a controller from the list of controllers.</P><P CLASS="Note"><A NAME="pgfId=3144"> </A>Because controllers may be shared by multiple applications, you cannot dispose of a controller. Instead, you can decommission the controller by calling <TT CLASS="cv">Q3Controller_Decommission</TT>. Decommissioning a controller makes it inoperative for any application. <A NAME="marker=3148"> </A></P><P CLASS="T1.Text1"><A NAME="pgfId=5207"> </A>Controllers are referenced by the <TT CLASS="cv">TQ3ControllerRef</TT> type:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=7551"> </A>typedef void *TQ3ControllerRef;<BR></CODE><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>