<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Bounding in a View</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=3384"> </A>Bounding in a View</H1><P CLASS="T1.Text1"><A NAME="pgfId=3392"> </A><A NAME="marker=3385"> </A>As described in the chapters <A HREF="qd3dgeometry.htm#25217" CLASS="XRef">&quot;Geometric Objects&quot;</A> and <A HREF="qd3dgroups.htm#31395" CLASS="XRef">&quot;Group Objects&quot;</A>, QuickDraw&nbsp;3D provides routines that you can use to compute the bounding box and bounding sphere of an object or a group of objects in a model. Computing an object's bounding box or bounding sphere requires applying to it all the transforms in the current view transform stack. QuickDraw&nbsp;3D provides routines that you must call before and after computing an object's bounds.</P><P CLASS="T1.Text1"><A NAME="pgfId=3402"> </A>QuickDraw&nbsp;3D also provides a routine that you can use to determine whether a bounding box is visible in a view. You might use that routine to avoid specifying portions of a model that aren't visible.</P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3403"> </A>Q3View_StartBoundingBox</H2><P CLASS="T1.Text1"><A NAME="pgfId=3404"> </A><A NAME="marker=896"> </A>You can use the <TT CLASS="cv">Q3View_StartBoundingBox</TT> function to start computing an object's bounding box.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9118"> </A>TQ3Status Q3View_StartBoundingBox (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ViewObject view, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ComputeBounds computeBounds);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9120"> </A><TT CLASS="cv">view</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3406"> </A>A view.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9129"> </A><TT CLASS="cv">computeBounds</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=2672"> </A> A constant that specifies how the bounding box should be computed. See the following description for details.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3407"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3408"> </A>The <TT CLASS="cv">Q3View_StartBoundingBox</TT> function begins the process of calculating a bounding box in the view specified by the <TT CLASS="cv">view</TT> parameter. After calling <TT CLASS="cv">Q3View_StartBoundingBox</TT>, you specify the model (for instance, by calling <TT CLASS="cv">Q3Geometry_Submit</TT>). When you have completely specified that model, you should call <TT CLASS="cv">Q3View_EndBoundingBox</TT> to complete the bounding operation. The renderer attached to the specified view might need to reprocess the model data, so you should always call <TT CLASS="cv">Q3View_StartBoundingBox</TT> and <TT CLASS="cv">Q3View_EndBoundingBox</TT> in a bounding loop.</P><P CLASS="T1.Text1"><A NAME="pgfId=2677"> </A>The <TT CLASS="cv">computeBounds</TT> parameter determines the algorithm that QuickDraw&nbsp;3D uses to calculate the bounding box. You should set <TT CLASS="cv">computeBounds</TT> to one of these constants:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=9141"> </A>typedef enum TQ3ComputeBounds {<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3ComputeBoundsExact,<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3ComputeBoundsApproximate<BR>} TQ3ComputeBounds;<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=2682"> </A><A NAME="marker=9143"> </A>If you set <TT CLASS="cv">computeBounds</TT> to <TT CLASS="cv">kQ3ComputeBoundsExact</TT>, the vertices of the geometric object are transformed into world space, and then the world space bounding box is computed from the transformed vertices. This method of calculating a bounding box produces the most precise bounding box but is slower than using the <TT CLASS="cv">kQ3ComputeBoundsApproximate</TT> method.</P><P CLASS="T1.Text1"><A NAME="pgfId=2683"> </A>If you set <TT CLASS="cv">computeBounds</TT> to <TT CLASS="cv">kQ3ComputeBoundsApproximate</TT>, a local bounding box is computed from the vertices of the geometric object, and then that bounding box is transformed into world space. The transformed bounding box is returned as the approximate bounding box of the geometric object. This method of calculating a bounding box is faster than using the <TT CLASS="cv">kQ3ComputeBoundsExact</TT> method but produces a bounding box that might be larger than that computed by the exact method.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3409"> </A>Q3View_EndBoundingBox</H2><P CLASS="T1.Text1"><A NAME="pgfId=3410"> </A><A NAME="marker=904"> </A>You can use the <TT CLASS="cv">Q3View_EndBoundingBox</TT> function to stop computing an object's bounding box.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9147"> </A>TQ3ViewStatus Q3View_EndBoundingBox (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ViewObject view, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3BoundingBox *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9149"> </A><TT CLASS="cv">view</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3412"> </A>A view.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9158"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3413"> </A>On exit, the bounding box for the objects specified in the bounding loop.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3414"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3415"> </A>The <TT CLASS="cv">Q3View_EndBoundingBox</TT> function returns, as its function result, a view status value that indicates the current state of the bounding box calculation of the objects in the view specified by the <TT CLASS="cv">view</TT> parameter. <TT CLASS="cv">Q3View_EndBoundingBox</TT> returns one of these four values:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=9169"> </A>typedef enum TQ3ViewStatus {<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3ViewStatusDone,<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3ViewStatusRetraverse,<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3ViewStatusError,<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3ViewStatusCancelled<BR>} TQ3ViewStatus;<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=3417"> </A><A NAME="marker=9171"> </A>If <TT CLASS="cv">Q3View_EndBoundingBox</TT> returns <TT CLASS="cv">kQ3ViewStatusDone</TT>, the bounding box calculation has completed. At that point, it is safe to exit your bounding loop. The <TT CLASS="cv">result</TT> parameter contains the bounding box.</P><P CLASS="T1.Text1"><A NAME="pgfId=3418"> </A>If <TT CLASS="cv">Q3View_EndBoundingBox</TT> returns <TT CLASS="cv">kQ3ViewStatusRetraverse</TT>, the bounding box calculation has not yet completed. You should respecify the model by reentering your bounding loop.</P><P CLASS="T1.Text1"><A NAME="pgfId=3419"> </A>If <TT CLASS="cv">Q3View_EndBoundingBox</TT> returns <TT CLASS="cv">kQ3ViewStatusError</TT>, the bounding box calculation has failed. You should exit the bounding loop.</P><P CLASS="T1.Text1"><A NAME="pgfId=3420"> </A>If <TT CLASS="cv">Q3View_EndBoundingBox</TT> returns <TT CLASS="cv">kQ3ViewStatusCancelled</TT>, the bounding box calculation has been canceled. You should exit the bounding loop.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3421"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=3422"> </A>You should call <TT CLASS="cv">Q3View_EndBoundingBox</TT> only if bounding box calculation is already occurring.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3423"> </A>Q3View_StartBoundingSphere</H2><P CLASS="T1.Text1"><A NAME="pgfId=3424"> </A><A NAME="marker=920"> </A>You can use the <TT CLASS="cv">Q3View_StartBoundingSphere</TT> function to start computing an object's bounding sphere.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9175"> </A>TQ3Status Q3View_StartBoundingSphere (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ViewObject view, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ComputeBounds computeBounds);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9177"> </A><TT CLASS="cv">view</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3426"> </A>A view.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9186"> </A><TT CLASS="cv">computeBounds</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=2624"> </A> A constant that specifies how the bounding sphere should be computed. See the following description for details.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3427"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3428"> </A>The <TT CLASS="cv">Q3View_StartBoundingSphere</TT> function begins the process of calculating a bounding sphere in the view specified by the <TT CLASS="cv">view</TT> parameter. After calling <TT CLASS="cv">Q3View_StartBoundingSphere</TT>, you specify the model (for instance, by calling <TT CLASS="cv">Q3Geometry_Submit</TT>). When you have completely specified that model, you should call <TT CLASS="cv">Q3View_EndBoundingSphere</TT> to complete the bounding operation. The renderer attached to the specified view might need to reprocess the model data, so you should always call <TT CLASS="cv">Q3View_StartBoundingSphere</TT> and <TT CLASS="cv">Q3View_EndBoundingSphere</TT> in a bounding loop.</P><P CLASS="T1.Text1"><A NAME="pgfId=2743"> </A>The <TT CLASS="cv">computeBounds</TT> parameter determines the algorithm that QuickDraw&nbsp;3D uses to calculate the bounding sphere. You should set <TT CLASS="cv">computeBounds</TT> to one of these constants:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=9198"> </A>typedef enum TQ3ComputeBounds {<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3ComputeBoundsExact,<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3ComputeBoundsApproximate<BR>} TQ3ComputeBounds;<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=2745"> </A><A NAME="marker=9200"> </A>If you set <TT CLASS="cv">computeBounds</TT> to <TT CLASS="cv">kQ3ComputeBoundsExact</TT>, the vertices of the geometric object are transformed into world space, and then the world space bounding sphere is computed from the transformed vertices. This method of calculating a bounding sphere produces the most precise bounding sphere but is slower than using the <TT CLASS="cv">kQ3ComputeBoundsApproximate</TT> method.</P><P CLASS="T1.Text1"><A NAME="pgfId=2746"> </A>If you set <TT CLASS="cv">computeBounds</TT> to <TT CLASS="cv">kQ3ComputeBoundsApproximate</TT>, a local bounding sphere is computed from the vertices of the geometric object, and then that bounding sphere is transformed into world space. The transformed bounding sphere is returned as the approximate bounding sphere of the geometric object. This method of calculating a bounding sphere is faster than using the <TT CLASS="cv">kQ3ComputeBoundsExact</TT> method but produces a bounding sphere that might be larger than that computed by the exact method.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3429"> </A>Q3View_EndBoundingSphere</H2><P CLASS="T1.Text1"><A NAME="pgfId=3430"> </A><A NAME="marker=928"> </A>You can use the <TT CLASS="cv">Q3View_EndBoundingSphere</TT> function to stop computing an object's bounding sphere.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9204"> </A>TQ3ViewStatus Q3View_EndBoundingSphere (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ViewObject view, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3BoundingSphere *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9206"> </A><TT CLASS="cv">view</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3432"> </A>A view.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9215"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3433"> </A>On exit, the bounding sphere for the objects specified in the bounding loop.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3434"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3435"> </A>The <TT CLASS="cv">Q3View_EndBoundingSphere</TT> function returns, as its function result, a view status value that indicates the current state of the bounding sphere calculation of the objects in the view specified by the <TT CLASS="cv">view</TT> parameter. <TT CLASS="cv">Q3View_EndBoundingBox</TT> returns one of these four values:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=9226"> </A>typedef enum TQ3ViewStatus {<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3ViewStatusDone,<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3ViewStatusRetraverse,<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3ViewStatusError,<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3ViewStatusCancelled<BR>} TQ3ViewStatus;<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=3437"> </A>If <TT CLASS="cv">Q3View_EndBoundingSphere</TT> returns <TT CLASS="cv">kQ3ViewStatusDone</TT>, the bounding sphere calculation has completed. At that point, it is safe to exit your bounding loop. The <TT CLASS="cv">result</TT> parameter contains the bounding sphere.</P><P CLASS="T1.Text1"><A NAME="pgfId=3438"> </A>If <TT CLASS="cv">Q3View_EndBoundingSphere</TT> returns <TT CLASS="cv">kQ3ViewStatusRetraverse</TT>, the bounding sphere calculation has not yet completed. You should respecify the model by reentering your bounding loop.</P><P CLASS="T1.Text1"><A NAME="pgfId=3439"> </A>If <TT CLASS="cv">Q3View_EndBoundingSphere</TT> returns <TT CLASS="cv">kQ3ViewStatusError</TT>, the bounding sphere calculation has failed. You should exit the bounding loop.</P><P CLASS="T1.Text1"><A NAME="pgfId=3440"> </A>If <TT CLASS="cv">Q3View_EndBoundingSphere</TT> returns <TT CLASS="cv">kQ3ViewStatusCancelled</TT>, the bounding sphere calculation has been canceled. You should exit the bounding loop.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3441"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=3442"> </A>You should call <TT CLASS="cv">Q3View_EndBoundingSphere</TT> only if bounding sphere calculation is already occurring.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3443"> </A>Q3View_IsBoundingBoxVisible</H2><P CLASS="T1.Text1"><A NAME="pgfId=3444"> </A><A NAME="marker=944"> </A>You can use the <TT CLASS="cv">Q3View_IsBoundingBoxVisible</TT> function to determine whether a bounding box is visible in a view (that is, whether it lies in the viewing frustum).</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9230"> </A>TQ3Boolean Q3View_IsBoundingBoxVisible (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ViewObject view, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3BoundingBox *bbox);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9232"> </A><TT CLASS="cv">view</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3446"> </A>A view.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9241"> </A><TT CLASS="cv">bbox</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3447"> </A>A bounding box.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3448"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3449"> </A>The <TT CLASS="cv">Q3View_IsBoundingBoxVisible</TT> function returns, as its function result, a Boolean value that indicates whether the bounding box specified by the <TT CLASS="cv">bbox</TT> parameter is visible in the view specified by the <TT CLASS="cv">view</TT> parameter (<TT CLASS="cv">kQ3True</TT>) or is not visible (<TT CLASS="cv">kQ3False</TT>). <TT CLASS="cv">Q3View_IsBoundingBoxVisible</TT> transforms the specified bounding box by the view's local-to-world transform and then determines whether the box lies in the viewing frustum.<A NAME="marker=3450"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>