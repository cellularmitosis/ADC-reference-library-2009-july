<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Creating and Managing Controllers</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=3290"> </A>Creating and Managing Controllers</H1><P CLASS="T1.Text1"><A NAME="pgfId=3295"> </A><A NAME="marker=3291"> </A>QuickDraw&nbsp;3D provides routines that you can use to create and manipulate controller objects.</P><P CLASS="Note"><A NAME="pgfId=3296"> </A>Some of these functions are intended for use only by controller device drivers. You should not call those functions from within applications. </P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3300"> </A>Q3Controller_New</H2><P CLASS="T1.Text1"><A NAME="pgfId=3302"> </A><A NAME="marker=3301"> </A><A NAME="marker=744"> </A>You can use the <TT CLASS="cv">Q3Controller_New</TT> function to create a new controller.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=7633"> </A>TQ3ControllerRef Q3Controller_New (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3ControllerData *controllerData);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7635"> </A><TT CLASS="cv">controllerData</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4422"> </A> A pointer to a controller data structure.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3305"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3306"> </A>The <TT CLASS="cv">Q3Controller_New</TT> function returns, as its function result, a reference to a new controller object having the characteristics specified by the <TT CLASS="cv">controllerData</TT> parameter. The new controller object is initially made active and is associated with the system cursor's tracker. You can call <TT CLASS="cv">Q3Controller_SetTracker</TT> to associate the controller with some other tracker. The serial number of the new controller object is set to 1. If <TT CLASS="cv">Q3Controller_New</TT> cannot create a new controller, it returns <TT CLASS="cv">NULL</TT>.</P><P CLASS="T1.Text1"><A NAME="pgfId=3307"> </A>You cannot delete a controller, but you can make it no longer operational. See the description of <TT CLASS="cv">Q3Controller_Decommission</TT> (<A HREF="qd3dpointdevmgr.c.htm#14738" CLASS="XRef">[link]</A>) for details.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3311"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=3312"> </A>In general, you need to use this function only if you are writing a device driver for a controller.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3313"> </A>SEE ALSO</H3><P CLASS="T1.Text1"><A NAME="pgfId=3317"> </A>See <A HREF="qd3dpointdevmgr.a.htm#18600" CLASS="XRef">&quot;Controller Data Structure&quot;</A> for a description of the fields of the controller data structure.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3318"> </A>Q3Controller_GetListChanged</H2><P CLASS="T1.Text1"><A NAME="pgfId=3320"> </A><A NAME="marker=3319"> </A><A NAME="marker=764"> </A>You can use the <TT CLASS="cv">Q3Controller_GetListChanged</TT> function to determine whether the list of available controllers has changed.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=7647"> </A>TQ3Status Q3Controller_GetListChanged (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean *listChanged, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *serialNumber);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7649"> </A><TT CLASS="cv">listChanged</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3322"> </A>On exit, a Boolean value that indicates whether the list of available controllers has changed (<TT CLASS="cv">kQ3True</TT>) or not (<TT CLASS="cv">kQ3False</TT>).</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7658"> </A><TT CLASS="cv">serialNumber</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3323"> </A>On entry, a serial number of the list of available controllers. On exit, the current serial number of that list.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3324"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3325"> </A>The <TT CLASS="cv">Q3Controller_GetListChanged</TT> function returns, in the <TT CLASS="cv">listChanged</TT> parameter, a Boolean value that indicates whether the list of available controllers has changed since the time the serial number passed in the <TT CLASS="cv">serialNumber</TT> parameter was generated. If the list has changed, the new serial number is returned in the <TT CLASS="cv">serialNumber</TT> parameter; otherwise, the <TT CLASS="cv">serialNumber</TT> parameter is unchanged.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3326"> </A>Q3Controller_Next</H2><P CLASS="T1.Text1"><A NAME="pgfId=3328"> </A><A NAME="marker=3327"> </A><A NAME="marker=774"> </A>You can use the <TT CLASS="cv">Q3Controller_Next</TT> function to read through the list of available controllers.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=7669"> </A>TQ3Status Q3Controller_Next (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef *nextControllerRef);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7671"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3330"> </A>A reference to a controller, or <TT CLASS="cv">NULL</TT>.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7680"> </A><TT CLASS="cv">nextControllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3331"> </A> On exit, a reference to the controller that immediately follows the specified controller. If the value in the <TT CLASS="cv">controllerRef</TT> parameter is <TT CLASS="cv">NULL</TT>, this parameter returns a reference to the first controller.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3332"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3333"> </A>The <TT CLASS="cv">Q3Controller_Next</TT> function returns, in the <TT CLASS="cv">nextControllerRef</TT> parameter, a reference to the controller that immediately follows the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter. To get the first controller in the list, pass the value <TT CLASS="cv">NULL</TT> in the <TT CLASS="cv">controllerRef</TT> parameter. If the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter is the last controller in the list, <TT CLASS="cv">nextControllerRef</TT> is set to <TT CLASS="cv">NULL</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3335"> </A><A NAME="14738"> </A>Q3Controller_Decommission</H2><P CLASS="T1.Text1"><A NAME="pgfId=3337"> </A><A NAME="marker=3336"> </A><A NAME="marker=785"> </A>You can use the <TT CLASS="cv">Q3Controller_Decommission</TT> function to make a controller inactive.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=7692"> </A>TQ3Status Q3Controller_Decommission (TQ3ControllerRef controllerRef);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7694"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3339"> </A>A reference to a controller.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3340"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3341"> </A>The <TT CLASS="cv">Q3Controller_Decommission</TT> function makes the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter inactive. Any remaining references to a controller that has been decommissioned are still valid, but the controller is no longer operational. (In other words, when the specified controller is referred to by an application or process other than the one that created it, reasonable default values are returned, not <TT CLASS="cv">kQ3Failure</TT>.) Decommissioning a controller might cause the notify function of the tracker currently associated with the specified controller to be called.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3342"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=3343"> </A>The <TT CLASS="cv">Q3Controller_Decommission</TT> function should be called only by the application or process that created the specified controller.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3344"> </A>Q3Controller_GetActivation</H2><P CLASS="T1.Text1"><A NAME="pgfId=3346"> </A><A NAME="marker=3345"> </A><A NAME="marker=796"> </A>You can use the <TT CLASS="cv">Q3Controller_GetActivation</TT> function to get the activation state of a controller.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=7705"> </A>TQ3Status Q3Controller_GetActivation (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean *active);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7707"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4424"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7716"> </A><TT CLASS="cv">active</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3349"> </A>On exit, a Boolean value that indicates whether the specified controller is active (<TT CLASS="cv">kQ3True</TT>) or inactive (<TT CLASS="cv">kQ3False</TT>).</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3350"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3351"> </A>The <TT CLASS="cv">Q3Controller_GetActivation</TT> function returns, in the <TT CLASS="cv">active</TT> parameter, a Boolean value that indicates whether the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter is currently active or inactive.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3352"> </A>Q3Controller_SetActivation</H2><P CLASS="T1.Text1"><A NAME="pgfId=3354"> </A><A NAME="marker=3353"> </A><A NAME="marker=806"> </A>You can use the <TT CLASS="cv">Q3Controller_SetActivation</TT> function to set the activation state of a controller.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=7727"> </A>TQ3Status Q3Controller_SetActivation (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean active);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7729"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3356"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7738"> </A><TT CLASS="cv">active</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3357"> </A>A Boolean value that indicates whether the specified controller is to be made active (<TT CLASS="cv">kQ3True</TT>) or inactive (<TT CLASS="cv">kQ3False</TT>).</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3358"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3359"> </A>The <TT CLASS="cv">Q3Controller_SetActivation</TT> function sets the activation state of the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter to the value specified in the <TT CLASS="cv">active</TT> parameter. If the activation state of a controller is changed, the serial number of the list of available controllers is incremented. A controller should be inactive if it is temporarily off-line.</P><P CLASS="T1.Text1"><A NAME="pgfId=3360"> </A>The notify function of the tracker currently associated with the specified controller might be called when <TT CLASS="cv">Q3Controller_SetActivation</TT> is called.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3361"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=3362"> </A>In general, you need to use this function only if you are writing a device driver for a controller.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3363"> </A>Q3Controller_GetSignature</H2><P CLASS="T1.Text1"><A NAME="pgfId=3365"> </A><A NAME="marker=3364"> </A><A NAME="marker=819"> </A>You can use the <TT CLASS="cv">Q3Controller_GetSignature</TT> function to get the signature of a controller.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=7749"> </A>TQ3Status Q3Controller_GetSignature (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *signature, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long numChars);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7751"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3367"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7760"> </A><TT CLASS="cv">signature</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3368"> </A>On entry, a pointer to a buffer that is to be filled with the signature of the specified controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7769"> </A><TT CLASS="cv">numChars</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3369"> </A>On entry, the size of the buffer pointed to by the <TT CLASS="cv">signature</TT> parameter.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3370"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3371"> </A>The <TT CLASS="cv">Q3Controller_GetSignature</TT> function returns, through the <TT CLASS="cv">signature</TT> parameter, the signature of the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter. You are responsible for allocating a buffer whose address is passed in the <TT CLASS="cv">signature</TT> parameter and whose size is passed in the <TT CLASS="cv">numChars</TT> parameter. If the signature is larger than the specified size, the signature is truncated to fit in the buffer.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3373"> </A><A NAME="17313"> </A>Q3Controller_GetChannel</H2><P CLASS="T1.Text1"><A NAME="pgfId=3375"> </A><A NAME="marker=3374"> </A><A NAME="marker=831"> </A>You can use the <TT CLASS="cv">Q3Controller_GetChannel</TT> function to get a controller channel.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=7780"> </A>TQ3Status Q3Controller_GetChannel (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long channel, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void *data, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *dataSize);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7782"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3377"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7791"> </A><TT CLASS="cv">channel</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3378"> </A>An index into the list of channels associated with the specified controller. This value is always greater than or equal to 0 and less than the channel count specified at the time <TT CLASS="cv">Q3Controller_New</TT> was called.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7800"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3379"> </A>On exit, a pointer to the current value of the specified controller channel. The data type of the returned channel is controller-specific.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7809"> </A><TT CLASS="cv">dataSize</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3380"> </A>On entry, the number of bytes in the specified buffer. On exit, the number of bytes actually written to that buffer.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3381"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3382"> </A>The <TT CLASS="cv">Q3Controller_GetChannel</TT> function returns, through the <TT CLASS="cv">data</TT> parameter, the current controller channel specified by the <TT CLASS="cv">controllerRef</TT> and <TT CLASS="cv">channel</TT> parameters. You are responsible for allocating memory for the data buffer and passing the size of that buffer in the <TT CLASS="cv">dataSize</TT> parameter. <TT CLASS="cv">Q3Controller_GetChannel</TT> returns, in the <TT CLASS="cv">dataSize</TT> parameter, the number of bytes written to the data buffer.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3384"> </A><A NAME="20948"> </A>Q3Controller_SetChannel</H2><P CLASS="T1.Text1"><A NAME="pgfId=3386"> </A><A NAME="marker=3385"> </A><A NAME="marker=844"> </A>You can use the <TT CLASS="cv">Q3Controller_SetChannel</TT> function to set a controller channel.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=7820"> </A>TQ3Status Q3Controller_SetChannel (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long channel, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const void *data, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long dataSize);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7822"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3388"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7831"> </A><TT CLASS="cv">channel</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3389"> </A>An index into the list of channels associated with the specified controller. This value is always greater than or equal to 0 and less than the channel count specified at the time <TT CLASS="cv">Q3Controller_New</TT> was called.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7840"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3390"> </A>On entry, a pointer to a buffer that contains the desired value of the specified controller channel. The data type of the channel is controller-specific. If this field contains the value <TT CLASS="cv">NULL</TT>, the specified channel is reset to a default or inactive value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7849"> </A><TT CLASS="cv">dataSize</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3391"> </A>On entry, the number of bytes of data in the specified buffer.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3392"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3393"> </A>The <TT CLASS="cv">Q3Controller_SetChannel</TT> function sets the controller channel specified by the <TT CLASS="cv">controllerRef</TT> and <TT CLASS="cv">channel</TT> parameters to the data whose address is passed in the <TT CLASS="cv">data</TT> parameter. The <TT CLASS="cv">dataSize</TT> parameter specifies the number of bytes in the <TT CLASS="cv">data</TT> buffer.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3394"> </A>Q3Controller_GetValueCount</H2><P CLASS="T1.Text1"><A NAME="pgfId=3396"> </A><A NAME="marker=3395"> </A><A NAME="marker=856"> </A>You can use the <TT CLASS="cv">Q3Controller_GetValueCount</TT> function to get the number of values of a controller.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=7860"> </A>TQ3Status Q3Controller_GetValueCount (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *valueCount);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7862"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3398"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7871"> </A><TT CLASS="cv">valueCount</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3399"> </A>On exit, the number of values supported by the specified controller.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3400"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3401"> </A>The <TT CLASS="cv">Q3Controller_GetValueCount</TT> function returns, in the <TT CLASS="cv">valueCount</TT> parameter, the number of values supported by the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3402"> </A>Q3Controller_SetTracker</H2><P CLASS="T1.Text1"><A NAME="pgfId=3404"> </A><A NAME="marker=3403"> </A><A NAME="marker=866"> </A>You can use the <TT CLASS="cv">Q3Controller_SetTracker</TT> function to set the tracker associated with a controller.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=7882"> </A>TQ3Status Q3Controller_SetTracker (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3TrackerObject tracker);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7884"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3406"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7893"> </A><TT CLASS="cv">tracker</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3407"> </A>A tracker object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3408"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3409"> </A>The <TT CLASS="cv">Q3Controller_SetTracker</TT> function associates the tracker specified by the <TT CLASS="cv">tracker</TT> parameter with the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter. If the value of the <TT CLASS="cv">tracker</TT> parameter is <TT CLASS="cv">NULL</TT>, the controller is attached to the system cursor tracker. Changing a controller's tracker might cause the notify functions of both the previous tracker and the new tracker to be called.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3410"> </A>Q3Controller_HasTracker</H2><P CLASS="T1.Text1"><A NAME="pgfId=3412"> </A><A NAME="marker=3411"> </A><A NAME="marker=876"> </A>You can use the <TT CLASS="cv">Q3Controller_HasTracker</TT> function to determine whether a controller is currently associated with a tracker.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=7904"> </A>TQ3Status Q3Controller_HasTracker (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean *hasTracker);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7906"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3414"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7915"> </A><TT CLASS="cv">hasTracker</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3415"> </A>On exit, a Boolean value that indicates whether the specified controller is currently associated with an active tracker (<TT CLASS="cv">kQ3True</TT>) or not (<TT CLASS="cv">kQ3False</TT>).</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3416"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3417"> </A>The <TT CLASS="cv">Q3Controller_HasTracker</TT> function returns, in the <TT CLASS="cv">hasTracker</TT> parameter, a Boolean value that indicates whether the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter is active and is currently associated with an active tracker.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3418"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=3419"> </A>In general, you need to use this function only if you are writing a device driver for a controller.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3420"> </A>Q3Controller_Track2DCursor</H2><P CLASS="T1.Text1"><A NAME="pgfId=3422"> </A><A NAME="marker=3421"> </A><A NAME="marker=888"> </A>You can use the <TT CLASS="cv">Q3Controller_Track2DCursor</TT> function to determine whether a controller is currently affecting the two-dimensional system cursor.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=7926"> </A>TQ3Status Q3Controller_Track2DCursor (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean *track2DCursor);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7928"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3424"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7937"> </A><TT CLASS="cv">track2DCursor</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3425"> </A>On exit, a Boolean value that indicates whether the specified controller is currently affecting the two-dimensional system cursor (<TT CLASS="cv">kQ3True</TT>) or not (<TT CLASS="cv">kQ3False</TT>).</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3426"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3427"> </A>The <TT CLASS="cv">Q3Controller_Track2DCursor</TT> function returns, in the <TT CLASS="cv">track2DCursor</TT> parameter, a Boolean value that indicates whether the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter is currently affecting the two-dimensional system cursor but the <I CLASS="italics">z</I> axis values and orientation of the system cursor tracker are being ignored. If the specified controller is not attached to the system cursor tracker or if that controller is inactive, <TT CLASS="cv">track2DCursor</TT> is set to <TT CLASS="cv">kQ3False</TT>.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3428"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=3429"> </A>In general, you need to use this function only if you are writing a device driver for a controller.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3430"> </A>Q3Controller_Track3DCursor</H2><P CLASS="T1.Text1"><A NAME="pgfId=3431"> </A><A NAME="marker=899"> </A>You can use the <TT CLASS="cv">Q3Controller_Track3DCursor</TT> function to determine whether a controller is currently affecting the depth information also being used with the system cursor.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=7948"> </A>TQ3Status Q3Controller_Track3DCursor (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean *track3DCursor);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7950"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3433"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7959"> </A><TT CLASS="cv">track3DCursor</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3434"> </A>On exit, a Boolean value that indicates whether the specified controller is currently affecting the system cursor and the depth is being used (<TT CLASS="cv">kQ3True</TT>) or not (<TT CLASS="cv">kQ3False</TT>).</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3435"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3436"> </A>The <TT CLASS="cv">Q3Controller_Track3DCursor</TT> function returns, in the <TT CLASS="cv">track3DCursor</TT> parameter, a Boolean value that indicates whether the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter is currently affecting the two-dimensional system cursor and the <I CLASS="italics">z</I> axis values and orientation of the system cursor tracker are not being ignored. If the specified controller is not attached to the system cursor tracker or if that controller is inactive, <TT CLASS="cv">track3DCursor</TT> is set to <TT CLASS="cv">kQ3False</TT>.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3437"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=3438"> </A>In general, you need to use this function only if you are writing a device driver for a controller.<A NAME="marker=3439"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3440"> </A>Q3Controller_GetButtons</H2><P CLASS="T1.Text1"><A NAME="pgfId=3442"> </A><A NAME="marker=3441"> </A><A NAME="marker=912"> </A>You can use the <TT CLASS="cv">Q3Controller_GetButtons</TT> function to get the button state of a controller.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=7970"> </A>TQ3Status Q3Controller_GetButtons (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *buttons);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7972"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3444"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7981"> </A><TT CLASS="cv">buttons</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3445"> </A>On exit, the current button state value of the specified controller.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3446"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3447"> </A>The <TT CLASS="cv">Q3Controller_GetButtons</TT> function returns, in the <TT CLASS="cv">buttons</TT> parameter, the current button state value of the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3448"> </A>Q3Controller_SetButtons</H2><P CLASS="T1.Text1"><A NAME="pgfId=3450"> </A><A NAME="marker=3449"> </A><A NAME="marker=922"> </A>You can use the <TT CLASS="cv">Q3Controller_SetButtons</TT> function to set the button state of a controller.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=7992"> </A>TQ3Status Q3Controller_SetButtons (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long buttons);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=7994"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3452"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8003"> </A><TT CLASS="cv">buttons</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3453"> </A>A button state value.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3454"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3455"> </A>The <TT CLASS="cv">Q3Controller_SetButtons</TT> function sets the button state of the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter to the button state value passed in the <TT CLASS="cv">buttons</TT> parameter. If the specified controller is inactive, <TT CLASS="cv">Q3Controller_SetButtons</TT> has no effect. Changing a controller's button state might cause the notify function of the tracker currently associated with that controller to be called.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3456"> </A>Q3Controller_GetTrackerPosition</H2><P CLASS="T1.Text1"><A NAME="pgfId=3458"> </A><A NAME="marker=3457"> </A><A NAME="marker=932"> </A>You can use the <TT CLASS="cv">Q3Controller_GetTrackerPosition</TT> function to get the position of a controller's tracker.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8014"> </A>TQ3Status Q3Controller_GetTrackerPosition (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Point3D *position);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8016"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3460"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8025"> </A><TT CLASS="cv">position</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3461"> </A>On exit, the current position of the tracker associated with the specified controller.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3462"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3463"> </A>The <TT CLASS="cv">Q3Controller_GetTrackerPosition</TT> function returns, in the <TT CLASS="cv">position</TT> parameter, the current position of the tracker associated with the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter. If no tracker is currently associated with that controller, <TT CLASS="cv">Q3Controller_GetTrackerPosition</TT> returns the position of the system cursor's tracker. <TT CLASS="cv">Q3Controller_GetTrackerPosition</TT> has no effect if the controller is inactive.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3464"> </A>Q3Controller_SetTrackerPosition</H2><P CLASS="T1.Text1"><A NAME="pgfId=3466"> </A><A NAME="marker=3465"> </A><A NAME="marker=942"> </A>You can use the <TT CLASS="cv">Q3Controller_SetTrackerPosition</TT> function to set the position of a controller's tracker.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8036"> </A>TQ3Status Q3Controller_SetTrackerPosition (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point3D *position);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8038"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3468"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8047"> </A><TT CLASS="cv">position</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3469"> </A>The desired position of the tracker associated with the specified controller.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3470"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3471"> </A>The <TT CLASS="cv">Q3Controller_SetTrackerPosition</TT> function changes the position of the tracker currently associated with the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter to the position specified in the <TT CLASS="cv">position</TT> parameter. If no tracker is currently associated with that controller, <TT CLASS="cv">Q3Controller_SetTrackerPosition</TT> changes the position of the system cursor's tracker. <TT CLASS="cv">Q3Controller_SetTrackerPosition</TT> has no effect if the controller is inactive.</P><P CLASS="Note"><A NAME="pgfId=3472"> </A>Calling <TT CLASS="cv">Q3Controller_SetTrackerPosition</TT> might cause the notify function of the controller's tracker to be called. </P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3476"> </A>Q3Controller_MoveTrackerPosition</H2><P CLASS="T1.Text1"><A NAME="pgfId=3478"> </A><A NAME="marker=3477"> </A><A NAME="marker=956"> </A>You can use the <TT CLASS="cv">Q3Controller_MoveTrackerPosition</TT> function to move a controller's tracker relative to its current position.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8058"> </A>TQ3Status Q3Controller_MoveTrackerPosition (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Vector3D *delta);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8060"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3480"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8069"> </A><TT CLASS="cv">delta</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3481"> </A>A three-dimensional vector specifying a relative change in the position of the tracker associated with the specified controller.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3482"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3483"> </A>The <TT CLASS="cv">Q3Controller_MoveTrackerPosition</TT> function changes the position of the tracker currently associated with the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter by the relative amount specified in the <TT CLASS="cv">delta</TT> parameter. If no tracker is currently associated with that controller, <TT CLASS="cv">Q3Controller_MoveTrackerPosition</TT> changes the position of the system cursor's tracker relative to its current position. <TT CLASS="cv">Q3Controller_MoveTrackerPosition</TT> has no effect if the controller is inactive.</P><P CLASS="Note"><A NAME="pgfId=3484"> </A>Calling <TT CLASS="cv">Q3Controller_MoveTrackerPosition</TT> might cause the notify function of the controller's tracker to be called. </P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3488"> </A>Q3Controller_GetTrackerOrientation</H2><P CLASS="T1.Text1"><A NAME="pgfId=3490"> </A><A NAME="marker=3489"> </A><A NAME="marker=970"> </A>You can use the <TT CLASS="cv">Q3Controller_GetTrackerOrientation</TT> function to get the current orientation of a controller's tracker.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8080"> </A>TQ3Status Q3Controller_GetTrackerOrientation (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Quaternion *orientation);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8082"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3492"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8091"> </A><TT CLASS="cv">orientation</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3493"> </A>On exit, the current orientation of the tracker associated with the specified controller.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3494"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3495"> </A>The <TT CLASS="cv">Q3Controller_GetTrackerOrientation</TT> function returns, in the <TT CLASS="cv">orientation</TT> parameter, the current orientation of the tracker associated with the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter. If no tracker is currently associated with that controller, <TT CLASS="cv">Q3Controller_GetTrackerOrientation</TT> returns the orientation of the system cursor's tracker. <TT CLASS="cv">Q3Controller_GetTrackerOrientation</TT> has no effect if the controller is inactive.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3496"> </A>Q3Controller_SetTrackerOrientation</H2><P CLASS="T1.Text1"><A NAME="pgfId=3498"> </A><A NAME="marker=3497"> </A><A NAME="marker=980"> </A>You can use the <TT CLASS="cv">Q3Controller_SetTrackerOrientation</TT> function to set the orientation of a controller's tracker.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8102"> </A>TQ3Status Q3Controller_SetTrackerOrientation (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *orientation);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8104"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3500"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8113"> </A><TT CLASS="cv">orientation</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3501"> </A>The desired orientation of the tracker associated with the specified controller.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3502"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3503"> </A>The <TT CLASS="cv">Q3Controller_SetTrackerOrientation</TT> function changes the orientation of the tracker currently associated with the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter to the orientation specified in the <TT CLASS="cv">orientation</TT> parameter. If no tracker is currently associated with that controller, <TT CLASS="cv">Q3Controller_SetTrackerOrientation</TT> changes the orientation of the system cursor's tracker. <TT CLASS="cv">Q3Controller_SetTrackerOrientation</TT> has no effect if the controller is inactive.</P><P CLASS="Note"><A NAME="pgfId=3504"> </A>Calling <TT CLASS="cv">Q3Controller_SetTrackerOrientation</TT> might cause the notify function of the controller's tracker to be called. </P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3508"> </A>Q3Controller_MoveTrackerOrientation</H2><P CLASS="T1.Text1"><A NAME="pgfId=3510"> </A><A NAME="marker=3509"> </A><A NAME="marker=994"> </A>You can use the <TT CLASS="cv">Q3Controller_MoveTrackerOrientation</TT> function to reorient a controller's tracker relative to its current orientation.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8124"> </A>TQ3Status Q3Controller_MoveTrackerOrientation (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Quaternion *delta);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8126"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3512"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8135"> </A><TT CLASS="cv">delta</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3513"> </A>The desired relative change in the orientation of the tracker associated with the specified controller.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3514"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3515"> </A>The <TT CLASS="cv">Q3Controller_MoveTrackerOrientation</TT> function changes the orientation of the tracker currently associated with the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter by the relative amount specified in the <TT CLASS="cv">delta</TT> parameter. If no tracker is currently associated with that controller, <TT CLASS="cv">Q3Controller_MoveTrackerOrientation</TT> changes the orientation of the system cursor's tracker relative to its current orientation. <TT CLASS="cv">Q3Controller_MoveTrackerOrientation</TT> has no effect if the controller is inactive.</P><P CLASS="Note"><A NAME="pgfId=3516"> </A>Calling <TT CLASS="cv">Q3Controller_MoveTrackerOrientation</TT> might cause the notify function of the controller's tracker to be called. </P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3521"> </A><A NAME="33271"> </A>Q3Controller_GetValues</H2><P CLASS="T1.Text1"><A NAME="pgfId=3523"> </A><A NAME="marker=3522"> </A><A NAME="marker=1009"> </A>You can use the <TT CLASS="cv">Q3Controller_GetValues</TT> function to get the list of values of a controller.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8146"> </A>TQ3Status Q3Controller_GetValues (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long valueCount, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float *values, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Boolean *changed, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *serialNumber);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8148"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3525"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8157"> </A><TT CLASS="cv">valueCount</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3526"> </A>The number of elements in the array pointed to by the <TT CLASS="cv">values</TT> parameter.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8166"> </A><TT CLASS="cv">values</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3527"> </A>On entry, a pointer to an array of controller values. The size of the array is determined by the number of elements in the array (as specified by the <TT CLASS="cv">valueCount</TT> parameter) and the size of a controller value (which is controller-dependent).</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8175"> </A><TT CLASS="cv">changed</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3528"> </A>On exit, a Boolean value that indicates whether the specified array of values was changed (<TT CLASS="cv">kQ3True</TT>) or not (<TT CLASS="cv">kQ3False</TT>).</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8184"> </A><TT CLASS="cv">serialNumber</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3529"> </A>On entry, a controller serial number, or <TT CLASS="cv">NULL</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3530"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3531"> </A>The <TT CLASS="cv">Q3Controller_GetValues</TT> function returns, in the <TT CLASS="cv">values</TT> parameter, a pointer to an array that contains the current values for the controller specified in the <TT CLASS="cv">controllerRef</TT> parameter. The <TT CLASS="cv">valueCount</TT> parameter specifies the number of elements in the array (which you must already have allocated). <TT CLASS="cv">Q3Controller_GetValues</TT> might fill in fewer elements if the controller does not support the specified number of values.</P><P CLASS="T1.Text1"><A NAME="pgfId=3532"> </A>If the value of the <TT CLASS="cv">serialNumber</TT> parameter is <TT CLASS="cv">NULL</TT>, <TT CLASS="cv">Q3Controller_GetValues</TT> fills in the <TT CLASS="cv">values</TT> array and returns the value <TT CLASS="cv">kQ3True</TT> in the <TT CLASS="cv">changed</TT> parameter. Otherwise, the value specified in the <TT CLASS="cv">serialNumber</TT> parameter is compared with the controller's current serial number. If the two serial numbers are identical, <TT CLASS="cv">Q3Controller_GetValues</TT> leaves the <TT CLASS="cv">values</TT> array and the <TT CLASS="cv">serialNumber</TT> parameter unchanged and returns the value <TT CLASS="cv">kQ3False</TT> in the <TT CLASS="cv">changed</TT> parameter. If the two serial number differ, <TT CLASS="cv">Q3Controller_GetValues</TT> fills in the <TT CLASS="cv">values</TT> array, updates the <TT CLASS="cv">serialNumber</TT> parameter, and returns the value <TT CLASS="cv">kQ3True</TT> in the <TT CLASS="cv">changed</TT> parameter.</P><P CLASS="T1.Text1"><A NAME="pgfId=3533"> </A>If the specified controller is inactive, the <TT CLASS="cv">values</TT> array and the <TT CLASS="cv">changed</TT> parameter are unchanged.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3535"> </A><A NAME="18225"> </A>Q3Controller_SetValues</H2><P CLASS="T1.Text1"><A NAME="pgfId=3537"> </A><A NAME="marker=3536"> </A><A NAME="marker=1025"> </A>You can use the <TT CLASS="cv">Q3Controller_SetValues</TT> function to set the list of values of a controller.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8195"> </A>TQ3Status Q3Controller_SetValues (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3ControllerRef controllerRef, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const float *values, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long valueCount);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8197"> </A><TT CLASS="cv">controllerRef</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3539"> </A>A reference to a controller.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8206"> </A><TT CLASS="cv">values</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3540"> </A>A pointer to an array of controller values. The size of the array is determined by the number of elements in the array (as specified by the <TT CLASS="cv">valueCount</TT> parameter) and the size of a controller value (which is controller-dependent).</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8215"> </A><TT CLASS="cv">valueCount</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3541"> </A>The number of elements in the array pointed to by the <TT CLASS="cv">values</TT> parameter.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3542"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3543"> </A>The <TT CLASS="cv">Q3Controller_SetValues</TT> function copies the data specified in the <TT CLASS="cv">values</TT> parameter into the value list of the controller specified by the <TT CLASS="cv">controllerRef</TT> parameter. <TT CLASS="cv">Q3Controller_SetValues</TT> copies the number of elements specified by the <TT CLASS="cv">valueCount</TT> parameter.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3544"> </A>SPECIAL CONSIDERATIONS</H3><P CLASS="T1.Text1"><A NAME="pgfId=3545"> </A>In general, you need to use this function only if you are writing a device driver for a controller.<A NAME="marker=3546"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>