{\rtf1\mac\ansicpg10000\cocoartf100
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fswiss\fcharset77 Helvetica-Oblique;
\f3\fmodern\fcharset77 Courier-Bold;}
{\colortbl;\red255\green255\blue255;}
\vieww13680\viewh17780\viewkind0
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\fs24 \cf0 \

\f1\b\fs36 Animated Slider\

\f0\b0\fs24 \
The code in this sample enables all 
\f2\i NSSliders
\f0\i0  in an app to animate movement to a given value, just like the sliders in the equalizer window in iTunes.  Adding this functionality required just 150 lines of code (which could have been less, if I wasn't explictly coding for maximum clarity.)\
\
The AnimatedSlider code sample demonstrates several common techniques in Cocoa programming:\
\
1)  adding functionality to a class in Cocoa's AppKit Framework with an Objective-C category,\
2)  the use of an 
\f2\i NSTimer
\f0\i0  object to send periodic messages, \
3)  the use of an 
\f2\i NSDictionary
\f0\i0  to keep track of objects when you can't just add an instance variable.\
\
  To use this code in your programs, add the .h and .m files to your project.  If you want to use the 
\f3\b -animateToFloatValueFrom:
\f0\b0  action in your Interface Builder files, select "Read Files\'c9" from IB's "Classes" menu, and read in the .h file.  After you do this, 
\f3\b -animateToFloatValueFrom:
\f0\b0  should appear as one of the action methods available when you make a connection to any NSSlider in your nib file.\
	\
A few things that bear mentioning:\
\
The animation uses a sinusoidal ease-in/ease-out function, which gives a more visually pleasing effect than moving the slider at a constant speed.  In the real world, when a servo motor moves a slider there is inertia at work, so it takes a while for the slider to accelerate.  The ease function makes the motion more realistic.  It's at the bottom of the file 
\f3\b NSSlider_Animation.m
\f0\b0 , and it's called 
\f3\b easeFunction().
\f0\b0 \
\
You may have noticed that the .m file contains interfaces and implementations for categories of two classes, 
\f2\i NSSlider
\f0\i0 , and 
\f2\i NSSliderCell
\f0\i0 .  It's perfectly kosher for this to be in the same file, since the code I'm hanging on both classes all pertains to the same functionality (animating the sliders.)  Some people would have put these in separate files, but it's a matter of style:  the compiler doesn't care.\
\
I've only implemented 
\f3\b -animateToFloatValue:
\f0\b0 . While NSSlider has methods like 
\f3\b -setIntValue:
\f0\b0  and 
\f3\b -setDoubleValue:
\f0\b0 , I've left animating to other than float values as an exercise for the reader.\
\
The 
\f3\b +animationTimersDictionary
\f0\b0  method illustrates the practice of deferring the creation of an object until it's actually needed.  When you enter this method, if the dictionary isn't there yet, it gets created.  I've gone ahead and used the 
\f3\b +dictionary 
\f0\b0 method of 
\f2\i NSMutableDictionary
\f0\i0  to get the instance, and 
\f3\b -retained 
\f0\b0 it, instead of the more common 
\f3\b [[..alloc] init]
\f0\b0  construct.  In this case, the result is identical.\
\
The declaration "
\f3\b static NSMutableDictionary *animationTimersDictionary
\f0\b0 " does not conflict with the method of the same name, since there's no chance of confusing a method name with a variable name in the Objective-C syntax.  Since Obj-C is a proper superset of C, the static declaration does just what you'd expect:
\f3\b  animationTimersDictionary
\f0\b0  is visible only in the file scope.  This is the most common way of implementing the moral equivalent of class variables in Objective-C.  (Actually, in this case it's a "category variable", but you get the idea.)\
\
The declaration of the string keys like 
\f3\b @"startDate"
\f0\b0  follow the Cocoa convention of uncoupling the keys of a dictionary from particular constant string instances.\
\
There are some places where it might look like I'm doing some odd things with dictionary keys.  This is made necessary by the fact that 
\f2\i dictionaries copy their keys
\f0\i0 . (The NSDictionary documentation states that any object that responds to 
\f3\b -hash
\f0\b0  can be a dictionary key, but when I used the sliders themselves as keys, weird things happened when they got copied.)\
\
NSTimer objects behave differently than other objects as far as retain/release is concerned.  It's generally not necessary to retain an NSTimer, since it will stick around for as long as it's active and then release itself when you send it an 
\f3\b -invalidate
\f0\b0  message.  (Since an NSTimer can't be restarted once it's been invalidated, there's rarely any point to keeping it around after that, so NSTimers thoughtfully clean up after themselves.)\
\
One more thing:\
\
In this example, I've hard-coded  the values for 
\f3\b sliderAnimationInterval
\f0\b0  and 
\f3\b sliderAnimationSeconds
\f0\b0 .  If you use this code in a production app, you'll probably want to obtain these values from user preferences. \
\
Happy Animating!\
\
}