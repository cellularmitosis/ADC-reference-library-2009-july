/*	File:		AEReceive.java		Description:	 * Sample showing how to send and receive AppleEvents using JDirect 3.	Author:		EPJ, LB, MH	Copyright: 	© Copyright 1999 - 2002 Apple Computer, Inc. All rights reserved.		Disclaimer:	IMPORTANT:  This Apple software is supplied to you by Apple Computer, Inc.				("Apple") in consideration of your agreement to the following terms, and your				use, installation, modification or redistribution of this Apple software				constitutes acceptance of these terms.  If you do not agree with these terms,				please do not use, install, modify or redistribute this Apple software.				In consideration of your agreement to abide by the following terms, and subject				to these terms, Apple grants you a personal, non-exclusive license, under Apple’s				copyrights in this original Apple software (the "Apple Software"), to use,				reproduce, modify and redistribute the Apple Software, with or without				modifications, in source and/or binary forms; provided that if you redistribute				the Apple Software in its entirety and without modifications, you must retain				this notice and the following text and disclaimers in all such redistributions of				the Apple Software.  Neither the name, trademarks, service marks or logos of				Apple Computer, Inc. may be used to endorse or promote products derived from the				Apple Software without specific prior written permission from Apple.  Except as				expressly stated in this notice, no other rights or licenses, express or implied,				are granted by Apple herein, including but not limited to any patent rights that				may be infringed by your derivative works or by other works in which the Apple				Software may be incorporated.				The Apple Software is provided by Apple on an "AS IS" basis.  APPLE MAKES NO				WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED				WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A PARTICULAR				PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND OPERATION ALONE OR IN				COMBINATION WITH YOUR PRODUCTS.				IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL OR				CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE				GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)				ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, MODIFICATION AND/OR DISTRIBUTION				OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY OF CONTRACT, TORT				(INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN				ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.					Change History (most recent first):	* version 1.0	* 4/15/1999 Shipped as 'AppleEvent Send and Receive' sample.	* version 2.0	* 4/2/2002  Updated for Mac OS X	* This class contains the code needed to register an AppleEvent handler	* to recive and reply to AppleEvents.	* The received AppleEvent's text data is fired as an java.awt.event.ActionEvent	* to all registered ActionListeners.*/package com.apple.dts.samplecode.aesendandreceive.aereceive;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.AWTEventMulticaster;import  com.apple.mrj.jdirect.PointerStruct;import com.apple.dts.samplecode.aesendandreceive.shared.*;public class AEReceive {	/**	 * The maximum length of the keyDirectObject parameter of the Apple Event	 */	protected static final int kMaxTextSize	= 255;	/**	 * The OSType (four character code) of the event class.	 * 'Test' in this case.	 */	protected static final int kTestClass	= 0x54657374; //'Test'	/**	 * The OSType (four character code) of the event ID.	 * 'TsID' in this case.	 */	protected static final int kTestID		= 0x54734944; //'TsID'	/**	 * The Universal Proceedure Pointer for the Apple Event handler.	 * We keep a reference to this object to prevent the garbage collector	 * from disposing it, to prevent potential Mixed Mode Manager execution failures.	 * see #AEInstallHandlers	 */	protected AEEventHandlerClosureUPP myAEHandlerUPP;	/**	 * The list of all registered ActionEvent listeners for this object.	 * see #addActionListener	 * see #removeActionListener	 * see #fireActionEvent	 */	protected ActionListener actionListener = null;	/**	 * Creates a new AERecive object and initializes defaults.	 */	public AEReceive()	{	}		/**	 * Installs our AppleEvent handler for our supported high-level event.	 * exception if any problem occured while registering the AppleEvent handler.	 */		public void installAEHandler() throws NativeException	{		short err;		//Create our Universal Proceedure Pointer to reference our callback method.		myAEHandlerUPP = new AEEventHandlerClosureUPP(new MyAEHandler());				//Install our Apple Event handler.		err = AppServicesFunctions.AEInstallEventHandler( kTestClass, kTestID, myAEHandlerUPP, 0, false );		ErrorHandler.checkError(err, "AEInstallHandlers: Error returned from AEGetParamPtr");	}	/**	 * A wrapper class to implement the AEEventHandlerInterface for our callback routine.	 */	public class MyAEHandler implements AEEventHandlerInterface	{		/**		 * The method <CODE>AEEventHandler</CODE> will be invoked via a <CODE>AEEventHandlerClosureUPP</CODE> thunk.<BR>		 * No conversion is done to wrap java objects around the raw native parameters.<BR> 		 * You may need to do the conversion yourself. 		 * 		 * param theAppleEvent	in C: <CODE>const AppleEvent *theAppleEvent</CODE>		 * param reply			in C: <CODE>AppleEvent *reply</CODE>		 * param handlerRefcon	in C: <CODE>UInt32 handlerRefcon</CODE>		 * return				in C: <CODE>OSErr </CODE>		 */		public short AEEventHandler(int theAppleEvent, int reply, int handlerRefcon)		{			int[]	actualType = new int[1];			int[]	actualSize = new int[1];			byte[]	theText = new byte[kMaxTextSize];			short	err;						try			{				//Here we are creating a anonymous class which implements the abstracted getSize menthod of the PointerStruct class,				//in order to create a PointerStruct to fill with the AppleEvent.				PointerStruct eventPtr = new PointerStruct(theAppleEvent)										{											public int getSize()											{												return AppleEventStruct.sizeOfAppleEvent;											}										};				//Create a new AppleEventStruct using the constructor to copy data received by our handler.				AppleEventStruct aeStruct = new AppleEventStruct(eventPtr, 0);								//We are using AEGetParamPointer to retrieve our data (text) from the Apple Event, which gets stored in 'theText'.				err = AppServicesFunctions.AEGetParamPtr(aeStruct, AppServicesFunctions.keyDirectObject, AppServicesFunctions.typeChar, actualType, theText, kMaxTextSize, actualSize);				ErrorHandler.checkError(err, "AEEventHandler: Error returned from AEGetParamPtr");				//Create a String from the byte array of returned data.				String text = new String(theText, 0, actualSize[0]);								//Fire an ActionEvent with the data so registered ActionListeners can see the AppleEvent being received.				fireActionEvent(text);								//Here we are creating another anonymous class which implements the abstracted getSize menthod of the PointerStruct class.				//In this case it is for the reply.				PointerStruct replyPtr = new PointerStruct(reply)										{											public int getSize()											{												return AppleEventStruct.sizeOfAppleEvent;											}										};				//Create a new AppleEventStruct using the constructor to copy the reply.				AppleEventStruct aeReplyStruct = new AppleEventStruct(replyPtr, 0);				//Make a reply				String replyText = "Thank you sir, may I have another?!";							//Turn the reply String into a byte array				byte[] theData = replyText.getBytes();								//Put the string into the direct object parameter				err = AppServicesFunctions.AEPutParamPtr(aeReplyStruct, AppServicesFunctions.keyDirectObject, AppServicesFunctions.typeChar, theData, theData.length);				ErrorHandler.checkError(err, "AEEventHandler: Error returned from AEPutParamPtr");			}			catch (NativeException exc)			{				System.err.println(exc.getMessage());				return (short)(exc.getErrNum());			}			return AppServicesFunctions.noErr;		}	}	    /**     * Adds the specified action listener to receive action events from this object.     * param l the action listener     */	public void addActionListener(ActionListener l)	{		actionListener = AWTEventMulticaster.add(actionListener, l);	}    /**     * Removes the specified action listener so it no longer receives     * action events from this object.     * param l the action listener     */	public void removeActionListener(ActionListener l)	{		actionListener = AWTEventMulticaster.remove(actionListener, l);	}    /**     * Fire an action event to the listeners.     * param the action command associated with the event.     * In this case it will be the text from the AppleEvent.     */	protected void fireActionEvent(String message)	{		if (actionListener != null)			actionListener.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, message));	}}