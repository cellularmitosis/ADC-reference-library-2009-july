{
    attributes = (
        {
            allowsNull = Y; 
            columnName = ADDRESS; 
            externalType = char; 
            name = address; 
            valueClassName = NSString; 
            width = 30; 
        }, 
        {
            allowsNull = Y; 
            columnName = CITY; 
            externalType = char; 
            name = city; 
            valueClassName = NSString; 
            width = 30; 
        }, 
        {
            allowsNull = Y; 
            columnName = CUSTOMER_ID; 
            externalType = char; 
            name = customerID; 
            valueClassName = NSString; 
            width = 30; 
        }, 
        {
            allowsNull = Y; 
            columnName = CUSTOMER_NAME; 
            externalType = char; 
            name = customerName; 
            valueClassName = NSString; 
            width = 50; 
        }, 
        {
            columnName = OID; 
            externalType = int; 
            name = oid; 
            valueClassName = NSNumber; 
            valueType = i; 
        }, 
        {
            allowsNull = Y; 
            columnName = STATE; 
            externalType = char; 
            name = state; 
            valueClassName = NSString; 
            width = 30; 
        }, 
        {
            allowsNull = Y; 
            columnName = ZIP4; 
            externalType = char; 
            name = zip4; 
            valueClassName = NSString; 
            width = 4; 
        }, 
        {
            allowsNull = Y; 
            columnName = ZIPCODE; 
            externalType = char; 
            name = zipcode; 
            valueClassName = NSString; 
            width = 5; 
        }
    ); 
    attributesUsedForLocking = (customerID, oid, address, city, state, zipcode, zip4, customerName); 
    className = Customer; 
    classProperties = (customerID, address, city, state, zipcode, zip4, toOrders, customerName); 
    externalName = CUSTOMER; 
    fetchSpecificationDictionary = {}; 
    name = Customer; 
    primaryKeyAttributes = (oid); 
    relationships = (
        {
            destination = Order; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = oidCustomer; sourceAttribute = oid; }); 
            name = toOrders; 
        }
    ); 
}
