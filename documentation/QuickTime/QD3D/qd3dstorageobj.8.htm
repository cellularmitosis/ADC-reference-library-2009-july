<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Managing Storage Objects</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=3246"> </A>Managing Storage Objects</H1><P CLASS="T1.Text1"><A NAME="pgfId=3251"> </A><A NAME="marker=3247"> </A>QuickDraw&nbsp;3D provides several general routines for getting the type and size of storage objects. It also provides routines you can use to get and set the private data of a storage object.</P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3252"> </A>Q3Storage_GetType</H2><P CLASS="T1.Text1"><A NAME="pgfId=3254"> </A><A NAME="marker=3253"> </A><A NAME="marker=639"> </A>You can use the <TT CLASS="cv">Q3Storage_GetType</TT> function to get the type of a storage object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=5294"> </A>TQ3ObjectType Q3Storage_GetType (TQ3StorageObject storage);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=5296"> </A><TT CLASS="cv">storage</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3256"> </A>A storage object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3257"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3258"> </A>The <TT CLASS="cv">Q3Storage_GetType</TT> function returns, as its function result, the type of the storage object specified by the <TT CLASS="cv">storage</TT> parameter. The types of storage objects currently supported by QuickDraw&nbsp;3D are defined by these constants:<A NAME="marker=3262"> </A></P><CODE CLASS="Cv.Code"><A NAME="pgfId=5311"> </A>kQ3StorageTypeMemory<BR>kQ3StorageTypeMacintosh<BR>kQ3StorageTypeUnix<BR>kQ3StorageTypeWin32<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=3264"> </A>If the specified storage object is invalid or is not one of these types, <TT CLASS="cv">Q3Storage_GetType</TT> returns the value <TT CLASS="cv">kQ3ObjectTypeInvalid</TT>.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3265"> </A>ERRORS</H3><P CLASS="T1.Text1"><A NAME="pgfId=3266"> </A><TT CLASS="cv">kQ3ErrorInvalidObjectParameter kQ3ErrorNULLParameter</TT></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3267"> </A>Q3Storage_GetSize</H2><P CLASS="T1.Text1"><A NAME="pgfId=3269"> </A><A NAME="marker=3268"> </A><A NAME="marker=656"> </A>You can use the <TT CLASS="cv">Q3Storage_GetSize</TT> function to get the size of the data stored in a storage object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=5320"> </A>TQ3Status Q3Storage_GetSize (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3StorageObject storage, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *size);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=5322"> </A><TT CLASS="cv">storage</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3271"> </A>A storage object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=5331"> </A><TT CLASS="cv">size</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3272"> </A>On entry, a pointer to a buffer. On exit, the number of bytes of data stored in the specified storage object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3273"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3274"> </A>The <TT CLASS="cv">Q3Storage_GetSize</TT> function returns, through the <TT CLASS="cv">size</TT> parameter, the number of bytes of data stored in the storage object specified by the <TT CLASS="cv">storage</TT> parameter. That storage object must already be open when you call <TT CLASS="cv">Q3Storage_GetSize</TT>.</P></DIV><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3275"> </A>ERRORS</H3><P CLASS="T1.Text1"><A NAME="pgfId=3276"> </A><TT CLASS="cv">kQ3ErrorInvalidObjectParameter kQ3ErrorNULLParameter kQ3ErrorStorageNotOpen</TT></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3277"> </A>Q3Storage_GetData</H2><P CLASS="T1.Text1"><A NAME="pgfId=3279"> </A><A NAME="marker=3278"> </A><A NAME="marker=668"> </A>You can use the <TT CLASS="cv">Q3Storage_GetData</TT> function to get the data stored in a storage object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=5348"> </A>TQ3Status Q3Storage_GetData (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3StorageObject storage, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long offset, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long dataSize, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned char *data, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *sizeRead);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=5350"> </A><TT CLASS="cv">storage</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3281"> </A>A storage object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=5359"> </A><TT CLASS="cv">offset</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3282"> </A>An offset into the private data associated with the specified storage object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=5368"> </A><TT CLASS="cv">dataSize</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3283"> </A>The number of bytes of data from the specified storage object to be returned in the specified buffer.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=5377"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3284"> </A>On entry, a pointer to a buffer that is at least large enough to contain the number of bytes of data specified by the <TT CLASS="cv">dataSize</TT> parameter. On exit, this buffer is filled with data from the specified storage object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=5390"> </A><TT CLASS="cv">sizeRead</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3285"> </A>On exit, the number of bytes of data read from the specified storage object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3286"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3287"> </A>The <TT CLASS="cv">Q3Storage_GetData</TT> function returns, through the <TT CLASS="cv">data</TT> parameter, some or all of the private data associated with the storage object specified by the <TT CLASS="cv">storage</TT> parameter. The data to be returned begins at an offset specified by the <TT CLASS="cv">offset</TT> parameter and extends for <TT CLASS="cv">dataSize</TT> bytes from that location. On exit, the <TT CLASS="cv">sizeRead</TT> parameter contains the number of bytes actually retrieved from the storage object's private data into the <TT CLASS="cv">data</TT> buffer. If the value returned in the <TT CLASS="cv">sizeRead</TT> parameter is less than the number of bytes requested in the <TT CLASS="cv">dataSize</TT> parameter, then the end of the storage object's private data occurs at the distance <TT CLASS="cv">offset</TT> + <TT CLASS="cv">sizeRead</TT> from the beginning of the private data.</P><P CLASS="T1.Text1"><A NAME="pgfId=3288"> </A>If the specified storage object is associated with a file object, that file object must be closed before you call <TT CLASS="cv">Q3Storage_GetData</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=1386"> </A>Q3Storage_SetData</H2><P CLASS="T1.Text1"><A NAME="pgfId=1389"> </A><A NAME="marker=1387"> </A><A NAME="marker=1388"> </A>You can use the <TT CLASS="cv">Q3Storage_SetData</TT> function to set the data stored in a storage object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=5401"> </A>TQ3Status Q3Storage_SetData (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3StorageObject storage, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long offset, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long dataSize, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const unsigned char *data, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *sizeWritten);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=5403"> </A><TT CLASS="cv">storage</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=1391"> </A>A storage object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=5412"> </A><TT CLASS="cv">offset</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=1392"> </A>An offset into the specified storage object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=5421"> </A><TT CLASS="cv">dataSize</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=1393"> </A>The number of bytes of data from the specified buffer to be written to the specified storage object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=5430"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=1394"> </A>On entry, a pointer to a buffer that contains the data you want to be written to the specified storage object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=5439"> </A><TT CLASS="cv">sizeWritten</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=1395"> </A>On exit, the number of bytes of data written to the specified storage object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=1396"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=1397"> </A>The <TT CLASS="cv">Q3Storage_SetData</TT> function sets the data associated with the storage object specified by the <TT CLASS="cv">storage</TT> parameter to the data specified by the <TT CLASS="cv">dataSize</TT> and <TT CLASS="cv">data</TT> parameters. The data is written to the storage object starting at the byte offset specified by the <TT CLASS="cv">offset</TT> parameter. <TT CLASS="cv">Q3Storage_SetData</TT> returns, in the <TT CLASS="cv">sizeWritten</TT> parameter, the number of bytes of data written to the storage object. If the value returned in the <TT CLASS="cv">sizeWritten</TT> parameter is less than the number of bytes requested in the <TT CLASS="cv">dataSize</TT> parameter, then the end of the storage object's private data occurs at the distance <TT CLASS="cv">offset</TT> + <TT CLASS="cv">sizeWritten</TT> from the beginning of the private data.<TT CLASS="cv"></TT><A NAME="marker=1399"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>