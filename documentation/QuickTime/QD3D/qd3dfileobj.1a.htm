<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Reading and Writing File Data</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=3515"> </A><A NAME="28623"> </A>Reading and Writing File Data</H1><P CLASS="T1.Text1"><A NAME="pgfId=3520"> </A><A NAME="marker=3516"> </A>QuickDraw&nbsp;3D provides routines that you can use to access custom data in a file object. In all cases, the reading or writing occurs at the current file position, and the file position is advanced if the read or write operation completes successfully.</P><P CLASS="I.Important"><A NAME="pgfId=3943"> </A>You should call the <TT CLASS="cv">_Read</TT> functions only in a custom read data method (of type <TT CLASS="cv">kQ3MethodTypeObjectReadData</TT>), and you should call the <TT CLASS="cv">_Write</TT> functions only in a custom write method (of type <TT CLASS="cv">kQ3MethodTypeObjectWrite</TT>). </P><P CLASS="T1.Text1"><A NAME="pgfId=3968"> </A>These functions can read and write data in either text or binary files.</P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3521"> </A>Q3Uns8_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=3523"> </A><A NAME="marker=3522"> </A><A NAME="marker=1249"> </A>You can use the <TT CLASS="cv">Q3Uns8_Read</TT> function to read an unsigned 8-byte value from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12263"> </A>TQ3Status Q3Uns8_Read (TQ3Uns8 *data, TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12265"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3525"> </A>On entry, a pointer to a block of memory large enough to hold an unsigned 8-byte value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12274"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3526"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3527"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3528"> </A>The <TT CLASS="cv">Q3Uns8_Read</TT> function returns, in the block of memory pointed to by the <TT CLASS="cv">data</TT> parameter, the unsigned 8-byte value read from the current position in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3529"> </A>Q3Uns8_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=3530"> </A><A NAME="marker=1258"> </A>You can use the <TT CLASS="cv">Q3Uns8_Write</TT> function to write an unsigned 8-byte value to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12285"> </A>TQ3Status Q3Uns8_Write (const TQ3Uns8 data, TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12287"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3532"> </A>A pointer to an unsigned 8-byte value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12296"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3533"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3534"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3535"> </A>The <TT CLASS="cv">Q3Uns8_Write</TT> function writes the unsigned 8-byte value pointed to by the <TT CLASS="cv">data</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=8293"> </A>Q3Int8_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=8296"> </A><A NAME="marker=8295"> </A>You can use the <TT CLASS="cv">Q3Int8_Read</TT> function to read an 8-byte integer value from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12307"> </A>TQ3Status Q3Int8_Read (TQ3Int8 *data, TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12309"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=8298"> </A>On entry, a pointer to a block of memory large enough to hold an 8-byte integer value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12318"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=8299"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=8300"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=8301"> </A>The <TT CLASS="cv">Q3Int8_Read</TT> function returns, in the block of memory pointed to by the <TT CLASS="cv">data</TT> parameter, the signed 8-byte integer value read from the current position in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=8302"> </A>Q3Int8_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=8304"> </A><A NAME="marker=8303"> </A>You can use the <TT CLASS="cv">Q3Int8_Write</TT> function to write an 8-byte integer value to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12329"> </A>TQ3Status Q3Int8_Write (const TQ3Int8 data, TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12331"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=8306"> </A>A pointer to an 8-byte integer value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12340"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=8307"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=8308"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=8309"> </A>The <TT CLASS="cv">Q3Int8_Write</TT> function writes the signed 8-byte integer value pointed to by the <TT CLASS="cv">data</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3536"> </A>Q3Uns16_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=3537"> </A><A NAME="marker=1267"> </A>You can use the <TT CLASS="cv">Q3Uns16_Read</TT> function to read an unsigned 16-byte value from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12351"> </A>TQ3Status Q3Uns16_Read (TQ3Uns16 *data, TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12353"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3539"> </A>On entry, a pointer to a block of memory large enough to hold an unsigned 16-byte value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12362"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3540"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3541"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3542"> </A>The <TT CLASS="cv">Q3Uns16_Read</TT> function returns, in the block of memory pointed to by the <TT CLASS="cv">data</TT> parameter, the unsigned 16-byte value read from the current position in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3543"> </A>Q3Uns16_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=3544"> </A><A NAME="marker=1276"> </A>You can use the <TT CLASS="cv">Q3Uns16_Write</TT> function to write an unsigned 16-byte value to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12373"> </A>TQ3Status Q3Uns16_Write (const TQ3Uns16 data, TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12375"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3546"> </A>A pointer to an unsigned 16-byte value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12384"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3547"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3548"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3549"> </A>The <TT CLASS="cv">Q3Uns16_Write</TT> function writes the unsigned 16-byte value pointed to by the <TT CLASS="cv">data</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=8331"> </A>Q3Int16_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=8333"> </A><A NAME="marker=8332"> </A>You can use the <TT CLASS="cv">Q3Int16_Read</TT> function to read a 16-byte integer value from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12395"> </A>TQ3Status Q3Int16_Read (TQ3Int16 *data, TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12397"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=8335"> </A>On entry, a pointer to a block of memory large enough to hold a 16-byte integer value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12406"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=8336"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=8337"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=8338"> </A>The <TT CLASS="cv">Q3Int16_Read</TT> function returns, in the block of memory pointed to by the <TT CLASS="cv">data</TT> parameter, the signed 16-byte integer value read from the current position in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=8339"> </A>Q3Int16_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=8341"> </A><A NAME="marker=8340"> </A>You can use the <TT CLASS="cv">Q3Int16_Write</TT> function to write a 16-byte integer value to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12417"> </A>TQ3Status Q3Int16_Write (const TQ3Int16 data, TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12419"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=8343"> </A>A pointer to a 16-byte integer value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12428"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=8344"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=8345"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=8346"> </A>The <TT CLASS="cv">Q3Int16_Write</TT> function writes the signed 16-byte integer value pointed to by the <TT CLASS="cv">data</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3550"> </A>Q3Uns32_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=3551"> </A><A NAME="marker=1285"> </A>You can use the <TT CLASS="cv">Q3Uns32_Read</TT> function to read an unsigned 32-byte value from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12439"> </A>TQ3Status Q3Uns32_Read (TQ3Uns32 *data, TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12441"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3553"> </A>On entry, a pointer to a block of memory large enough to hold an unsigned 32-byte value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12450"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3554"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3555"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3556"> </A>The <TT CLASS="cv">Q3Uns32_Read</TT> function returns, in the block of memory pointed to by the <TT CLASS="cv">data</TT> parameter, the unsigned 32-byte value read from the current position in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3557"> </A>Q3Uns32_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=3558"> </A><A NAME="marker=1294"> </A>You can use the <TT CLASS="cv">Q3Uns32_Write</TT> function to write an unsigned 32-byte value to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12461"> </A>TQ3Status Q3Uns32_Write (const TQ3Uns32 data, TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12463"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3560"> </A>A pointer to an unsigned 32-byte value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12472"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3561"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3562"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3563"> </A>The <TT CLASS="cv">Q3Uns32_Write</TT> function writes the unsigned 32-byte value pointed to by the <TT CLASS="cv">data</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3564"> </A>Q3Int32_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=3565"> </A><A NAME="marker=1303"> </A>You can use the <TT CLASS="cv">Q3Int32_Read</TT> function to read a signed 32-byte value from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12483"> </A>TQ3Status Q3Int32_Read (TQ3Int32 *data, TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12485"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3567"> </A>On entry, a pointer to a block of memory large enough to hold a signed 32-byte value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12494"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3568"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3569"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3570"> </A>The <TT CLASS="cv">Q3Int32_Read</TT> function returns, in the block of memory pointed to by the <TT CLASS="cv">data</TT> parameter, the signed 32-byte value read from the current position in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3571"> </A>Q3Int32_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=3572"> </A><A NAME="marker=1312"> </A>You can use the <TT CLASS="cv">Q3Int32_Write</TT> function to write a signed 32-byte value to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12505"> </A>TQ3Status Q3Int32_Write (const TQ3Int32 data, TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12507"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3574"> </A>A pointer to a signed 32-byte value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12516"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3575"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3576"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3577"> </A>The <TT CLASS="cv">Q3Int32_Write</TT> function writes the signed 32-byte value pointed to by the <TT CLASS="cv">data</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3578"> </A>Q3Uns64_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=3579"> </A><A NAME="marker=1321"> </A>You can use the <TT CLASS="cv">Q3Uns64_Read</TT> function to read an unsigned 64-byte value from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12531"> </A>TQ3Status Q3Uns64_Read (TQ3Uns64 *data, TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12533"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3581"> </A>On entry, a pointer to a block of memory large enough to hold an unsigned 64-byte value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12542"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3582"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3583"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3584"> </A>The <TT CLASS="cv">Q3Uns64_Read</TT> function returns, in the block of memory pointed to by the <TT CLASS="cv">data</TT> parameter, the unsigned 64-byte value read from the current position in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3585"> </A>Q3Uns64_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=3586"> </A><A NAME="marker=1330"> </A>You can use the <TT CLASS="cv">Q3Uns64_Write</TT> function to write an unsigned 64-byte value to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12553"> </A>TQ3Status Q3Uns64_Write (const TQ3Uns64 data, TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12555"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3588"> </A>A pointer to an unsigned 64-byte value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12564"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3589"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3590"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3591"> </A>The <TT CLASS="cv">Q3Uns64_Write</TT> function writes the unsigned 64-byte value pointed to by the <TT CLASS="cv">data</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=8369"> </A>Q3Int64_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=8371"> </A><A NAME="marker=8370"> </A>You can use the <TT CLASS="cv">Q3Int64_Read</TT> function to read a signed 64-byte value from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12575"> </A>TQ3Status Q3Int64_Read (TQ3Int64 *data, TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12577"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=8373"> </A>On entry, a pointer to a block of memory large enough to hold a signed 64-byte value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12586"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=8374"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=8375"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=8376"> </A>The <TT CLASS="cv">Q3Int64_Read</TT> function returns, in the block of memory pointed to by the <TT CLASS="cv">data</TT> parameter, the signed 64-byte value read from the current position in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=8377"> </A>Q3Int64_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=8379"> </A><A NAME="marker=8378"> </A>You can use the <TT CLASS="cv">Q3Int64_Write</TT> function to write a signed 64-byte value to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12597"> </A>TQ3Status Q3Int64_Write (const TQ3Int64 data, TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12599"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=8381"> </A>A pointer to a signed 64-byte value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12608"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=8382"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=8383"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=8367"> </A>The <TT CLASS="cv">Q3Int64_Write</TT> function writes the signed 64-byte value pointed to by the <TT CLASS="cv">data</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter.<A NAME="marker=3592"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3593"> </A>Q3Float32_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=3595"> </A><A NAME="marker=3594"> </A><A NAME="marker=1341"> </A>You can use the <TT CLASS="cv">Q3Float32_Read</TT> function to read a floating-point 32-byte value from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12619"> </A>TQ3Status Q3Float32_Read (TQ3Float32 *data, TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12621"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3597"> </A>On entry, a pointer to a block of memory large enough to hold a floating-point 32-byte value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12630"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3598"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3599"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3600"> </A>The <TT CLASS="cv">Q3Float32_Read</TT> function returns, in the block of memory pointed to by the <TT CLASS="cv">data</TT> parameter, the floating-point 32-byte value read from the current position in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3601"> </A>Q3Float32_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=3602"> </A><A NAME="marker=1350"> </A>You can use the <TT CLASS="cv">Q3Float32_Write</TT> function to write a floating-point 32-byte value to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12641"> </A>TQ3Status Q3Float32_Write (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Float32 data, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12643"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3604"> </A>A pointer to a floating-point 32-byte value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12652"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3605"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3606"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3607"> </A>The <TT CLASS="cv">Q3Float32_Write</TT> function writes the floating-point 32-byte value pointed to by the <TT CLASS="cv">data</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3608"> </A>Q3Float64_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=3609"> </A><A NAME="marker=1359"> </A>You can use the <TT CLASS="cv">Q3Float64_Read</TT> function to read a floating-point 64-byte value from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12663"> </A>TQ3Status Q3Float64_Read (TQ3Float64 *data, TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12665"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3611"> </A>On entry, a pointer to a block of memory large enough to hold a floating-point 64-byte value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12674"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3612"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3613"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3614"> </A>The <TT CLASS="cv">Q3Float64_Read</TT> function returns, in the block of memory pointed to by the <TT CLASS="cv">data</TT> parameter, the floating-point 64-byte value read from the current position in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3615"> </A>Q3Float64_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=3616"> </A><A NAME="marker=1368"> </A>You can use the <TT CLASS="cv">Q3Float64_Write</TT> function to write a floating-point 64-byte value to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12685"> </A>TQ3Status Q3Float64_Write (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Float64 data, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12687"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3618"> </A>A pointer to a floating-point 64-byte value.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12696"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3619"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3620"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3621"> </A>The <TT CLASS="cv">Q3Float64_Write</TT> function writes the floating-point 64-byte value pointed to by the <TT CLASS="cv">data</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter.<A NAME="marker=3622"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=2715"> </A>Q3Size_Pad</H2><P CLASS="T1.Text1"><A NAME="pgfId=2718"> </A><A NAME="marker=2717"> </A>You can use the <TT CLASS="cv">Q3Size_Pad</TT> function to determine the number of bytes occupied by a longword-aligned block.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12707"> </A>TQ3Size Q3Size_Pad (TQ3Size size);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12709"> </A><TT CLASS="cv">size</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=2731"> </A>The size, in bytes, of an object or structure.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=2737"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=2735"> </A>The <TT CLASS="cv">Q3Size_Pad</TT> function returns, as its function result, the number of bytes it would take to contain a longword-aligned block whose size, before alignment, is specified by the <TT CLASS="cv">size</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=2708"> </A>Q3String_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=2711"> </A><A NAME="marker=2710"> </A>You can use the <TT CLASS="cv">Q3String_Read</TT> function to read a string from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12720"> </A>TQ3Status Q3String_Read (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *data, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long *length, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12722"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=2832"> </A>On entry, a pointer to a buffer whose length is of size <TT CLASS="cv">kQ3StringMaximumLength</TT>, or <TT CLASS="cv">NULL</TT>. On exit, a pointer to the string read from the specified file object. If this parameter is set to <TT CLASS="cv">NULL</TT> on entry, no string is read, but its length is returned in the <TT CLASS="cv">length</TT> parameter.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12731"> </A><TT CLASS="cv">length</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=2836"> </A>On exit, the number of characters actually copied into the specified buffer. If <TT CLASS="cv">data</TT> is set to <TT CLASS="cv">NULL</TT> on entry, this parameter returns the length of the string.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12740"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=2840"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=2809"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=2810"> </A>The <TT CLASS="cv">Q3String_Read</TT> function returns, in the <TT CLASS="cv">data</TT> parameter, a pointer to the next string in the file object specified by the <TT CLASS="cv">file</TT> parameter. The string data is 7-bit ASCII, with standard escape sequences for any special characters in the string. The <TT CLASS="cv">Q3String_Read</TT> function also returns, in the <TT CLASS="cv">length</TT> parameter, the length of the string.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=2701"> </A>Q3String_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=2704"> </A><A NAME="marker=2703"> </A>You can use the <TT CLASS="cv">Q3String_Write</TT> function to write a string to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12751"> </A>TQ3Status Q3String_Write (const char *data, TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12753"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=2844"> </A>A pointer to a string.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12762"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=2848"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=2814"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=2815"> </A>The <TT CLASS="cv">Q3String_Write</TT> function writes the string data pointed to by the <TT CLASS="cv">data</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter. The number of bytes written to the file object is equal to <TT CLASS="cv">Q3Size_Pad(strlen(data)+1)</TT>.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=6928"> </A>Q3NewLine_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=6951"> </A><A NAME="marker=6950"> </A>You can use the <TT CLASS="cv">Q3NewLine_Write</TT> function to write a newline character to a text metafile.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12773"> </A>TQ3Status Q3NewLine_Write (TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12775"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=6933"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=6934"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=6935"> </A>The <TT CLASS="cv">Q3NewLine_Write</TT> function writes a newline character to the text file object specified by the <TT CLASS="cv">file</TT> parameter. It writes nothing if the file is binary.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=2694"> </A>Q3RawData_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=2697"> </A><A NAME="marker=2696"> </A>You can use the <TT CLASS="cv">Q3RawData_Read</TT> function to read raw data from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12786"> </A>TQ3Status Q3RawData_Read (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned char *data, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long size, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12788"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4113"> </A>On entry, a pointer to a buffer whose length is of the specified size. On exit, a pointer to the raw data read from the specified file object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12797"> </A><TT CLASS="cv">size</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4114"> </A>On entry, the number of bytes of raw data to be read from the specified file object into the specified buffer. On exit, the number of bytes actually copied into the specified buffer.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12806"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4115"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=2819"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=4135"> </A>The <TT CLASS="cv">Q3RawData_Read</TT> function returns, in the <TT CLASS="cv">data</TT> parameter, a pointer to the next <TT CLASS="cv">size</TT> bytes of raw data in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=2687"> </A>Q3RawData_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=2690"> </A><A NAME="marker=2689"> </A>You can use the <TT CLASS="cv">Q3RawData_Write</TT> function to write raw data to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12817"> </A>TQ3Status Q3RawData_Write (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const unsigned char *data, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long size, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12819"> </A><TT CLASS="cv">data</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4150"> </A>On entry, a pointer to a buffer of raw data whose length is of the specified size.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12828"> </A><TT CLASS="cv">size</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4151"> </A>On entry, the number of bytes of raw data to be read from the specified buffer and written to the specified file object. On exit, the number of bytes actually written to the file object.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12837"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=4152"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=2824"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=2825"> </A>The <TT CLASS="cv">Q3RawData_Write</TT> function writes the raw data pointed to by the <TT CLASS="cv">data</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter. The number of bytes written to the file object is equal to <TT CLASS="cv">Q3Size_Pad(size)</TT>. If the number of bytes written to the file object is greater than <TT CLASS="cv">size</TT>, <TT CLASS="cv">Q3RawData_Write</TT> pads the data to the nearest 4-byte boundary with 0's.</P><P CLASS="T1.Text1"><A NAME="pgfId=4206"> </A>In text files, raw data is output in hexadecimal form.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3623"> </A>Q3Point2D_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=3625"> </A><A NAME="marker=3624"> </A><A NAME="marker=1379"> </A>You can use the <TT CLASS="cv">Q3Point2D_Read</TT> function to read a two-dimensional point from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12848"> </A>TQ3Status Q3Point2D_Read (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Point2D *point2D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12850"> </A><TT CLASS="cv">point2D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3627"> </A>On entry, a pointer to a block of memory large enough to hold a two-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12859"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3628"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3629"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3630"> </A>The <TT CLASS="cv">Q3Point2D_Read</TT> function returns, in the block of memory pointed to by the <TT CLASS="cv">point2D</TT> parameter, the two-dimensional point read from the current position in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3631"> </A>Q3Point2D_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=3632"> </A><A NAME="marker=1388"> </A>You can use the <TT CLASS="cv">Q3Point2D_Write</TT> function to write a two-dimensional point to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12870"> </A>TQ3Status Q3Point2D_Write (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point2D *point2D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12872"> </A><TT CLASS="cv">point2D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3634"> </A>A pointer to a two-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12881"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3635"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3636"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3637"> </A>The <TT CLASS="cv">Q3Point2D_Write</TT> function writes the two-dimensional point pointed to by the <TT CLASS="cv">point2D</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3638"> </A>Q3Point3D_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=3639"> </A><A NAME="marker=1397"> </A>You can use the <TT CLASS="cv">Q3Point3D_Read</TT> function to read a three-dimensional point from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12892"> </A>TQ3Status Q3Point3D_Read (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Point3D *point3D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12894"> </A><TT CLASS="cv">point3D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3641"> </A>On entry, a pointer to a block of memory large enough to hold a three-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12903"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3642"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3643"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3644"> </A>The <TT CLASS="cv">Q3Point3D_Read</TT> function returns, in the block of memory pointed to by the <TT CLASS="cv">point3D</TT> parameter, the three-dimensional point read from the current position in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3645"> </A>Q3Point3D_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=3646"> </A><A NAME="marker=1406"> </A>You can use the <TT CLASS="cv">Q3Point3D_Write</TT> function to write a three-dimensional point to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12918"> </A>TQ3Status Q3Point3D_Write (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point3D *point3D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12920"> </A><TT CLASS="cv">point3D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3648"> </A>A pointer to a three-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12929"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3649"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3650"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3651"> </A>The <TT CLASS="cv">Q3Point3D_Write</TT> function writes the three-dimensional point pointed to by the <TT CLASS="cv">point3D</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter.<A NAME="marker=3652"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3653"> </A>Q3RationalPoint3D_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=3655"> </A><A NAME="marker=3654"> </A><A NAME="marker=1417"> </A>You can use the <TT CLASS="cv">Q3RationalPoint3D_Read</TT> function to read a rational three-dimensional point from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12940"> </A>TQ3Status Q3RationalPoint3D_Read (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3RationalPoint3D *point3D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12942"> </A><TT CLASS="cv">point3D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3657"> </A>On entry, a pointer to a block of memory large enough to hold a rational three-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12951"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3658"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3659"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3660"> </A>The <TT CLASS="cv">Q3RationalPoint3D_Read</TT> function returns, in the block of memory pointed to by the <TT CLASS="cv">point3D</TT> parameter, the rational three-dimensional point read from the current position in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3661"> </A>Q3RationalPoint3D_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=3662"> </A><A NAME="marker=1426"> </A>You can use the <TT CLASS="cv">Q3RationalPoint3D_Write</TT> function to write a rational three-dimensional point to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12962"> </A>TQ3Status Q3RationalPoint3D_Write (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3RationalPoint3D *point3D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12964"> </A><TT CLASS="cv">point3D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3664"> </A>A pointer to a rational three-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12973"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3665"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3666"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3667"> </A>The <TT CLASS="cv">Q3RationalPoint3D_Write</TT> function writes the rational three-dimensional point pointed to by the <TT CLASS="cv">point3D</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3668"> </A>Q3RationalPoint4D_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=3669"> </A><A NAME="marker=1435"> </A>You can use the <TT CLASS="cv">Q3RationalPoint4D_Read</TT> function to read a rational four-dimensional point from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=12984"> </A>TQ3Status Q3RationalPoint4D_Read (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3RationalPoint4D *point4D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12986"> </A><TT CLASS="cv">point4D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3671"> </A>On entry, a pointer to a block of memory large enough to hold a rational four-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=12995"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3672"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3673"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3674"> </A>The <TT CLASS="cv">Q3RationalPoint4D_Read</TT> function returns, in the block of memory pointed to by the <TT CLASS="cv">point4D</TT> parameter, the rational four-dimensional point read from the current position in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3675"> </A>Q3RationalPoint4D_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=3676"> </A><A NAME="marker=1444"> </A>You can use the <TT CLASS="cv">Q3RationalPoint4D_Write</TT> function to write a rational four-dimensional point to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13006"> </A>TQ3Status Q3RationalPoint4D_Write (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3RationalPoint4D *point4D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13008"> </A><TT CLASS="cv">point4D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3678"> </A>A pointer to a rational four-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13017"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3679"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3680"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3681"> </A>The <TT CLASS="cv">Q3RationalPoint4D_Write</TT> function writes the rational four-dimensional point pointed to by the <TT CLASS="cv">point4D</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter.<A NAME="marker=3682"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3683"> </A>Q3Vector2D_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=3685"> </A><A NAME="marker=3684"> </A><A NAME="marker=1455"> </A>You can use the <TT CLASS="cv">Q3Vector2D_Read</TT> function to read a two-dimensional vector from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13028"> </A>TQ3Status Q3Vector2D_Read (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Vector2D *vector2D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13030"> </A><TT CLASS="cv">vector2D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3687"> </A>On entry, a pointer to a block of memory large enough to hold a two-dimensional vector.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13039"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3688"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3689"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3690"> </A>The <TT CLASS="cv">Q3Vector2D_Read</TT> function returns, in the block of memory pointed to by the <TT CLASS="cv">vector2D</TT> parameter, the two-dimensional vector read from the current position in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3691"> </A>Q3Vector2D_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=3692"> </A><A NAME="marker=1464"> </A>You can use the <TT CLASS="cv">Q3Vector2D_Write</TT> function to write a two-dimensional vector to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13050"> </A>TQ3Status Q3Vector2D_Write (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Vector2D *vector2D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13052"> </A><TT CLASS="cv">vector2D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3694"> </A>A pointer to a two-dimensional vector.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13061"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3695"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3696"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3697"> </A>The <TT CLASS="cv">Q3Vector2D_Write</TT> function writes the two-dimensional vector pointed to by the <TT CLASS="cv">vector2D</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3698"> </A>Q3Vector3D_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=3699"> </A><A NAME="marker=1473"> </A>You can use the <TT CLASS="cv">Q3Vector3D_Read</TT> function to read a three-dimensional vector from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13072"> </A>TQ3Status Q3Vector3D_Read (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Vector3D *vector3D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13074"> </A><TT CLASS="cv">vector3D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3701"> </A>On entry, a pointer to a block of memory large enough to hold a three-dimensional vector.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13083"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3702"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3703"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3704"> </A>The <TT CLASS="cv">Q3Vector3D_Read</TT> function returns, in the block of memory pointed to by the <TT CLASS="cv">vector3D</TT> parameter, the three-dimensional vector read from the current position in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3705"> </A>Q3Vector3D_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=3706"> </A><A NAME="marker=1482"> </A>You can use the <TT CLASS="cv">Q3Vector3D_Write</TT> function to write a three-dimensional vector to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13094"> </A>TQ3Status Q3Vector3D_Write (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Vector3D *vector3D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13096"> </A><TT CLASS="cv">vector3D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3708"> </A>A pointer to a three-dimensional vector.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13105"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3709"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3710"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3711"> </A>The <TT CLASS="cv">Q3Vector3D_Write</TT> function writes the three-dimensional vector pointed to by the <TT CLASS="cv">vector3D</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter.<A NAME="marker=3712"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3713"> </A>Q3Matrix4x4_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=3715"> </A><A NAME="marker=3714"> </A><A NAME="marker=1493"> </A>You can use the <TT CLASS="cv">Q3Matrix4x4_Read</TT> function to read a 4-by-4 matrix from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13116"> </A>TQ3Status Q3Matrix4x4_Read (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Matrix4x4 *matrix4x4, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13118"> </A><TT CLASS="cv">matrix4x4</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3717"> </A>On entry, a pointer to a block of memory large enough to hold a 4-by-4 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13127"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3718"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3719"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3720"> </A>The <TT CLASS="cv">Q3Matrix4x4_Read</TT> function returns, in the block of memory pointed to by the <TT CLASS="cv">matrix4x4</TT> parameter, the 4-by-4 matrix read from the current position in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3721"> </A>Q3Matrix4x4_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=3722"> </A><A NAME="marker=1502"> </A>You can use the <TT CLASS="cv">Q3Matrix4x4_Write</TT> function to write a 4-by-4 matrix to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13138"> </A>TQ3Status Q3Matrix4x4_Write (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix4x4 *matrix4x4, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13140"> </A><TT CLASS="cv">matrix4x4</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3724"> </A>A pointer to a 4-by-4 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13149"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3725"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3726"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3727"> </A>The <TT CLASS="cv">Q3Matrix4x4_Write</TT> function writes the 4-by-4 matrix pointed to by the <TT CLASS="cv">matrix4x4</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter.<A NAME="marker=3728"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3729"> </A>Q3Tangent2D_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=3731"> </A><A NAME="marker=3730"> </A><A NAME="marker=1513"> </A>You can use the <TT CLASS="cv">Q3Tangent2D_Read</TT> function to read a two-dimensional tangent from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13160"> </A>TQ3Status Q3Tangent2D_Read (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Tangent2D *tangent2D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13162"> </A><TT CLASS="cv">tangent2D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3733"> </A>On entry, a pointer to a block of memory large enough to hold a two-dimensional tangent.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13171"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3734"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3735"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3736"> </A>The <TT CLASS="cv">Q3Tangent2D_Read</TT> function returns, in the block of memory pointed to by the <TT CLASS="cv">tangent2D</TT> parameter, the two-dimensional tangent read from the current position in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3737"> </A>Q3Tangent2D_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=3738"> </A><A NAME="marker=1522"> </A>You can use the <TT CLASS="cv">Q3Tangent2D_Write</TT> function to write a two-dimensional tangent to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13186"> </A>TQ3Status Q3Tangent2D_Write (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Tangent2D *tangent2D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13188"> </A><TT CLASS="cv">tangent2D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3740"> </A>A pointer to a two-dimensional tangent.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13197"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3741"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3742"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3743"> </A>The <TT CLASS="cv">Q3Tangent2D_Write</TT> function writes the two-dimensional tangent pointed to by the <TT CLASS="cv">tangent2D</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3744"> </A>Q3Tangent3D_Read</H2><P CLASS="T1.Text1"><A NAME="pgfId=3745"> </A><A NAME="marker=1531"> </A>You can use the <TT CLASS="cv">Q3Tangent3D_Read</TT> function to read a three-dimensional tangent from a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13208"> </A>TQ3Status Q3Tangent3D_Read (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Tangent3D *tangent3D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13210"> </A><TT CLASS="cv">tangent3D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3747"> </A>On entry, a pointer to a block of memory large enough to hold a three-dimensional tangent.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13219"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3748"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3749"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3750"> </A>The <TT CLASS="cv">Q3Tangent3D_Read</TT> function returns, in the block of memory pointed to by the <TT CLASS="cv">tangent3D</TT> parameter, the three-dimensional tangent read from the current position in the file object specified by the <TT CLASS="cv">file</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3751"> </A>Q3Tangent3D_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=3752"> </A><A NAME="marker=1540"> </A>You can use the <TT CLASS="cv">Q3Tangent3D_Write</TT> function to write a three-dimensional tangent to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13230"> </A>TQ3Status Q3Tangent3D_Write (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Tangent3D *tangent3D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13232"> </A><TT CLASS="cv">tangent3D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3754"> </A>A pointer to a three-dimensional tangent.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13241"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3755"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3756"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3757"> </A>The <TT CLASS="cv">Q3Tangent3D_Write</TT> function writes the three-dimensional tangent pointed to by the <TT CLASS="cv">tangent3D</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter.<A NAME="marker=3758"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3759"> </A>Q3Comment_Write</H2><P CLASS="T1.Text1"><A NAME="pgfId=3761"> </A><A NAME="marker=3760"> </A><A NAME="marker=1551"> </A>You can use the <TT CLASS="cv">Q3Comment_Write</TT> function to write a comment to a file object.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=13252"> </A>TQ3Status Q3Comment_Write (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *comment, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3FileObject file);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13254"> </A><TT CLASS="cv">comment</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3763"> </A>A pointer to a null-terminated C string.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=13263"> </A><TT CLASS="cv">file</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3764"> </A>A file object.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3765"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3766"> </A>The <TT CLASS="cv">Q3Comment_Write</TT> function writes the string of characters pointed to by the <TT CLASS="cv">comment</TT> parameter to the file object specified by the <TT CLASS="cv">file</TT> parameter. QuickDraw&nbsp;3D currently supports writing comments to text files only; if you call <TT CLASS="cv">Q3Comment_Write</TT> to write a comment to a binary file, QuickDraw&nbsp;3D ignores the call. In addition, you cannot currently use QuickDraw&nbsp;3D to read comments from a file.<A NAME="marker=3777"> </A><A NAME="marker=3778"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>