{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf100
\readonlydoc1{\fonttbl\f0\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww17100\viewh19100\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs48 \cf0 SimpleVideoOut
\fs36 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs24 \cf0 {{\NeXTGraphic Pasted Graphic 3.tiff \width700 \height700
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0  \
\
Version: 2.0.6\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 \
Author: QuickTime DTS\
\
Date: July 29, 2005\
\
Description:\
\
SimpleVideoOut demonstrates how QuickTime Video Output Components can be used to play video out to hardware.\
A common use would be playing a DV stream (.dv file) using QuickTime's FireWire Video Output Component and recording it on your handy dandy DV camera.\
\
Additions and/or changes in this release:\
\
NOTE: The only projects that were tested are what we consider "current" build environments (at the time of this release) these are:\
	Xcode 2.1 & CodeWarrior 9.5. However only the Xcode 2.1 project will build a universal binary which is the recommended build\
	configuration moving forward. The CodeWarrior projects are simply included for completeness.\
\
2.0.6\
    Added Endian macros so the displayed mode list atom data will be displayed correctly on Intel-based Macs. Added Xcode 2.1 project.\
2.0.5\
    Now check for an error from the QTVideoOutputGetDisplayModeList call in CVideoOutputComponent.cpp.\
    This fixes a problem that will only show up when FindNextComponent returns a VOut component that can\
    be opened correctly before a VOut component that cannot be opened because hardware is not available.\
    When this happens the returned mode list atom containers value is incorrect, but it's been disposed\
    and causes a crash when you start to parse it.\
2.0.4 Mac OS X\
	You can now drag a .dv or .mov file directly onto the application to open the file for playback.\
	Respect the highQuality hint if already set in a .mov just to make jmb happy.\
	Added "Close" to the file menu just for gd. Beer mate?\
	Modified dialog resource so pop-up has room for longer mode list names like "Apple FireWire DVCPRO NTSC"\
2.0.3\
	For CW 8.2 MSL remove calls to num2dec and dec2str\
	Fixed Clock UI to always reflect correct state\
	Don't crash if a Video Output Component has a bad mode list\
2.0.1 - 2.0.2\
	Don't call SetEchoPort in CVideoOutput::Begin by default\
	Added ability to turn VOut off, minor UI changes\
	Don't leak SoundInfoList handle\
\
Preferred Requirements: Mac OS X 10.4.x, QuickTime 7.0.1+, FireWire capable Macintosh, DV Camera\
\
Older Requirements: Mac OS X 10.2.6+, QuickTime 6.0.3+, Mac OS 9+, CarbonLib 1.5+, QuickTime 5.0.2+, Universal Interfaces 3.4.1+. Mac OS X 10.1.4 w/ QT 5 or 6\
\
IDE Requirements:\
     Mac OS X 10.4.x prefered - Xcode 2.1+\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 \
     Mac OS X 10.3.x - CodeWarrior 9.5 (use CW9 project file) or Xcode 1.5+\
     \
     Mac OS X 10.2.x - CodeWarrior Pro 8.2 (use CW8 project file) and Jaguar Project Builder December 2002 Tools\
\
     Mac OS 9 - CodeWarrior Pro 7.2 (IDE 4.2.6) or Pro 8.2 (IDE 5.0) and Universal Interfaces 3.4.1+.\
\
     Mac OS X 10.1.4 - CodeWarrior Pro 7.2 (use the CW7 project file) and Project Builder 1.1.1\
\
Note: If you have the latest Universal Interfaces (3.4.1 or greater) you shouldn't need to modify the project at all.\
\
However, if you're using a QuickTime SDK containing newer QuickTime Interfaces, be sure to modify the projects access\
paths to include the QuickTime SDK before the Universal Interfaces.\
\
With the release of QuickTime 6 the followng should no longer apply but is included here for completeness:\
\
Although completely carbonized the CFM target built with CodeWarrior links in a library containing a private\
(as of QuickTime 5.0.2) ChooseMovieClock API. Because this library was built linking to InterfaceLib, the Carbon\
CFM build will not run on Mac OS X. The Project Builder target however, links against the QuickTime Framework and\
does not have this issue. The Mach-O CodeWarrior target also works fine for Mac OS X and does not have this issue.\
ChooseMovieClock will be a public API with QuickTime 6 and at that point ChooseMovieClockLib will no longer be required\
for the CFM target and the single Carbon CFM binary will work on 9 and X. If you have QuickTime 6 installed and building\
for Mac OS 9 you can safely remove the header and library from the project to avoid the linker warning.\
\
Please direct questions and or comments to\
     http://developer.apple.com/contact/feedback.html\
\
The main component of this example is an easy to use class which encapsulates\
the basic set of functions required to use QuickTime Video Output Components.\
\
CVideoOutput class contains the following methods:\
\
CVideoOutput( const unsigned char inClientNameStr[],\
              const Movie inMovie = NULL )\
\
To instantiate a CVideoOutput object pass in a client name and a Movie, or don't pass in a Movie and call\
SetMovie() before calling Begin(). inMovie is set to NULL in the interface by default.\
\
Open( void )\
    Opens an instance of a video output component, registers the client name with the component and sets up the display mode.\
\
Begin( Boolean inUseVOsdev = true, Boolean inUseVOClk = true, AudioRate inAudioRate = eAudioRateDefault, Boolean inChangeMovieGWorld = false )\
    Gains exclusive access to the hardware, and sets up the sound output and clock associated with the video output component.\
	Begin also acquires the GWorld used by the video output component. Both the sound and clock parameters are set to 'true' by default,\
	the audio rate is set to "eAudioRateDefault", and Begin will not set the Video Output echo port or call SetMovieGWorld by default.\
\
SetMovie( const Movie inMovie )\
    Set's the Movie to be used by this class. CVideoOutput must have a valid movie before Begin() is called.\
\
SetEchoPort( const CGrafPtr inEchoPort = NULL )\
    Allows you to display video both on an external video display and in a window. Pass in a CGrafPtr to specify a window to display video\
	sent to the device. When the Echo Port is on, the movie is displayed in the window and sent to the video output device. If the EchoPort\
	is not supported by the video output component or is turned off, the Movie will only directed to the video output components GWorld as\
	you would expect. Call CanDoEchoPort() before assuming the video output component supports the echo port.\
\
SetSoundDevice( Boolean inUseVOsdev = true )\
    This call will turn on/off the use of the video output components sound device. Passing in 'true' will set up the use of the video output\
	components sound device, this is the default setting. You should call SetClock() after this call to choose the correct clock.\
\
SetClock( Boolean inUseVOClock = true )\
    Allows you to choose which clock to use for audio / video sync. Passing in 'true' will choose the video output components clock to\
	synchronize video and sound to the rate of the display. Passing in 'false' will use the default QuickTime clock.\
\
NOTE: Setting the Movie master clock to the video output clock MUST be done after setting up the sound device or it's gets whacked back to\
the default QuickTime clock.\
\
End( void )\
    Relinquishes exclusive access to the hardware. Also called by Close().\
\
Close( void )\
    Closes the component instance and zeros the object. It is also called by the destructor.\
\
GetGWorld( void )\
    Returns a pointer to the graphics world used by a video output component.\
    NOTE: Do NOT dispose this GWorld!\
\
GetError( void )\
    Returns the last return code generated by the system.\
\
SelectVideoOutputComponent( void )\
    Calls the CVideoOutputComponents DoSettingsDialog() method. Allows the client of this class to select which video output component and mode to use.\
\
Boolean CanDoEchoPort( void )\
    Does this component support an EchoPort?\
\
Boolean HasSoundOutput( void )\
    Does this component have a sound output component associated with it?\
\
Boolean HasClock( void )\
    Does this component have a clock component associated with it?}