MoofWars 1.02 (8/10/98)=======================Written by Timothy Carrolltimc@apple.comCopyright © 1996, 1997, 1998 Apple Computer, Inc., All Rights ReservedYou may incorporate this sample code into your applications without restriction, though the sample code has been provided "AS IS" and the responsibility for its operation is 100% yours.  However, what you are not permitted to do is to redistribute the source as "DSC Sample Code" after having made changes. If you're going to re-distribute the source, we require that you make it clear in the source that the code was descended from Apple Sample Code, but that you've made changes.Version History===============1.02 -- This fixes a few bugs in the code.  In addition, the VBL task has been replaced with a Time Manager task.1.01 -- This version is a little friendlier to compilers other than Metrowerks.  In my final days of cleaning up 1.0, I broke compilation on MrC or Motorola.  Send me email if you can't get it to build on those compilers.A few disposal bugs were found using Onyx's Spotlight, and these have been fixed.Added a couple of lines to the blitter code to try to catch an invalid case that should never happen, but could if we pass an improperly encoded sprite.  Check out TGraphic for details.1.0 -- original release.  Thanks to George Warner for providing me the DogCow sprite graphics.MAKE SURE MACSBUG IS INSTALLED!===============================By default, I compile with debugging code added to the project, so make sure you have MacsBug installed!What is it?===========MoofWars is a DrawSprocket games sample that shows a few techniques for fast drawing of sprites as well as a scrolling, tiled background.  With about 1400 sprites on the screen, this code can achieve 15 frames per second on a 7100/66 and 30+ frames on an 8500/120.  Thanks to DrawSprocket, it takes full advantage of page flipping -- with less sprites on the screen, an 8500 with full video RAM can achieve 66 frames per second with full screen 640x480 animation.If you have the Tips of the Mac Games Gurus book, you can add the Hollywood API and sound resources to the game -- by default, all of the sound calls are conditionalized so that this API is not required.  I definitely recommend the book as a good place to get started on writing Macintosh games.This code builds under both MrC and the Metrowerks Compilers.  I haven't tested it in the Motorola compilers recently, but I don't forsee any major problems there either.  This version requires DrawSprocket, so it is currently PowerPC only.Descriptions of the Files=========================Moofwars.cp-----------This is the core application that initializes all the mac stuff, loads the game data, and runs the game.  The corresponding header file, Moofwars.h, holds all of the conditional compilation codes for the game.  The game code supports full error checking -- the debugging version of the code will debugstr if it encounters an error, while the standard version will probably just quit the application.TCommandTimer.cp----------The keystrokes are obtained in a time manager task.  Previous versions used a VBL, but I'm starting to change things to be more Carbon friendly. TGraphic.cp and TGraphicCollection.cp-----------     ---------------------A generic class that handles blitting a graphic into a PixMap.  The current routines are partially based of the run-length encoded sprites in the game programming gurus books, with considerable optimizations made to improve speed.  This is a complete class that handles all of the encoding, loading of the graphics and drawing.  The current code requires an 8-bit pixmap, but if new encoders were written, the blitter loops would work fine for 16 and 32 bit sprites as well.  TGraphic also provides complete hit testing code for RLE graphics.The TGraphicCollection is a simple collection class for a set of TGraphics.TSprite.cp----------A standard sprite class to handle processing sprites, including drawingand hit testing.  Leverages heavily off of the TGraphic classes.TSpriteCollection.cp--------------------A collection of related sprites.  Generally, the games never all thesprite routines directly, but instead call a collection object whichiterates over an entire list.TShipSprite.cp, TEnemySprite.cp, TShotSprite.cp-----------------------------------------------Derived classes from TSprite that show how to create behaviors for a particular class of sprite.TTileCollection.cp------------------Much like the TSpriteCollection and TGraphicCollection, this holds an entire set of 32x32 tiles that can be drawn to the screen.  Unlike those classes, there is no separate TTile class to handle this drawing -- all of the work is handled inside the collection class.  I did this to minimize call-chain overhead.TTileGrid.cp------------A class that describes a 2 dimensional array of tiles that can be drawn as the background for the window.  This version only supports drawing the tiles, but hit testing and more complex logic shouldn't be difficult to add.Sprite Encoding Tools---------------------Because the sprites and tiles are usually encoded before adding them to the project, I'm also including my current versions of my encoder tools that I use to generate the sprites.  These projects are not as extensively tested as the rest of the MoofWars code, but should provide some insight into how to build the various resources.Future Development==================Some things I may try to add in the future include:*  Improved performance of the sprite and tile blitters*  Fixing a couple of ugly pieces of code (Scaling.cp sucks!)*  NetSprocket support*  Actual interface code, such as a "loading game" dialog and preferences.*  Actual displays for keeping score*  Computer opponents.If you have other features you'd rather see, let me know and (time permitting), I'll try to add them.Feedback========I've tried to make this code bug-free, easy to understand, and most importantly, FAST!  So if the code fails in any of these areas, please drop me a line and tell me exactly what you ran into.  For bugs, ideally, let me know if it stops on a debug-assert and why.In particular, if you come up with ways to speed up this code further, I'd love to hear them.