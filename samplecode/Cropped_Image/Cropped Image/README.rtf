{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fmodern\fcharset77 Courier;
\f3\fnil\fcharset77 Monaco;\f4\fswiss\fcharset77 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;}
\vieww15380\viewh17580\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\b\fs36 \cf0 Cropped
\f1\b0\fs24  
\f0\b\fs36 Image
\f1\b0\fs24 \
\
This code sample demonstrates how to make an image from a portion of another image, as well as a few ways of indicating a selected rectangle or region.\
\
Most of the significant work in this sample is done in the 
\f0\b CroppingImageView
\f1\b0  class and the 
\f0\b CropMarker
\f1\b0  classes.\
\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\b \cf0 CroppingImageView\
\

\f1\b0 This class extends 
\f0\b NSImageView
\f1\b0  to deal with selecting a portion of the image it displays.    Besides the usual NSImageView behaviour, a CroppingImageView forwards events to its CropMarker, and can supply the selected image from its 
\f2 \CocoaLigature0 -croppedImage:
\f3\fs20  
\f1\fs24 \CocoaLigature1 method.\
\
Please note that by implementing 
\f2 \CocoaLigature0 -mouseDown:
\f1 \CocoaLigature1 , 
\f2 \CocoaLigature0 -mouseDragged:
\f1 \CocoaLigature1 , and 
\f2 \CocoaLigature0 -mouseUp:
\f1 \CocoaLigature1 , the mouse-tracking code doesn't require hijacking the event loop.  This is the preferred way to implement mouse tracking in Cocoa.\

\f0\b \

\f1\b0 The 
\f2 \CocoaLigature0 -croppedImage
\f1 \CocoaLigature1  method is similar to the 
\f2 \CocoaLigature0 -tintedImage
\f1 \CocoaLigature1  method in the Tinted Image sample.  It returns a new, autoreleased NSImage object.  \
\
The drawing in 
\f2 \CocoaLigature0 -croppedImage
\f1 \CocoaLigature1  is as follows:  after determining how big the new image should be, we create it and  
\f2 \CocoaLigature0 -lockfocus
\f1 \CocoaLigature1  on it.  We obtain the path describing the selected portion of the image from the CropMarker. \
\
Using an 
\f0\b NSAffineTransform
\f1\b0 , we then adjust the path for the difference in the coordinate spaces between the CroppingImageView and the new NSImage. The path is then filled, and the original image is composited onto the new image using the NSCompositeSourceIn operator.\
\
Notice that if anti-aliasing is active in the new image's drawing context, the mask drawn by filling the path will have soft edges.  Try turning this off with the checkbox to see the effect.   To see the mask, try selecting an area with the lasso before loading any image.\
\

\f0\b CropMarker\
\

\f1\b0 The CropMarker class implements a simple selection rectangle.  The rectangle can be moved by clicking and dragging inside the selected area.  Resizing the rectangle is left as an exercise for another code sample.\

\f0\b \
FinderStyleCropMarker\
\

\f1\b0 This class draws the selection rectangle the way that the Finder does:  the selected area is outlined with the selection color, and the area inside is colored in with a translucent color.
\f0\b \
\
IPhotoStyleCropMarker\
\

\f1\b0 The iPhoto style colors the area 
\f4\i outside
\f1\i0  the selected area.    This is done by constructing an 
\f0\b NSBezierPath
\f1\b0  consisting of two rectangles:  the rectangle enclosing the view, and the selected rectangle.  Filling this path using the even/odd rule leaves the insides of the selected rectangle uncolored.
\f0\b \
\
LassoStyleCropMarker\
\

\f1\b0 The Lasso style marker tracks the mouse, building up an arbitrarily-shaped outline.  This outline is stored in an NSBezierPath.\
\

\f0\b BUG! 
\f1\b0  (and this one is left as an exercise for the reader:  when the image in the left-side NSImageView is scaled, the selected area won't take that scaling into account.\
\

\f0\b Wouldn't it be nice if...\
\

\f1\b0 ..this sample also demonstrated resizing of the selected area?  I didn't do that, since I wanted to keep the sample relatively simple.  If you want to add it as an exercise, read up on the methods like 
\f2 \CocoaLigature0 -addCursorRect:
\f1 \CocoaLigature1  in the NSWindow documentation.
\f0\b \

\f1\b0 \
\
	\
One last note:  the image of the Mandrill is traditional for image processing code.   Expect to see it again in future code samples.\
\
}