<html>

	<head>
		<title>Sample Chapter</TITLE>
<script language=javascript> window.parent.focus(); </script>
	</head>

	<body bgcolor="white">
		<a href="../qtdevseries.htm"><i>QuickTime Developer Series</i></a><br>
		<img src="../qlogo2.jpg" width="512" height="118"><br>
		<img src="title.gif" width="512" height="100"><br>
		<h1>Sample Chapter <font size="2" face="Arial,Helvetica,Geneva,Swiss,SunSans-Regular">(typical download time over 28.8 KB/sec. is 45 seconds)</font>
		<hr width="512" align="left">
		<table width="512">
			<tr>
				<td scope="row">
					<div>
						<a name="pgfId=14029"></a><img src="disqtsample_1.gif" align="LEFT" valign="middle"> <a name="10524"></a>
						<h1 class="CO.ChapOpener">Introduction</h1>
						<p class="T0.Text0"><a name="pgfId=14030"></a>If you are new to QuickTime, this chapter is designed to get you oriented, starting from the beginning. It sets out by answering the frequently asked questions that always pop up, then it diagrams the structure of QuickTime in a five-layer model, and finally it defines some of the terms and concepts that we'll use in later chapters.<br>
						<br>
						<a name="pgfId=12283"></a>If you have already worked with QuickTime, you should still skim this chapter for ideas. QuickTime has grown a lot recently, so the current version of the software may support concepts and features that are new to you.<br>
						<br>
						<br>
						</p>
						<div>
							<p class="T0.Text0"><a name="pgfId=12284"></a></p>
						</div>
						<h2>Frequently Asked Questions
						<hr>
						</h2>
						<p><a name="pgfId=12285"></a>People with different technical backgrounds tend to ask a similar set of questions when they first encounter QuickTime. What is it? How do I get it? How do I use it? So we'll start out by answering these basic questions.</p>
						<ul>
							<li class="B1.Bullet1"><a name="pgfId=12286"></a><b class="bold">What is QuickTime?<br>
							</b><a name="marker=13296"></a>QuickTime is a system-level code package that resides on the user's computer and supports a variety of multimedia tasks. As your code runs, it can call QuickTime to create and show movies, play sounds and music, and animate the user's desktop.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12419"></a><b class="bold">How is QuickTime implemented?<br>
							</b>On <a name="marker=13298"></a>Windows computers, QuickTime is implemented through a <a name="marker=13297"></a>dynamic-link library (DLL). On <a name="marker=13299"></a>Macintosh computers, it is implemented as a set of system extensions that can be installed with Mac&nbsp;OS 7.1.1 or later.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12420"></a><b class="bold">How do users acquire QuickTime's capabilities?<br>
							</b>Apple distributes the QuickTime system software, including the <a name="marker=13837"></a>browser plug-in, in separate versions for Mac and Windows. Once the user has installed the system software, applications can call it to access all of QuickTime's functionality. Version 4 of the user package also includes a basic version of the QuickTime <a name="marker=13300"></a>Player application. Users can upgrade the application to a more powerful version, <a name="marker=13878"></a>QuickTime Player Pro, which includes editing capabilities.<br>
							<br>
							<li class="Bc.BulletContinue"><a name="pgfId=12421"></a>Users can download the QuickTime 4 software from the Internet free of charge by going to <tt class="cv">http://www.apple.com/quicktime/</tt> . Apple and other manufacturers also ship QuickTime in new computers as built-in system software, and application developers can license it from Apple to include with their products.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12422"></a><b>How do programs use QuickTime?</b><br>
							You access QuickTime by including the necessary programming interfaces in the compilation of your Windows or Macintosh code. <a name="marker=13303"></a>QuickTime for Java, just released, contains a set of classes and methods that you can also use to write Java applets and applications that call QuickTime.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12423"></a><b class="bold">What types of media does QuickTime handle?<br>
							</b>Besides processing video data, <a name="marker=13304"></a>QuickTime handles still images, animated images (sprites), vector graphics, multiple sound channels, MIDI music, 3D objects, virtual reality objects and panoramas, and text. It adds a wide range of audio-visual possibilities to Mac or Windows applications, Web sites, and multimedia CDs.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12424"></a><b class="bold">Does QuickTime work differently with Macintosh and Windows?<br>
							</b>Although Mac and Windows programs may be structured differently, their interfaces to QuickTime are virtually identical.<a name="marker=13356"></a> Just about anything QuickTime can do on one platform, it can do on the other.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12425"></a><b class="bold">What data formats does QuickTime recognize?<br>
							</b><a name="marker=13305"></a>QuickTime curently imports and exports data in more than 70 formats, including most common transport and compression standards. As future standards are added to QuickTime's repertoire, applications created today will work with them automatically. For a list of QuickTime-compatible data formats, see Appendix B.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12432"></a><b class="bold">What is the QuickTime programming interface (API) like?<br>
							</b><a name="marker=13306"></a>Applications and other software access QuickTime's features through a large set of system-level C functions and associated data structures. These API elements are organized into functional groupings, so you can perform specific tasks without having to understand them all. About a hundred additional Macintosh functions--for file and memory management, graphics environment control, and so on--are accessible through the <a name="marker=13307"></a>Windows DLL. The result is a single, comprehensive API that supports all of QuickTime's functionality on both the Windows and Macintosh platforms.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12433"></a><b>How can I extend QuickTime's capabilities?</b><br>
							QuickTime is a modular tool kit; it is made up of software components that are installed and accessed through a component manager. Although the built-in <a name="marker=13308"></a>components carry out most standard multimedia tasks, you are free to replace or augment them with code of your own design. QuickTime includes a full set of services that help you create and install custom components.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=13202"></a><b>Will QuickTime evolve in the future?</b><br>
							The QuickTime architecture is forward-looking. It is designed to accept and integrate new features without breaking old applications. As new kinds of multimedia appear on the market, QuickTime will be updated to work with them. In many cases, old applications will be able to access the new multimedia without recoding.
						</ul>
						<p class="T0.Text0"><a name="pgfId=12305"></a>Let's watch a typical QuickTime movie. Put the CD in the back of this book into your Windows or Macintosh computer and launch the top-level home page (<tt class="cv"> Homepage.htm</tt> ) with your favorite Web browser. Click on the link to the WatchMe movie. You'll see and hear a short talk by Peter Hoddie, the QuickTime architect, about some of the features of Version 3.0. The picture will look something like the image below. .</p>
						<p class="T1.Text1"><a name="pgfId=13792"></a>If the QuickTime 4 software is not present on your machine, read the downloading instructions on page&nbsp;xxi.</p>
						<div>
							<h3 class="Fg.Figure"><a name="pgfId=12307"></a><a name="13690"></a>A typical QuickTime movie<br>
							<br>
							<img src="disqtsample_5.gif"><br>
							</h3>
						</div>
						<p><br>
						<a name="pgfId=12308"></a>QuickTime architect Peter Hoddie gives you an illustrated overview of some of the capabilities of QuickTime 3. The frame itself is an interactive movie that runs other movies in the viewing area--you can click the buttons on the left side to view them.<br>
						<br>
						</p>
						<div>
							<h2 class="H1.Heading1"><a name="pgfId=12309"></a>A Few Definitions
							<hr>
							</h2>
						</div>
						<p class="T0.Text0"><a name="pgfId=12313"></a>QuickTime was originally conceived as a way to bring movement to computer graphics and to let movies run on the desktop. But as QuickTime developed, it became clear that more than movies were involved. Elements that had been designed for static presentation could now be organized along a time line, as changing information.</p>
						<p class="T1.Text1"><a name="pgfId=13174"></a>The result was the concept of <a name="marker=13309"></a>change-based media, including not just movies but also animated drawings, music, sound sequences, virtual environments, and active data of all kinds. QuickTime became a generalized way to define time lines and organize information along them. The concept of the movie became a framework in which any sequence of media could be specified, displayed, and controlled. The movie-building process evolved into the five-layer model shown in the diagram below.</p>
						<div>
							<h3 class="H2.Heading2"><a name="pgfId=13731"></a>Movies</h3>
						</div>
						<p class="T0.Text0"><a name="pgfId=13732"></a>Using QuickTime, any collection of change-based data (audible, visual, or both) can be organized as a movie. By calling QuickTime, your code can create, display, edit, copy, and compress movies and movie data in most of the same ways that it currently manipulates text, sounds, and still-image graphics. While the details may get complicated, the top-level ideas are few and fairly simple:</p>
						<ul>
							<li class="B1.Bullet1"><a name="pgfId=13734"></a><a name="marker=13733"></a>Movies are bookkeeping structures. They contain all the information necessary to organize data in time, but they don't contain the data itself.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=13736"></a>Movies are made up of <a name="marker=13735"></a>tracks. Each track references and organizes a sequence of data of the same type--images, sounds, or whatever--in a time-ordered way.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=13995"></a>Media structures (or just <a name="marker=13994"></a>media) reference the actual data that are organized by tracks. Chunks of media data are called <a name="marker=13996"></a>media samples.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=13998"></a>A <a name="marker=13997"></a>movie file typically contains a movie and its media, bundled together so you can download or transport everything together. But a movie may also access media outside its file--for example, sounds or images from a Web site.<br>
							<a name="pgfId=13157"></a><a name="34409"></a>&nbsp;&nbsp;&nbsp;
						</ul>
						<div>
							<img src="disqtsample_7.gif"><br>
							<br>
							<br>
						</div>
						<p class="FT.FigureText"><a name="pgfId=12478"></a><a name="16626"></a>QuickTime's <a name="marker=13310"></a>architecture can be described by the five layers shown here. The sounds and images that the user experiences are organized and delivered by means of a movie structure, which is populated with media extracted and processed from files and external devices.</p>
						<p class="T0.Text0"><a name="pgfId=13757"></a>The basic relations between movies, tracks, and media are diagrammed in the next illustration.</p>
						<div>
							<h3 class="Fg.Figure"><a name="pgfId=12321"></a><a name="11173"></a>Movies, tracks, and media<br>
							<br>
							<img src="disqtsample_8.gif"><br>
							</h3>
						</div>
						<p><br>
						<a name="pgfId=12322"></a>The movie diagrammed here contains three tracks: video, music, and text. The material displayed by the tracks is contained in media structures that are located externally and organized by the movie.</p>
						<p class="T0.Text0"><a name="pgfId=13766"></a>QuickTime movies organize media along the time dimension. To manage this dimension, QuickTime defines <a name="marker=13767"></a>time coordinate systems that anchor movies and their media data structures to a common temporal reality, the second. Each time coordinate system establishes a <a name="marker=13768"></a>time scale that provides the translation between real time and the apparent time in a movie. Time scales are marked in time units--so many per second. The time coordinate system also defines <a name="marker=13769"></a>duration, which specifies the length of a movie or a media structure in terms of time units. A particular point in a movie can then be identified by the number of time units elapsed to that point. Each track in a movie contains a <a name="marker=13770"></a>time offset and a duration, which determine when the track begins playing and for how long. Each media structure also has its own time scale, which determines the default time units for data samples of that media type.</p>
						<div>
							<h3 class="H2.Heading2"><a name="pgfId=12324"></a>Components</h3>
						</div>
						<p class="T0.Text0"><a name="pgfId=12565"></a><a name="18748"></a>A <a name="marker=13320"></a>component is a piece of QuickTime code that provides a defined set of services to one or more clients. QuickTime responds to your software calls by repeatedly invoking its various components. In addition, QuickTime components often call each other. Much of the time your application does not need to know which components QuickTime is using to accomplish the tasks you specify.</p>
						<p class="T1.Text1"><a name="pgfId=12326"></a>QuickTime is made up of some 200 components, each of which performs a specific job and responds to a defined programming interface. At any given point in a QuickTime programming project, you need be concerned only with the components that your project uses.</p>
						<p class="T1.Text1"><a name="pgfId=12801"></a>So when you raise the hood on QuickTime, you're not staring at a tangle of hoses and gears; it looks more like a stack of clearly labeled boxes. You can change its functionality by opening just one or two boxes. Also, you can start working with QuickTime without needing to know what's in all of the boxes.</p>
						<p class="T1.Text1"><a name="pgfId=12787"></a>This kind of modularity makes it much simpler to program for QuickTime because your code is always dealing with standardized interfaces. It also makes it easy for you to extend the operation of QuickTime by adding a new component or to modify it by replacing a built-in component with one you have written. For example, you might want to revise a component to take advantage of a piece of hardware that your company sells.</p>
						<p class="T1.Text1"><a name="pgfId=12328"></a>QuickTime's component pieces fall into several basic categories:</p>
						<ul>
							<li class="B1.Bullet1"><a name="pgfId=13128"></a>The <a name="marker=13321"></a>Movie Toolbox provides all the services that other code needs to build movies and movie files.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=13129"></a><a name="marker=13322"></a>Movie controllers display movies and provide user playback controls.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12329"></a><b class="bold">Media handlers</b> <a name="marker=13323"></a>interpret and manipulate a media's sample data in ways that are appropriate for its format.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12330"></a><b class="bold">Capture</b> <a name="marker=13324"></a>components include <a name="marker=13325"></a>video digitizers and <a name="marker=13326"></a>sequence grabbers with their associated channel and panel components. They let you obtain digitized data from external sources, such as video capture boards and digital cameras.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12331"></a><b class="bold">Movie data exchange</b> <a name="marker=13327"></a>components let you import data from non-movie sources (such as CD tracks) into QuickTime movies and export data to non-movie formats (such as AVI or WAVE files).<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12332"></a><b class="bold">Codecs</b> <a name="marker=13328"></a>(<a name="marker=13329"></a> compressors/<a name="marker=13330"></a> decompressors) provide compression and decompression services for media such as sounds and image sequences.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12333"></a><b class="bold">Transcoders</b> <a name="marker=13331"></a>translate data from one compressed format to another.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=13638"></a><b class="bold">Video digitizers</b> <a name="marker=13650"></a>convert analog video data to digital form.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=13639"></a><b class="bold">Video output</b> <a name="marker=13332"></a>components let you send QuickTime video to devices (such as high-end AV gear) that are not recognized as displays by the computer's operating system.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12336"></a><b class="bold">Graphics importers</b> <a name="marker=13333"></a>display still images obtained from data in various file formats, such as JPEG, PNG, and GIF.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=13138"></a><a name="marker=13334"></a>Graphics exporters store still images in the same formats that graphics importers handle.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12337"></a><b class="bold">Preview components </b>create and display previews (short excerpts) of movie files or other files that QuickTime can import.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12338"></a><b>Tween</b> <a name="marker=13335"></a>components perform interpolations between values of various data types. Tweening is an advanced technique that is covered in detail in the QuickTime SDK.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=13232"></a><b>Effects</b> <a name="marker=13336"></a>components provide real-time effects and transitions (such as wipes and dissolves) between images inside or outside QuickTime movies.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12339"></a>The <b>Sprite Toolbox</b> <a name="marker=13337"></a>and <b>sprite media handler</b> <a name="marker=13338"></a>let you create and manipulate animated graphics called <a name="marker=13339"></a>sprites, which may also be wired to report user interactions.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=13143"></a><a name="marker=13340"></a>Text channel components import and export text between movies and external text handling code, such as word processors.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12340"></a><b>Clock</b> <a name="marker=13341"></a>components generate timing information and schedule time-based callback events.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=13651"></a><a name="marker=13652"></a>Real-time streaming components let you serve and receive movies and live video in real time, without downloading large files.
						</ul>
						<p class="T0.Text0"><a name="pgfId=12341"></a>For a complete list of QuickTime components, see Appendix A.</p>
						<div>
							<h3 class="H2.Heading2"><a name="pgfId=12342"></a><a name="26939"></a>Atoms</h3>
						</div>
						<p class="T0.Text0"><a name="pgfId=12343"></a>QuickTime stores most of its data using specialized memory structures called <a name="marker=13342"></a>atoms. Movies and their tracks are organized as atoms. Media and data samples are also converted to atoms before being stored in a movie file.</p>
						<p class="T1.Text1"><a name="pgfId=12824"></a>There are two kinds of atoms: <a name="marker=13343"></a>classic atoms, which your code accesses by offsets, and <a name="marker=13344"></a>QT atoms, for which QuickTime provides a full set of access tools. Atoms that contain only data, and not other atoms, are called <a name="marker=13345"></a>leaf atoms.</p>
						<p class="T1.Text1"><a name="pgfId=12344"></a>QT atoms can nest indefinitely, forming hierarchies that are easy to pass from one process to another. Also, QuickTime provides a powerful set of tools by which you can search and manipulate QT atoms. You can use these tools to search through QT atom hierarchies until you get to leaf atoms, then read the leaf atom's data from its various fields.</p>
						<p class="T1.Text1"><a name="pgfId=12345"></a>Each atom has a type code that determines the kind of data stored in it. By storing data in typed atoms, QuickTime minimizes the number and complexity of the data structures that you need to deal with. It also helps your code ignore data that's not of current interested when it interprets a data structure.<br>
						<br>
						</p>
						<div>
							<h2 class="H1.Heading1"><a name="pgfId=12346"></a>Multiplatform Programming
							<hr>
							</h2>
						</div>
						<p class="T0.Text0"><a name="pgfId=12347"></a>If you are like most programmers, you hate to write the same code twice. You will welcome the fact that QuickTime is truly multiplatform. Its application programming interface is essentially the same on Windows and Macintosh; the same QuickTime-related source code will compile and run correctly on both platforms; and anything you can do with QuickTime on a <a name="marker=13346"></a>Macintosh computer you can also do on a computer running <a name="marker=13347"></a>Windows <a name="marker=13358"></a>95, 98, or <a name="marker=13359"></a>NT 4.0. In addition, QuickTime for <a name="marker=13348"></a>Java lets you write Java code that accesses QuickTime on both Windows or Macintosh computers.</p>
						<p class="T1.Text1"><a name="pgfId=12348"></a>If you're thinking of developing a multimedia application that uses QuickTime, this level of compatibility means that you will have access to the same QuickTime services across platforms, and you can easily produce both Mac and Windows versions of your software.</p>
						<p class="T1.Text1"><a name="pgfId=12349"></a>Here are the technical details of QuickTime's implementations for the Mac, Windows 95, Windows 98, Windows NT, and Java:</p>
						<ul>
							<li class="B1.Bullet1"><a name="pgfId=12589"></a>On the Mac, QuickTime is implemented as a set of system extensions that run under System 7.0 or later on most Macintosh computers. All the user needs is a 68020 processor or better with support for Color QuickDraw, or any PowerPC processor.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12590"></a>On Windows&nbsp;95, Windows&nbsp;98, and Windows&nbsp;NT, QuickTime is implemented as a <a name="marker=13349"></a>dynamic-link library (DLL) and works on any PC-compatible computer with a 66 MHz 80486 processor or better. It supports Microsoft <a name="marker=13350"></a>DirectDraw and <a name="marker=13351"></a>DirectSound, which improve its performance. Users can download runtime implementations of QuickTime with the <a name="marker=13352"></a>Player application from the Internet free of charge, and developers can license these items to ship with their products.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12591"></a>When accessed through Java, QuickTime running on one of these platforms is implemented as a set of classes and methods that gives you access to its functionality. You can write Java applets for both Macintosh and Windows that will share events and display space with native QuickTime.
						</ul>
						<p class="T0.Text0"><a name="pgfId=12623"></a>To watch a short talk about QuickTime multiplatform programming in Windows, double-click <tt class="cv">Movies/WatchMe-SourceMovies/Windows.mov</tt> on the CD. The movie will look like the illustration below. You'll notice that it is one of the movies linked into the WatchMe movie shown in <a href="#13690" class="XRef">A typical QuickTime movie</a> . This time it is running in the QuickTime Player application.<br>
						<br>
						</p>
						<div>
							<h3 class="Fg.Figure"><a name="pgfId=12355"></a><a name="20930"></a>Programming with QuickTime for Windows</h3>
						</div>
						<div>
							<img src="disqtsample_9.gif"><br>
							<br>
							<br>
						</div>
						<p class="FT.FigureText"><a name="pgfId=12356"></a>This short movie discusses some of the techniques you use when writing QuickTime code for the Windows platform. You can find it on the CD at <tt class="cv">Movies/WatchMe-SourceMovies/Windows.mov</tt> . When you launch it by itself, you invoke the QuickTime Player application. For information about its playback controls, see page&nbsp;33.</p>
						<p class="T0.Text0"><a name="pgfId=13405"></a>Multiplatform applications based on QuickTime are not only able to access existing QuickTime Web sites--they also work with most industry-standard movie formats. The more QuickTime features you use, the more benefits you can provide over the current choices that are available for Windows only, such as <a name="marker=13406"></a>Video for Windows and <a name="marker=13407"></a>DirectShow. You'll enjoy a wider range of capabilities and a higher level of compatibility with existing standards, both new and old. This is why most multimedia content developers work with tools that support QuickTime.<br>
						<br>
						</p>
						<div>
							<h2 class="H1.Heading1"><a name="pgfId=12676"></a>Quick Summary
							<hr>
							</h2>
						</div>
						<p class="T0.Text0"><a name="pgfId=12677"></a>You don't need to know a lot about QuickTime to understand what it's good for. Just tuck away these basic facts:</p>
						<ul>
							<li class="B1.Bullet1"><a name="pgfId=12678"></a>QuickTime is the most widely used software tool kit for creating and displaying movies, animations, music, and virtual reality.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12679"></a>It's everywhere; QuickTime is installed on virtually all Macintosh computers and more than two-thirds of Windows PCs.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12680"></a>The QuickTime system code is fully accessible in the Windows, Macintosh, and Java programming environments.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12681"></a>You can integrate QuickTime capabilities into your application with as few as a dozen calls.<br>
							<br>
							<li class="B1.Bullet1"><a name="pgfId=12682"></a>Because QuickTime is modular, you can change its features by modifying or replacing individual components.<br>
							<br>
						</ul>
						<div>
							<h2 class="H1.Heading1"><a name="pgfId=12357"></a>The Next Five Chapters
							<hr>
							</h2>
						</div>
						<p class="T0.Text0"><a name="pgfId=12358"></a>In an earlier <a href="#34409" class="XRef">diagram</a> we showed a simplified architectural model of QuickTime in five layers. In the next five chapters we'll explore this diagram layer by layer, starting in Chapter 2 with the user's experience. The whole point of QuickTime is to produce graphics and sound on the user's computer, so the place to begin is by understanding the final output. QuickTime's key deliverable is the movie, but you'll see that movies cover a lot of ground, from video stored on disk to music, animations, virtual reality environments, and live action streamed over the Internet.</p>
						<p class="T1.Text1"><a name="pgfId=12359"></a>Descending one level, Chapter 3 talks about the ways that QuickTime movies are delivered to the viewer. Besides live streaming, there are a variety of techniques for packaging movies to be accessed from disks, CD-ROM, and the Internet.</p>
						<p class="T1.Text1"><a name="pgfId=12360"></a>Chapter 4 goes into the internal structure of QuickTime movies. You'll see that this structure gives you a high degree of flexibility in timing and presenting the movie's media. The fact that one structure works with the entire range of media types also means that many of the programming tricks you learn for one media type will work with others.</p>
						<p class="T1.Text1"><a name="pgfId=13974"></a>At a finer level of detail, Chapter 5 describes QuickTime's techniques for referencing and processing the data that movies organize, including compression and decompression methods. QuickTime is designed to do most of the routine work automatically, so you can concentrate on higher-level design. But understanding the nuts and bolts of media handling can help you optimize the movies you build.</p>
						<p class="T1.Text1"><a name="pgfId=12362"></a>Finally, Chapter 6 discusses the facilities that QuickTime provides for capturing, storing, and creating the raw data that go into movies. It describes the QuickTime components that grab video and sound sequences from external devices, as well as the sophisticated built-in toolkits that let you create your own animation and music.</p>
						<p class="T1.Text1"><a name="pgfId=9360"></a>Remember that QuickTime is a general technology for working with change-based media. Part One of this book (Chapters 1 through 6) discusses movie-building because that is a central concept. But you can be a QuickTime programmer without ever creating or playing a movie--for example, if you work with desktop animation or synthetic music. Once you have read Part One and understand movies, you'll have the background knowledge to branch out into the other areas that we'll explore in Part Two.</p>
					</div>
					<p></td>
			</tr>
		</table>
		<hr width="512" align="left">
		</h1>
		<p><a href="discoqtmain.htm"><font size="4">Home</font></a><font size="4"> | <a href="updates.htm">Updates</a> | <a href="corrections.htm">Corrections</a> | <a href="faq.htm">FAQ</a> | <a href="toc.htm">Table of Contents</a> | </font>
	</body>

</html>
