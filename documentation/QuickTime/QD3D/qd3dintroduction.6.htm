<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE> Naming Conventions</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="H2.Heading2"><A NAME="pgfId=3552"> </A>Naming Conventions</H1><P CLASS="T1.Text1"><A NAME="pgfId=3557"> </A><A NAME="marker=3553"> </A>The QuickDraw&nbsp;3D application programming interfaces are designed, as much as possible, to mirror the QuickDraw&nbsp;3D class hierarchy described in the chapter <A HREF="qd3dobjects.htm#16698" CLASS="XRef">&quot;QuickDraw&nbsp;3D Objects.&quot;</A> They are also designed to exhibit as much uniformity as can reasonably be achieved by names describing a large and heterogeneous collection of objects instantiating classes in that hierarchy. Ideally, once you are acquainted with the various conventions governing the programming interfaces and the class hierarchy, you should be able to make correct guesses about the names of constants, data structures, and routines. In very many cases, the names of constants and routines are largely self-documenting, thanks to a strict adherence to the naming conventions. This section describes those conventions and provides some examples.</P><DIV><H2 CLASS="H3.Heading3"><A NAME="pgfId=3561"> </A>Constants</H2><P CLASS="T1.Text1"><A NAME="pgfId=3565"> </A>All constants defined in the QuickDraw&nbsp;3D application programming interfaces have the prefix <TT CLASS="cv">kQ3</TT>. Very simple constants consist solely of the <TT CLASS="cv">kQ3</TT> prefix and a specific value indicator. Here are some examples:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=10927"> </A>typedef enum TQ3Boolean {<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3False,<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3True<BR>} TQ3Boolean;<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=10933"> </A>typedef enum TQ3Switch {<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3Off,<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3On<BR>} TQ3Switch;<BR></CODE><CODE CLASS="Cv.Code"><A NAME="pgfId=10939"> </A>typedef enum TQ3Status {<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3Failure,<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3Success<BR>} TQ3Status;<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=3569"> </A>Most other enumerated constants consist of the standard <TT CLASS="cv">kQ3</TT> prefix, followed by a type, followed by a specific value. Here are some examples:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=10945"> </A>typedef enum TQ3Axis {<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3AxisX,<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3AxisY,<BR>&nbsp;&nbsp;&nbsp;&nbsp;kQ3AxisZ<BR>} TQ3Axis;<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=3572"> </A>Other constants are defined using the C preprocessor <TT CLASS="cv">#define</TT> mechanism. Here are some examples:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=10949"> </A>#define kQ3ObjectTypeElement&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3_OBJECT_TYPE('e','l','m','n')<BR>#define kQ3ObjectTypePick&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3_OBJECT_TYPE('p','i','c','k')<BR>#define kQ3ObjectTypeShared&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3_OBJECT_TYPE('s','h','r','d')<BR>#define kQ3ObjectTypeView&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q3_OBJECT_TYPE('v','i','e','w')<BR>#define kQ3ObjectTypeInvalid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=3577"> </A>In general, these kinds of constants specify types of objects in the QuickDraw&nbsp;3D class hierarchy or methods defining the behaviors of those types. These constants use the macros <TT CLASS="cv">Q3_OBJECT_TYPE</TT> or <TT CLASS="cv">Q3_METHOD_TYPE</TT>. See the header file <TT CLASS="cv">QD3D.h</TT> for definitions of these macros.</P></DIV><DIV><H2 CLASS="H3.Heading3"><A NAME="pgfId=3581"> </A>Data Types</H2><P CLASS="T1.Text1"><A NAME="pgfId=3585"> </A>All data structures and data types defined in the QuickDraw&nbsp;3D application programming interfaces have the prefix <TT CLASS="cv">TQ3</TT>. Like constant names, data type names never contain the underscore character (<TT CLASS="cv">_</TT>). When emphasis is required, subwords of a data type name are capitalized and usually proceed from general to specific.</P><P CLASS="T1.Text1"><A NAME="pgfId=3586"> </A>There are four distinguishable classes in data type names.</P><UL><LI CLASS="B1.Bullet1"><A NAME="pgfId=3587"> </A>Opaque objects, whose definitions are private, begin with the prefix <TT CLASS="cv">TQ3</TT> and end with the suffix <TT CLASS="cv">Object</TT>. Between the prefix and the suffix are one or more words indicating the type of the opaque object. Here are some examples:</LI></UL><CODE CLASS="Cv.Code"><A NAME="pgfId=10955"> </A>&nbsp;&nbsp;&nbsp;&nbsp;TQ3GeometryObject<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3ViewObject<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3CameraObject<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3StyleObject<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3DrawContextObject<BR></CODE><UL><LI CLASS="B1.Bullet1"><A NAME="pgfId=3589"> </A>Data structures used in defining characteristics of opaque objects begin with the prefix <TT CLASS="cv">TQ3</TT> and end with the suffix <TT CLASS="cv">Data</TT>. Between the prefix and the suffix are one or more words indicating the type of the object. Here are some examples:</LI></UL><CODE CLASS="Cv.Code"><A NAME="pgfId=10959"> </A>&nbsp;&nbsp;&nbsp;&nbsp;TQ3TriangleData<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3BoxData<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3OrthographicCameraData<BR></CODE><UL><LI CLASS="B1.Bullet1"><A NAME="pgfId=3591"> </A>Data structures that contain data not specifically used to define characteristics of an opaque object begin with the prefix <TT CLASS="cv">TQ3</TT>. Following the prefix are one or more words indicating the type of the data the structure contains. Here are some examples:</LI></UL><CODE CLASS="Cv.Code"><A NAME="pgfId=10963"> </A>&nbsp;&nbsp;&nbsp;&nbsp;TQ3Point3D<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3Vector2D<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3ColorRGB<BR>&nbsp;&nbsp;&nbsp;&nbsp;TQ3ColorARGB<BR></CODE><UL><LI CLASS="B1.Bullet1"><A NAME="pgfId=5877"> </A>Attributes are opaque objects, but they are named differently to distinguish them from other opaque objects. Attributes are of type <TT CLASS="cv">TQ3Attribute</TT>.</LI></UL><P CLASS="I.Important"><A NAME="pgfId=5420"> </A>All floating-point numbers used in the QuickDraw&nbsp;3D application programming interfaces are single precision. </P></DIV><DIV><H2 CLASS="H3.Heading3"><A NAME="pgfId=5878"> </A>Functions</H2><P CLASS="T1.Text1"><A NAME="pgfId=3598"> </A>All functions defined in the QuickDraw&nbsp;3D application programming interfaces have the prefix <TT CLASS="cv">Q3</TT>. The <I CLASS="italics">class</I> of an identifier immediately follows its type prefix. Then the <I CLASS="italics">method</I> occurs, separated from the class by an underscore. A method is almost always expressed as a verb-noun sequence. Here are some examples:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=10967"> </A>Q3Polygon_GetVertexPosition<BR>Q3NURBCurve_SetControlPoint<BR>Q3Light_SetBrightness<BR>Q3SpotLight_GetFallOff<BR>Q3View_GetLocalToWorldInverseTransposeMatrixState<BR>Q3Triangle_New<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=3600"> </A>Some functions are so simple that they have no distinguishable class and method. Here are some examples:</P><CODE CLASS="Cv.Code"><A NAME="pgfId=10971"> </A>Q3Initialize<BR>Q3IsInitialized<BR>Q3Exit<BR></CODE><P CLASS="T1.Text1"><A NAME="pgfId=3602"> </A>As much as possible, function parameters are ordered consistently throughout the application programming interfaces. In virtually all cases, the first parameter is a data type that corresponds to the object being operated on. When there are two or more additional parameters, they are placed in their natural or intuitive ordering.</P><P CLASS="T1.Text1"><A NAME="pgfId=3606"> </A>Most QuickDraw&nbsp;3D functions return a status code, which is of type <TT CLASS="cv">TQ3Status</TT>. A status code is either <TT CLASS="cv">kQ3Success</TT> or <TT CLASS="cv">kQ3Failure</TT>, indicating that the function has succeeded or failed. When a function fails, you can call a further function to get a specific error code. Alternatively, you can install an error-reporting callback routine to handle failures. See the chapter <A HREF="qd3derrormgr.htm" CLASS="XRef">&quot;Error Manager&quot;</A> for complete details on handling errors.</P><P CLASS="T1.Text1"><A NAME="pgfId=3610"> </A>Functions that create opaque objects usually return a function result whose type is a reference to the type of the newly created object (for instance, <TT CLASS="cv">TQ3CameraObject</TT> for a new camera object). An object reference is an opaque pointer to the object. When these kinds of routines fail, they return the value <TT CLASS="cv">NULL</TT>.<A NAME="marker=3611"> </A></P></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>