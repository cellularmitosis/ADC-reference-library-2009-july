<HTML><HEAD><META NAME="GENERATOR" CONTENT="Adobe FrameMaker 5.5/HTML Export Filter"><script language="JavaScript" src="frametest.js"></script><TITLE>Transforming Points and Vectors</TITLE></HEAD><BODY BGCOLOR="#ffffff"><!-- start of header --><!--#include virtual="/includes/framesetheader" --><!-- end of header --><!-- path goes here --><H1 CLASS="RH3.RoutineHd3"><A NAME="pgfId=3648"> </A>Transforming Points and Vectors</H1><P CLASS="T1.Text1"><A NAME="pgfId=3652"> </A>QuickDraw&nbsp;3D provides routines that you can use to multiply a point or vector by a matrix, thereby applying a transform to that point or vector. QuickDraw&nbsp;3D also provides routines that you can use to apply a transform to each point in an array of points.</P><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3656"> </A>Q3Vector2D_Transform</H2><P CLASS="T1.Text1"><A NAME="pgfId=3658"> </A><A NAME="marker=3657"> </A><A NAME="marker=1309"> </A>You can use the <TT CLASS="cv">Q3Vector2D_Transform</TT> function to apply a transform to a two-dimensional vector.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=8978"> </A>TQ3Vector2D *Q3Vector2D_Transform (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Vector2D *vector2D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix3x3 *matrix3x3, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Vector2D *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8980"> </A><TT CLASS="cv">vector2D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3660"> </A>A two-dimensional vector.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8989"> </A><TT CLASS="cv">matrix3x3</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3661"> </A>A 3-by-3 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=8998"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3662"> </A>On exit, the vector that is the result of multiplying <TT CLASS="cv">vector2D</TT> by <TT CLASS="cv">matrix3x3</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3663"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3664"> </A>The <TT CLASS="cv">Q3Vector2D_Transform</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, the vector that is the result of multiplying the vector <TT CLASS="cv">vector2D</TT> by the matrix transform <TT CLASS="cv">matrix3x3</TT>. Note that on entry the <TT CLASS="cv">result</TT> parameter can be the same as the <TT CLASS="cv">vector2D</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3665"> </A>Q3Vector3D_Transform</H2><P CLASS="T1.Text1"><A NAME="pgfId=3666"> </A><A NAME="marker=1319"> </A>You can use the <TT CLASS="cv">Q3Vector3D_Transform</TT> function to apply a transform to a three-dimensional vector.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9009"> </A>TQ3Vector3D *Q3Vector3D_Transform (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Vector3D *vector3D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix4x4 *matrix4x4, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Vector3D *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9011"> </A><TT CLASS="cv">vector3D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3668"> </A>A three-dimensional vector.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9020"> </A><TT CLASS="cv">matrix4x4</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3669"> </A>A 4-by-4 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9029"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3670"> </A>On exit, the vector that is the result of multiplying <TT CLASS="cv">vector3D</TT> by <TT CLASS="cv">matrix4x4</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3671"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3672"> </A>The <TT CLASS="cv">Q3Vector3D_Transform</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, the vector that is the result of multiplying the vector <TT CLASS="cv">vector3D</TT> by the matrix transform <TT CLASS="cv">matrix4x4</TT>. Note that on entry the <TT CLASS="cv">result</TT> parameter can be the same as the <TT CLASS="cv">vector3D</TT> parameter.<A NAME="marker=3673"> </A></P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3674"> </A>Q3Point2D_Transform</H2><P CLASS="T1.Text1"><A NAME="pgfId=3676"> </A><A NAME="marker=3675"> </A><A NAME="marker=1331"> </A>You can use the <TT CLASS="cv">Q3Point2D_Transform</TT> function to apply a transform to a two-dimensional point.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9040"> </A>TQ3Point2D *Q3Point2D_Transform (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point2D *point2D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix3x3 *matrix3x3, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Point2D *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9042"> </A><TT CLASS="cv">point2D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3678"> </A>A two-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9051"> </A><TT CLASS="cv">matrix3x3</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3679"> </A>A 3-by-3 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9060"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3680"> </A>On exit, the point that is the result of multiplying <TT CLASS="cv">point2D</TT> by <TT CLASS="cv">matrix3x3</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3681"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3682"> </A>The <TT CLASS="cv">Q3Point2D_Transform</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, the point that is the result of multiplying the point <TT CLASS="cv">point2D</TT> by the matrix transform <TT CLASS="cv">matrix3x3</TT>. Note that on entry the <TT CLASS="cv">result</TT> parameter can be the same as the <TT CLASS="cv">point2D</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3683"> </A>Q3Param2D_Transform</H2><P CLASS="T1.Text1"><A NAME="pgfId=3684"> </A><A NAME="marker=1341"> </A>You can use the <TT CLASS="cv">Q3Param2D_Transform</TT> function to apply a transform to a two-dimensional parametric point.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9071"> </A>TQ3Param2D *Q3Param2D_Transform (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Param2D *param2D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix3x3 *matrix3x3, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Param2D *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9073"> </A><TT CLASS="cv">param2D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3686"> </A>A two-dimensional parametric point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9082"> </A><TT CLASS="cv">matrix3x3</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3687"> </A>A 3-by-3 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9091"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3688"> </A>On exit, the point that is the result of multiplying <TT CLASS="cv">param2D</TT> by <TT CLASS="cv">matrix3x3</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3689"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3690"> </A>The <TT CLASS="cv">Q3Param2D_Transform</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, the parametric point that is the result of multiplying the parametric point <TT CLASS="cv">param2D</TT> by the matrix transform <TT CLASS="cv">matrix3x3</TT>. Note that on entry the <TT CLASS="cv">result</TT> parameter can be the same as the <TT CLASS="cv">param2D</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3691"> </A>Q3Point3D_Transform</H2><P CLASS="T1.Text1"><A NAME="pgfId=3692"> </A><A NAME="marker=1351"> </A>You can use the <TT CLASS="cv">Q3Point3D_Transform</TT> function to apply a transform to a three-dimensional point.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9102"> </A>TQ3Point3D *Q3Point3D_Transform (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point3D *point3D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix4x4 *matrix4x4, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Point3D *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9104"> </A><TT CLASS="cv">point3D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3694"> </A>A three-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9113"> </A><TT CLASS="cv">matrix4x4</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3695"> </A>A 4-by-4 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9122"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3696"> </A>On exit, the point that is the result of multiplying <TT CLASS="cv">point3D</TT> by <TT CLASS="cv">matrix4x4</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3697"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3698"> </A>The <TT CLASS="cv">Q3Point3D_Transform</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, the point that is the result of multiplying the point <TT CLASS="cv">point3D</TT> by the matrix transform <TT CLASS="cv">matrix4x4</TT>. Note that on entry the <TT CLASS="cv">result</TT> parameter can be the same as the <TT CLASS="cv">point3D</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3699"> </A>Q3RationalPoint4D_Transform</H2><P CLASS="T1.Text1"><A NAME="pgfId=3700"> </A><A NAME="marker=1361"> </A>You can use the <TT CLASS="cv">Q3RationalPoint4D_Transform</TT> function to apply a transform to a four-dimensional rational point.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9133"> </A>TQ3RationalPoint4D *Q3RationalPoint4D_Transform (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3RationalPoint4D *point4D, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix4x4 *matrix4x4, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3RationalPoint4D *result);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9135"> </A><TT CLASS="cv">point4D</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3702"> </A>A four-dimensional point.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9144"> </A><TT CLASS="cv">matrix4x4</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3703"> </A>A 4-by-4 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9153"> </A><TT CLASS="cv">result</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3704"> </A>On exit, the point that is the result of multiplying <TT CLASS="cv">point4D</TT> by <TT CLASS="cv">matrix4x4</TT>.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3705"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3706"> </A>The <TT CLASS="cv">Q3RationalPoint4D_Transform</TT> function returns, as its function result and in the <TT CLASS="cv">result</TT> parameter, the point that is the result of multiplying the rational point <TT CLASS="cv">point4D</TT> by the matrix transform <TT CLASS="cv">matrix4x4</TT>. Note that on entry the <TT CLASS="cv">result</TT> parameter can be the same as the <TT CLASS="cv">point4D</TT> parameter.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3707"> </A>Q3Point3D_To3DTransformArray</H2><P CLASS="T1.Text1"><A NAME="pgfId=3708"> </A><A NAME="marker=1371"> </A>You can use the <TT CLASS="cv">Q3Point3D_To3DTransformArray</TT> function to apply a transform to each point in an array of three-dimensional points.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9164"> </A>TQ3Status Q3Point3D_To3DTransformArray (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point3D *inVertex, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix4x4 *matrix, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3Point3D *outVertex, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long numVertices, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long inStructSize, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long outStructSize);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9166"> </A><TT CLASS="cv">inVertex</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3710"> </A>A pointer to an array of three-dimensional points. This is the source array.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9179"> </A><TT CLASS="cv">matrix</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3711"> </A>A 4-by-4 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9188"> </A><TT CLASS="cv">outVertex</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3712"> </A>A pointer to an array of three-dimensional points. This is the destination array.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9197"> </A><TT CLASS="cv">numVertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3713"> </A>The number of vertices.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9206"> </A><TT CLASS="cv">inStructSize</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3714"> </A>The size of an element in the source array. Effectively, this is the distance, in bytes, between successive points in the source array.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9215"> </A><TT CLASS="cv">outStructSize</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3715"> </A> The size of an element in the destination array. Effectively, this is the distance, in bytes, between successive points in the destination array.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3716"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3717"> </A>The <TT CLASS="cv">Q3Point3D_To3DTransformArray</TT> function returns, in the <TT CLASS="cv">outVertex</TT> parameter, an array of three-dimensional points, each of which is the result of multiplying a point in the <TT CLASS="cv">inVertex</TT> array by the matrix transform <TT CLASS="cv">matrix</TT>. The <TT CLASS="cv">outVertex</TT> array contains the same number of points (that is, vertices) as the <TT CLASS="cv">inVertex</TT> array, as specified by the <TT CLASS="cv">numVertices</TT> parameter. The <TT CLASS="cv">inStructSize</TT> and <TT CLASS="cv">outStructSize</TT> parameters specify the sizes of an element in the <TT CLASS="cv">inVertex</TT> and <TT CLASS="cv">outVertex</TT> arrays, respectively.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3718"> </A>Q3Point3D_To4DTransformArray</H2><P CLASS="T1.Text1"><A NAME="pgfId=3719"> </A><A NAME="marker=1384"> </A>You can use the <TT CLASS="cv">Q3Point3D_To4DTransformArray</TT> function to apply a transform to each point in an array of three-dimensional points, while changing the dimension of each point from three to four dimensions.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9227"> </A>TQ3Status Q3Point3D_To4DTransformArray (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Point3D *inVertex, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix4x4 *matrix, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3RationalPoint4D *outVertex, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long numVertices, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long inStructSize, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long outStructSize);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9229"> </A><TT CLASS="cv">inVertex</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3721"> </A>A pointer to an array of three-dimensional points. This is the source array.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9238"> </A><TT CLASS="cv">matrix</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3722"> </A>A 4-by-4 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9247"> </A><TT CLASS="cv">outVertex</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3723"> </A>A pointer to an array of four-dimensional points. This is the destination array.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9256"> </A><TT CLASS="cv">numVertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3724"> </A>The number of vertices.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9265"> </A><TT CLASS="cv">inStructSize</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3725"> </A>The size of an element in the source array. Effectively, this is the distance, in bytes, between successive points in the source array.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9274"> </A><TT CLASS="cv">outStructSize</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3726"> </A> The size of an element in the destination array. Effectively, this is the distance, in bytes, between successive points in the destination array.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3727"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3728"> </A>The <TT CLASS="cv">Q3Point3D_To4DTransformArray</TT> function returns, in the <TT CLASS="cv">outVertex</TT> parameter, an array of four-dimensional points, each of which is the result of changing the dimensionality of a point in the <TT CLASS="cv">inVertex</TT> array from three to four and multiplying by the matrix transform <TT CLASS="cv">matrix</TT>. The <TT CLASS="cv">outVertex</TT> array contains the same number of points (that is, vertices) as the <TT CLASS="cv">inVertex</TT> array, as specified by the <TT CLASS="cv">numVertices</TT> parameter. The <TT CLASS="cv">inStructSize</TT> and <TT CLASS="cv">outStructSize</TT> parameters specify the sizes of an element in the <TT CLASS="cv">inVertex</TT> and <TT CLASS="cv">outVertex</TT> arrays, respectively.</P></DIV></DIV><DIV><H2 CLASS="RoH.RoutineHeading"><A NAME="pgfId=3729"> </A>Q3RationalPoint4D_To4DTransformArray</H2><P CLASS="T1.Text1"><A NAME="pgfId=3730"> </A><A NAME="marker=1397"> </A>You can use the <TT CLASS="cv">Q3RationalPoint4D_To4DTransformArray</TT> function to apply a transform to each point in an array of four-dimensional points.</P><CODE CLASS="RD.RoutineDeclare"><A NAME="pgfId=9286"> </A>TQ3Status Q3RationalPoint4D_To4DTransformArray (<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3RationalPoint4D *inVertex, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const TQ3Matrix4x4 *matrix, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TQ3RationalPoint4D *outVertex, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long numVertices, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long inStructSize, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned long outStructSize);<BR></CODE><DL COMPACT><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9288"> </A><TT CLASS="cv">inVertex</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3732"> </A>A pointer to an array of four-dimensional points. This is the source array.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9297"> </A><TT CLASS="cv">matrix</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3733"> </A>A 4-by-4 matrix.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9306"> </A><TT CLASS="cv">outVertex</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3734"> </A>A pointer to an array of four-dimensional points. This is the destination array.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9315"> </A><TT CLASS="cv">numVertices</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3735"> </A>The number of vertices.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9324"> </A><TT CLASS="cv">inStructSize</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3736"> </A> The size of an element in the source array. Effectively, this is the distance, in bytes, between successive points in the source array.</DD><DT CLASS="DT.DefinitionTerm"><A NAME="pgfId=9334"> </A><TT CLASS="cv">outStructSize</TT></DT><DD CLASS="DD.DefinitionDef"><A NAME="pgfId=3737"> </A> The size of an element in the destination array. Effectively, this is the distance, in bytes, between successive points in the destination array.</DD></DL COMPACT><DIV><H3 CLASS="RSb.RoutineSbhd"><A NAME="pgfId=3738"> </A>DESCRIPTION</H3><P CLASS="T1.Text1"><A NAME="pgfId=3739"> </A>The <TT CLASS="cv">Q3RationalPoint4D_To4DTransformArray</TT> function returns, in the <TT CLASS="cv">outVertex</TT> parameter, an array of four-dimensional points, each of which is the result of multiplying a point in the <TT CLASS="cv">inVertex</TT> array by the matrix transform <TT CLASS="cv">matrix</TT>. The <TT CLASS="cv">outVertex</TT> array contains the same number of points (that is, vertices) as the <TT CLASS="cv">inVertex</TT> array, as specified by the <TT CLASS="cv">numVertices</TT> parameter. The <TT CLASS="cv">inStructSize</TT> and <TT CLASS="cv">outStructSize</TT> parameters specify the sizes of an element in the <TT CLASS="cv">inVertex</TT> and <TT CLASS="cv">outVertex</TT> arrays, respectively.<A NAME="marker=3740"> </A></P></DIV></DIV><hr>&#169; 1997 Apple Computer, Inc.</DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- start of footer --><!--#include virtual="/includes/framesetfooter" --><!-- end of footer --></BODY></HTML>