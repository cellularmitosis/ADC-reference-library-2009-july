{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww12660\viewh14000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\b\fs36 \cf0 iSpend -- Version 2
\f1\b0\fs24 \
\
This milestone demonstrates support for pasteboard handling, including copy and paste, drag and drop, and providing and using services.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\b\fs28 \cf0 Copy and Paste
\fs24 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\b0 \cf0 * MyDocument_Pasteboard.h and MyDocument_Pasteboard.m have been added, with support for pasteboard handling in the recommended style.  Pasteboard handling is managed by the document in this particular example.  In a more complex example, with multiple windows per document, it might be managed by the window controller (or in examples with custom views, by the view), using its information about selections, perhaps relying on the document for support in translating to and from pasteboard formats.\
\
* The formats supported are:  the application's custom pasteboard format, kSpendDocumentType; files, represented by NSFilenamesPboardType; rich text, represented by NSRTFPboardType; and plain text, represented by NSStringPboardType.  Of these, the only type written lazily is NSFilenamesPboardType, primarily in support of promise drags; to support these, NSFilesPromisePboardType is written to the pasteboard immediately, and NSFilenamesPboardType on demand.\
\
* The custom pasteboard type is written to and read from the pasteboard as archived data.  Plain text is written to and read from the pasteboard as tab-separated values, although the read side is flexible enough to also handle comma- or return-separated values.  Rich text is written to and read from the pasteboard as text tables (new for Tiger), although the read side also supports the same formats as in the plain text case, if no table is present.\
\
* The organization of the methods (writablePasteboardTypes, writeSelectionToPasteboard:types:, writeSelectionToPasteboard:type:, and readablePasteboardTypes, readSelectionFromPasteboard:, readSelectionFromPasteboard:type:) is the style recommended with an eye toward making support for drag and drop and services straightforward.\
\
Files added: MyDocument_Pasteboard.h, MyDocument_Pasteboard.m\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\b\fs28 \cf0 Drag and Drop\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\b0\fs24 \cf0 * Drag and drop support is added using new NSTableView data source methods available in Tiger, which make it unnecessary to subclass NSTableView.  For this reason the drag and drop support is added to the array controller, TransactionsController.  The actual handling of the pasteboard is performed by the document, using the methods described above.\
\
* Since items in the table view are regarded in this application as being arranged by sorting rather than by manual rearrangement, the drag and drop operation supported is a copy, whether the user leaves the drag as generic or explicitly chooses a copy.  For similar reasons, the visual indication of the drag is always placed at the end of the table.  For drags from a given table view to itself, however, the drag is refused unless the user explicitly chooses a copy, so as to prevent inadvertent duplication.\
\
* Promise drags are explicitly supported using the new NSTableView data source method tableView:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:.  This allows us to create files lazily on demand, at a location specified by the recipient.  This is particularly intended for drags to the desktop or to the Finder.\
\
Files added: TransactionsController_Dragging.m\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\b \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\fs28 \cf0 Services\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f1\b0\fs24 \cf0 * With these changes, the application acts both as a services consumer, and as a services provider (with two services, "Add to iSpend" and "Copy from iSpend").  The init method in MyDocument.m is modified to provide a one-time-only registration of the pasteboard types handled for services consumption, and of the document class as a services provider.\
\
* The critical services consumer methods writeSelectionToPasteboard:types: and readSelectionFromPasteboard: were already implemented as part of pasteboard handling as described above.  The only additional method required for services consumption support is the validation method validRequestorForSendType:returnType:, which is implemented again at the document level.\
\
* The Info.plist is modified to add an NSServices entry, describing the two services that are provided.  To implement these, the corresponding methods, importData:userData:error: and exportData:userData:error:, are implemented on the services provider, the document class.\
\
Files modified: MyDocument.m, Info.plist, MyDocument_Pasteboard.m\
}